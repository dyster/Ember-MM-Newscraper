' ################################################################################
' #                             EMBER MEDIA MANAGER                              #
' ################################################################################
' ################################################################################
' # This file is part of Ember Media Manager.                                    #
' #                                                                              #
' # Ember Media Manager is free software: you can redistribute it and/or modify  #
' # it under the terms of the GNU General Public License as published by         #
' # the Free Software Foundation, either version 3 of the License, or            #
' # (at your option) any later version.                                          #
' #                                                                              #
' # Ember Media Manager is distributed in the hope that it will be useful,       #
' # but WITHOUT ANY WARRANTY; without even the implied warranty of               #
' # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
' # GNU General Public License for more details.                                 #
' #                                                                              #
' # You should have received a copy of the GNU General Public License            #
' # along with Ember Media Manager.  If not, see <http://www.gnu.org/licenses/>. #
' ################################################################################

Imports EmberAPI
Imports NLog
Imports System.Data
Imports System.IO
Imports System.Reflection
Imports System.Text.RegularExpressions
Imports EmberAPI.EFModels
Imports EmberAPICSharp

Public Class frmMain

#Region "Fields"

    Shared logger As Logger = LogManager.GetCurrentClassLogger()

    Friend WithEvents bwCheckVersion As New ComponentModel.BackgroundWorker
    Friend WithEvents bwCleanDB As New ComponentModel.BackgroundWorker
    Friend WithEvents bwDownloadPic As New ComponentModel.BackgroundWorker
    Friend WithEvents bwDownloadGuestStarPic As New ComponentModel.BackgroundWorker
    Friend WithEvents bwLoadImages_Movie As New ComponentModel.BackgroundWorker
    Friend WithEvents bwLoadImages_Movieset As New ComponentModel.BackgroundWorker
    Friend WithEvents bwLoadImages_MoviesetMoviePosters As New ComponentModel.BackgroundWorker
    Friend WithEvents bwLoadImages_TVEpisode As New ComponentModel.BackgroundWorker
    Friend WithEvents bwLoadImages_TVSeason As New ComponentModel.BackgroundWorker
    Friend WithEvents bwLoadImages_TVShow As New ComponentModel.BackgroundWorker
    Friend WithEvents bwMovieScraper As New ComponentModel.BackgroundWorker
    Friend WithEvents bwMovieSetScraper As New ComponentModel.BackgroundWorker
    Friend WithEvents bwReload_Movies As New ComponentModel.BackgroundWorker
    Friend WithEvents bwReload_MovieSets As New ComponentModel.BackgroundWorker
    Friend WithEvents bwReload_TVShows As New ComponentModel.BackgroundWorker
    Friend WithEvents bwRewriteContent As New ComponentModel.BackgroundWorker
    Friend WithEvents bwTVScraper As New ComponentModel.BackgroundWorker
    Friend WithEvents bwTVEpisodeScraper As New ComponentModel.BackgroundWorker
    Friend WithEvents bwTVSeasonScraper As New ComponentModel.BackgroundWorker

    Public fCommandLine As New CommandLine

    'Private fNotifications As New Notifications
    Private fScanner As New Scanner
    Private fTaskManager As New TaskManager

    Private TaskList As New List(Of Task)
    Private TasksDone As Boolean = True

    Private alActors As New List(Of String)
    Private alGuestStars As New List(Of String)
    Private FilterPanelIsRaised_Movie As Boolean = False
    Private FilterPanelIsRaised_MovieSet As Boolean = False
    Private FilterPanelIsRaised_TVShow As Boolean = False
    Private InfoPanelState_Movie As Integer = 0 '0 = down, 1 = mid, 2 = up
    Private InfoPanelState_MovieSet As Integer = 0 '0 = down, 1 = mid, 2 = up
    Private InfoPanelState_TVEpisode As Integer = 0 '0 = down, 1 = mid, 2 = up
    Private InfoPanelState_TVSeason As Integer = 0 '0 = down, 1 = mid, 2 = up
    Private InfoPanelState_TVShow As Integer = 0 '0 = down, 1 = mid, 2 = up

    Private bsMovies As New BindingSource
    Private bsMovieSets As New BindingSource
    Private bsTVEpisodes As New BindingSource
    Private bsTVSeasons As New BindingSource
    Private bsTVShows As New BindingSource

    Private dtMovies As New DataTable
    Private dtMovieSets As New DataTable
    Private dtTVEpisodes As New DataTable
    Private dtTVSeasons As New DataTable
    Private dtTVShows As New DataTable

    Private GenreImage As Image
    Private InfoCleared As Boolean = False
    Private LoadingDone As Boolean = False
    Private MainActors As New Images
    Private MainBackground As New Images
    Private MainBanner As New Images
    Private MainCharacterArt As New Images
    Private MainClearArt As New Images
    Private MainClearLogo As New Images
    Private MainDiscArt As New Images
    Private MainFanart As New Images
    Private MainGuestStars As New Images
    Private MainKeyart As New Images
    Private MainLandscape As New Images
    Private MainPoster As New Images
    Private pbGenre() As PictureBox = Nothing
    Private pnlGenre() As Panel = Nothing
    Private ReportDownloadPercent As Boolean = False
    Private sHTTP As New HTTP

    'Loading Delays
    Private currRow_Movie As Integer = -1
    Private currRow_MovieSet As Integer = -1
    Private currRow_TVEpisode As Integer = -1
    Private currRow_TVSeason As Integer = -1
    Private currRow_TVShow As Integer = -1
    Private currList As Integer = 0
    Private currThemeType As Enums.ContentType = Enums.ContentType.None
    Private prevRow_Movie As Integer = -1
    Private prevRow_MovieSet As Integer = -1
    Private prevRow_TVEpisode As Integer = -1
    Private prevRow_TVSeason As Integer = -1
    Private prevRow_TVShow As Integer = -1

    'list movies
    Private currList_Movies As String = "movielist" 'default movie list SQLite view
    Private listViews_Movies As New Dictionary(Of String, String)

    'list moviesets
    Private currList_Moviesets As String = "moviesetlist" 'default moviesets list SQLite view
    Private listViews_Moviesets As New Dictionary(Of String, String)

    'list shows
    Private currList_TVShows As String = "tvshowlist" 'default tv show list SQLite view
    Private listViews_TVShows As New Dictionary(Of String, String)

    'filter movies
    Private bDoingSearch_Movies As Boolean = False
    Private FilterArray_Movies As New List(Of String)
    Private filDataField_Movies As String = String.Empty
    Private filSearch_Movies As String = String.Empty
    Private filSource_Movies As String = String.Empty
    Private filYear_Movies As String = String.Empty
    Private filGenre_Movies As String = String.Empty
    Private filCountry_Movies As String = String.Empty
    Private filMissing_Movies As String = String.Empty
    Private filTag_Movies As String = String.Empty
    Private filVideoSource_Movies As String = String.Empty
    Private currTextSearch_Movies As String = String.Empty
    Private prevTextSearch_Movies As String = String.Empty

    'filter moviesets
    Private bDoingSearch_MovieSets As Boolean = False
    Private FilterArray_MovieSets As New List(Of String)
    Private filSearch_MovieSets As String = String.Empty
    Private filMissing_MovieSets As String = String.Empty
    Private currTextSearch_MovieSets As String = String.Empty
    Private prevTextSearch_MovieSets As String = String.Empty

    'filter shows
    Private bDoingSearch_TVShows As Boolean = False
    Private FilterArray_TVShows As New List(Of String)
    Private filSearch_TVShows As String = String.Empty
    Private filSource_TVShows As String = String.Empty
    Private filGenre_TVShows As String = String.Empty
    Private filMissing_TVShows As String = String.Empty
    Private filTag_TVShows As String = String.Empty
    Private currTextSearch_TVShows As String = String.Empty
    Private prevTextSearch_TVShows As String = String.Empty

    'Theming
    Private tTheme As New Theming

    Private CloseApp As Boolean = False

    Private _SelectedScrapeType As String = String.Empty
    Private _SelectedScrapeTypeMode As String = String.Empty
    Private _SelectedContentType As String = String.Empty

    Private oldStatus As String = String.Empty

    Private KeyBuffer As String = String.Empty

    Private currMovie As Database.DBElement
    Private currMovieset As Database.DBElement
    Private currTV As Database.DBElement

#End Region 'Fields

#Region "Delegates"

    Delegate Sub Delegate_dtListAddRow(ByVal dTable As DataTable, ByVal dRow As DataRow)
    Delegate Sub Delegate_dtListRemoveRow(ByVal dTable As DataTable, ByVal dRow As DataRow)
    Delegate Sub Delegate_dtListUpdateRow(ByVal dRow As DataRow, ByVal v As DataRow)

    Delegate Sub Delegate_ChangeToolStripLabel(control As ToolStripLabel,
                                               bVisible As Boolean,
                                               strValue As String)
    Delegate Sub Delegate_ChangeToolStripProgressBar(control As ToolStripProgressBar,
                                                     bVisible As Boolean,
                                                     iMaximum As Integer,
                                                     iMinimum As Integer,
                                                     iValue As Integer,
                                                     tStyle As ProgressBarStyle)

    Delegate Sub Delegate_SettingsDialog(ByVal dlg As dlgSettings)

#End Region 'Delegates

#Region "Properties"

    Public Property GenrePanelColor() As Color = Color.Gainsboro

    Public Property InfoPanelMidHeight() As Integer = 280

    Public Property InfoPanelUpHeight() As Integer = 500

    Public Property BannerMaxHeight() As Integer = 160
    Public Property BannerMaxWidth() As Integer = 285
    Public Property CharacterArtMaxHeight() As Integer = 160
    Public Property CharacterArtMaxWidth() As Integer = 160
    Public Property ClearArtMaxHeight() As Integer = 160
    Public Property ClearArtMaxWidth() As Integer = 285
    Public Property ClearLogoMaxHeight() As Integer = 160
    Public Property ClearLogoMaxWidth() As Integer = 285
    Public Property DiscArtMaxHeight() As Integer = 160
    Public Property DiscArtMaxWidth() As Integer = 160
    Public Property FanartSmallMaxHeight() As Integer = 160
    Public Property FanartSmallMaxWidth() As Integer = 285
    Public Property KeyartMaxHeight() As Integer = 160
    Public Property KeyartMaxWidth() As Integer = 160
    Public Property LandscapeMaxHeight() As Integer = 160
    Public Property LandscapeMaxWidth() As Integer = 285
    Public Property MediaListColors As New XMLTheme.MediaListSettings
    Public Property PosterMaxHeight() As Integer = 160
    Public Property PosterMaxWidth() As Integer = 113
    Public Property TopPanelColors As New XMLTheme.TopPanelSettings

#End Region 'Properties

#Region "Dialog"

    Private Sub Dialog_FormClosed(sender As Object, e As FormClosedEventArgs) Handles MyBase.FormClosed
        logger.Info("====Ember Media Manager exiting====")
    End Sub
    ''' <summary>
    ''' The FormClosing event has been called, so prepare the form to shut down
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub Dialog_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs) Handles MyBase.FormClosing

        Try
            Dim doSave As Boolean = True

            SetControlsEnabled(False, True)
            Filter_Enable_Movie(False)
            Filter_Enable_Movieset(False)
            Filter_Enable_TVShow(False)

            If fScanner.IsBusy OrElse Master.isCL Then
                doSave = False
            End If

            If fScanner.IsBusy Then fScanner.Cancel()
            If bwLoadImages_Movie.IsBusy Then bwLoadImages_Movie.CancelAsync()
            If bwLoadImages_Movieset.IsBusy Then bwLoadImages_Movieset.CancelAsync()
            If bwLoadImages_MoviesetMoviePosters.IsBusy Then bwLoadImages_MoviesetMoviePosters.CancelAsync()
            If bwLoadImages_TVShow.IsBusy Then bwLoadImages_TVShow.CancelAsync()
            If bwLoadImages_TVSeason.IsBusy Then bwLoadImages_TVSeason.CancelAsync()
            If bwLoadImages_TVEpisode.IsBusy Then bwLoadImages_TVEpisode.CancelAsync()
            If bwDownloadPic.IsBusy Then bwDownloadPic.CancelAsync()
            If bwReload_Movies.IsBusy Then bwReload_Movies.CancelAsync()
            If bwCleanDB.IsBusy Then bwCleanDB.CancelAsync()
            If bwMovieScraper.IsBusy Then bwMovieScraper.CancelAsync()

            lblCanceling.Text = Master.eLang.GetString(99, "Canceling All Processes...")
            btnCancel.Visible = False
            lblCanceling.Visible = True
            prbCanceling.Visible = True
            pnlCancel.Visible = True
            Refresh()

            If Addons.Instance.QueryAnyAddonIsBusy Then
                If MessageBox.Show("One or more modules are busy. Do you want to wait until all tasks are finished?", "One or more external Modules are busy", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = DialogResult.Yes Then
                    While Addons.Instance.QueryAnyAddonIsBusy
                        Application.DoEvents()
                        Threading.Thread.Sleep(50)
                    End While
                End If
            End If

            While fScanner.IsBusy OrElse bwLoadImages_Movie.IsBusy _
            OrElse bwLoadImages_Movieset.IsBusy OrElse bwDownloadPic.IsBusy OrElse bwMovieScraper.IsBusy _
            OrElse bwReload_Movies.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse bwCleanDB.IsBusy _
            OrElse bwLoadImages_TVShow.IsBusy OrElse bwLoadImages_TVEpisode.IsBusy OrElse bwLoadImages_TVSeason.IsBusy _
            OrElse bwLoadImages_MoviesetMoviePosters.IsBusy
                Application.DoEvents()
                Threading.Thread.Sleep(50)
            End While

            If doSave Then
                Master.DB.Clear_New()
            End If

            If Not Master.isCL Then
                Master.DB.Close_MyVideos()
            End If

            If Not Master.isCL Then
                Application.DoEvents()
                Master.eSettings.GeneralFilterPanelIsRaisedMovie = FilterPanelIsRaised_Movie
                Master.eSettings.GeneralFilterPanelIsRaisedMovieSet = FilterPanelIsRaised_MovieSet
                Master.eSettings.GeneralFilterPanelIsRaisedTVShow = FilterPanelIsRaised_TVShow
                Master.eSettings.GeneralInfoPanelStateMovie = InfoPanelState_Movie
                Master.eSettings.GeneralInfoPanelStateMovieSet = InfoPanelState_MovieSet
                Master.eSettings.GeneralInfoPanelStateTVEpisode = InfoPanelState_TVEpisode
                Master.eSettings.GeneralInfoPanelStateTVSeason = InfoPanelState_TVSeason
                Master.eSettings.GeneralInfoPanelStateTVShow = InfoPanelState_TVShow
                Master.eSettings.GeneralSplitterDistanceMain = scMain.SplitterDistance
                'Master.eSettings.GeneralSplitterDistanceTVShow and Master.eSettings.GeneralSplitterDistanceTVSeason will not be saved at this point
                If WindowState = FormWindowState.Normal Then
                    Master.eSettings.GeneralWindowLoc = Location
                    Master.eSettings.GeneralWindowSize = Size
                End If
                If Not WindowState = FormWindowState.Minimized Then
                    Master.eSettings.GeneralWindowState = WindowState
                End If
            End If
            Master.eSettings.Save()

        Catch ex As Exception
            ' If we got here, then some of the above not run. Application.Exit can not be used. 
            ' Because Exit will dispose object that are in use by BackgroundWorkers
            ' If any BackgroundWorker still running will raise exception 
            ' "Collection was modified; enumeration operation may not execute."
            ' Application.Exit()
        End Try
    End Sub
    ''' <summary>
    ''' The form is loading. This method occurs before the form is actually visible.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub Dialog_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        Visible = False

        TrayIcon = New NotifyIcon(components) With {
            .ContextMenuStrip = cmnuTray,
            .Icon = Icon,
            .Text = "Ember Media Manager",
            .Visible = True
        }

        bwCheckVersion.RunWorkerAsync()

        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(854, "Basic setup"))

        AddHandler AppDomain.CurrentDomain.AssemblyResolve, AddressOf MyResolveEventHandler

        'Create Addons folder
        Dim sPath = String.Concat(Functions.AppPath, "Addons")
        If Not Directory.Exists(sPath) Then
            Directory.CreateDirectory(sPath)
        End If

        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(855, "Creating default options..."))
        Functions.CreateDefaultOptions()

        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(858, "Loading Database..."))
        Master.DB.Connect_MyVideos()
        Master.DB.LoadAll_Certifications()
        Master.DB.LoadAll_Countries()
        Master.DB.LoadAll_Genres()
        Master.DB.LoadAll_Studios()

        'set before modules has been loaded to prepare all RuntimeObjects that are used in modules 
        Addons.Instance.RuntimeObjects.MainMenu = mnuMain
        Addons.Instance.RuntimeObjects.MainToolStrip = tsMain
        Addons.Instance.RuntimeObjects.MediaListMovies = dgvMovies
        Addons.Instance.RuntimeObjects.MediaListMovieSets = dgvMovieSets
        Addons.Instance.RuntimeObjects.MediaListTVEpisodes = dgvTVEpisodes
        Addons.Instance.RuntimeObjects.MediaListTVSeasons = dgvTVSeasons
        Addons.Instance.RuntimeObjects.MediaListTVShows = dgvTVShows
        Addons.Instance.RuntimeObjects.ContextMenuMovieList = cmnuMovie
        Addons.Instance.RuntimeObjects.ContextMenuMovieSetList = cmnuMovieSet
        Addons.Instance.RuntimeObjects.ContextMenuTVEpisodeList = cmnuEpisode
        Addons.Instance.RuntimeObjects.ContextMenuTVSeasonList = cmnuSeason
        Addons.Instance.RuntimeObjects.ContextMenuTVShowList = cmnuShow
        Addons.Instance.RuntimeObjects.TrayMenu = cmnuTray

        'start loading modules in background
        Addons.Instance.LoadAddons_All()

        If Not Master.isCL Then
            Master.fLoading.SetLoadingMesg(Master.eLang.GetString(857, "Creating GUI..."))
        End If

        'setup some dummies so we don't get exceptions when resizing form/info panel
        ReDim Preserve pnlGenre(0)
        ReDim Preserve pbGenre(0)
        pnlGenre(0) = New Panel()
        pbGenre(0) = New PictureBox()

        AddHandler fCommandLine.TaskEvent, AddressOf TaskManager_RunCallBack
        AddHandler fScanner.ProgressUpdate, AddressOf Scanner_ProgressChanged
        AddHandler fTaskManager.ProgressUpdate, AddressOf TaskManager_ProgressChanged
        AddHandler Notifications.ShowNotification, AddressOf ShowNotification
        AddHandler Addons.Instance.GenericEvent, AddressOf GenericRunCallBack
        AddHandler Master.DB.GenericEvent, AddressOf GenericRunCallBack

        Functions.DGVDoubleBuffer(dgvMovies)
        Functions.DGVDoubleBuffer(dgvMovieSets)
        Functions.DGVDoubleBuffer(dgvTVShows)
        Functions.DGVDoubleBuffer(dgvTVSeasons)
        Functions.DGVDoubleBuffer(dgvTVEpisodes)
        SetStyle(ControlStyles.DoubleBuffer, True)
        SetStyle(ControlStyles.AllPaintingInWmPaint, True)
        SetStyle(ControlStyles.UserPaint, True)

        If TypeOf tsMain.Renderer Is ToolStripProfessionalRenderer Then
            CType(tsMain.Renderer, ToolStripProfessionalRenderer).RoundedEdges = False
        End If

        If Not Directory.Exists(Master.TempPath) Then Directory.CreateDirectory(Master.TempPath)

        While Not Addons.Instance.AllAddonsLoaded()
            Master.fLoading.SetLoadingMesg(Master.eLang.GetString(856, "Loading Addons..."))
            Application.DoEvents()
            Threading.Thread.Sleep(50)
        End While

        RemoveHandler dgvMovies.CellEnter, AddressOf dgvMovies_CellEnter
        RemoveHandler dgvMovies.RowsAdded, AddressOf dgvMovies_RowsAdded
        RemoveHandler dgvMovieSets.RowsAdded, AddressOf dgvMovieSets_RowsAdded
        RemoveHandler dgvTVShows.RowsAdded, AddressOf dgvTVShows_RowsAdded
        DataGridView_FillList_Main(True, False, False) 'Disabling the shows for now to focus on getting movies working
        AddHandler dgvMovies.CellEnter, AddressOf dgvMovies_CellEnter
        AddHandler dgvMovies.RowsAdded, AddressOf dgvMovies_RowsAdded
        AddHandler dgvMovieSets.RowsAdded, AddressOf dgvMovieSets_RowsAdded
        AddHandler dgvTVShows.RowsAdded, AddressOf dgvTVShows_RowsAdded

        If Master.isCL Then ' Command Line
            Dialog_Load_With_CommandLine(Master.appArgs)
        Else 'Regular Run (GUI)
            Dialog_Load_With_GUI()
        End If
        Master.fLoading.Close()
    End Sub
    ''' <summary>
    ''' Performs startup routines specific to being initiated by the command line
    ''' </summary>
    ''' <param name="appArgs">Command line arguments. Must NOT be empty!</param>
    ''' <remarks></remarks>
    Private Sub Dialog_Load_With_CommandLine(ByVal appArgs As Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)
        Dim Args() As String = appArgs.CommandLine.ToArray

        fCommandLine.RunCommandLine(Args)

        While Not TaskList.Count = 0 OrElse Not TasksDone
            Application.DoEvents()
            Threading.Thread.Sleep(50)
        End While

        Master.fLoading.Close()
        Close()
    End Sub
    ''' <summary>
    ''' Performs startup routines specific to being initiated as a GUI application (user interaction intended)
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub Dialog_Load_With_GUI()
        Try
            logger.Trace("LoadWithGUI()")
            'If Master.eSettings.CheckUpdates Then
            '    If Functions.CheckNeedUpdate() Then
            '        Using dNewVer As New dlgNewVersion
            '            fLoading.Hide()
            '            If dNewVer.ShowDialog() = Windows.Forms.DialogResult.Abort Then
            '                tmrAppExit.Enabled = True
            '                CloseApp = True
            '            End If
            '        End Using
            '    End If
            'End If

            ' Not localized as is the Assembly file version
            'Dim VersionNumberO As String = System.String.Format("{0}.{1}.{2}.{3}", My.Application.Info.Version.Major, My.Application.Info.Version.Minor, My.Application.Info.Version.Build, My.Application.Info.Version.Revision)

            If Not CloseApp Then

                'moved to frmMain_Load
                'Me.tpMovies.Tag = New Structures.MainTabType With {.ContentName = Master.eLang.GetString(36, "Movies"), .ContentType = Enums.Content_Type.Movie, .DefaultList = "movielist"}
                'Me.tpMovieSets.Tag = New Structures.MainTabType With {.ContentName = Master.eLang.GetString(366, "Sets"), .ContentType = Enums.Content_Type.MovieSet, .DefaultList = "setslist"}
                'Me.tpTVShows.Tag = New Structures.MainTabType With {.ContentName = Master.eLang.GetString(653, "TV Shows"), .ContentType = Enums.Content_Type.TV, .DefaultList = "tvshowlist"}
                'ModulesManager.Instance.RuntimeObjects.MediaTabSelected = DirectCast(Me.tcMain.SelectedTab.Tag, Structures.MainTabType)

                Setup(True)

                Master.fLoading.SetLoadingMesg(Master.eLang.GetString(863, "Positioning controls..."))
                Location = Master.eSettings.GeneralWindowLoc
                Size = Master.eSettings.GeneralWindowSize
                WindowState = Master.eSettings.GeneralWindowState
                If Not WindowState = FormWindowState.Minimized Then
                    Master.AppPos = Bounds
                End If

                'SplitterDistance
                Try ' On error just ignore this a let it use default
                    scMain.SplitterDistance = Master.eSettings.GeneralSplitterDistanceMain
                    'Master.eSettings.GeneralSplitterDistanceTVShow and Master.eSettings.GeneralSplitterDistanceTVSeason will not be loaded at this point
                Catch ex As Exception
                    logger.Error(ex, New StackFrame().GetMethod().Name)
                End Try

                'Info panels
                InfoPanelState_Movie = Master.eSettings.GeneralInfoPanelStateMovie
                Select Case InfoPanelState_Movie
                    Case 0
                        pnlInfoPanel.Height = 25
                        btnDown.Enabled = False
                        btnMid.Enabled = True
                        btnUp.Enabled = True
                    Case 1
                        pnlInfoPanel.Height = InfoPanelMidHeight
                        btnMid.Enabled = False
                        btnDown.Enabled = True
                        btnUp.Enabled = True
                    Case 2
                        pnlInfoPanel.Height = InfoPanelUpHeight
                        btnUp.Enabled = False
                        btnDown.Enabled = True
                        btnMid.Enabled = True
                End Select

                InfoPanelState_MovieSet = Master.eSettings.GeneralInfoPanelStateMovieSet
                InfoPanelState_TVEpisode = Master.eSettings.GeneralInfoPanelStateTVEpisode
                InfoPanelState_TVSeason = Master.eSettings.GeneralInfoPanelStateTVSeason
                InfoPanelState_TVShow = Master.eSettings.GeneralInfoPanelStateTVShow

                'Filter panels
                FilterPanelIsRaised_Movie = Master.eSettings.GeneralFilterPanelIsRaisedMovie
                If FilterPanelIsRaised_Movie Then
                    pnlFilter_Movies.AutoSize = True
                    btnFilterDown_Movies.Enabled = True
                    btnFilterUp_Movies.Enabled = False
                Else
                    pnlFilter_Movies.AutoSize = False
                    pnlFilter_Movies.Height = pnlFilterTop_Movies.Height
                    btnFilterDown_Movies.Enabled = False
                    btnFilterUp_Movies.Enabled = True
                End If

                FilterPanelIsRaised_MovieSet = Master.eSettings.GeneralFilterPanelIsRaisedMovieSet
                If FilterPanelIsRaised_MovieSet Then
                    pnlFilter_MovieSets.AutoSize = True
                    btnFilterDown_MovieSets.Enabled = True
                    btnFilterUp_MovieSets.Enabled = False
                Else
                    pnlFilter_MovieSets.AutoSize = False
                    pnlFilter_MovieSets.Height = pnlFilterTop_MovieSets.Height
                    btnFilterDown_MovieSets.Enabled = False
                    btnFilterUp_MovieSets.Enabled = True
                End If

                FilterPanelIsRaised_TVShow = Master.eSettings.GeneralFilterPanelIsRaisedTVShow
                If FilterPanelIsRaised_TVShow Then
                    pnlFilter_Shows.AutoSize = True
                    btnFilterDown_Shows.Enabled = True
                    btnFilterUp_Shows.Enabled = False
                Else
                    pnlFilter_Shows.AutoSize = False
                    pnlFilter_Shows.Height = pnlFilterTop_Shows.Height
                    btnFilterDown_Shows.Enabled = False
                    btnFilterUp_Shows.Enabled = True
                End If

                pnlFilter_Movies.Visible = True

                'MenuItem Tags for better Enable/Disable handling
                mnuMainToolsCleanDB.Tag = New Structures.ModulesMenus With {.ForMovies = True, .IfNoMovies = True, .IfTabMovies = True, .IfTabMovieSets = True, .IfNoMovieSets = True, .IfNoTVShows = True, .IfTabTVShows = True}
                mnuMainToolsClearCache.Tag = New Structures.ModulesMenus With {.ForMovies = True, .IfNoMovies = True, .IfTabMovies = True, .IfTabMovieSets = True, .IfNoMovieSets = True, .IfNoTVShows = True, .IfTabTVShows = True}
                mnuMainToolsOfflineHolder.Tag = New Structures.ModulesMenus With {.ForMovies = True, .IfTabMovies = True, .IfNoMovies = True}
                mnuMainToolsReloadMovies.Tag = New Structures.ModulesMenus With {.ForMovies = True, .IfTabMovies = True, .IfTabMovieSets = True, .IfTabTVShows = True}
                mnuMainToolsReloadMovieSets.Tag = New Structures.ModulesMenus With {.ForMovieSets = True, .IfTabMovies = True, .IfTabMovieSets = True, .IfTabTVShows = True}
                mnuMainToolsReloadTVShows.Tag = New Structures.ModulesMenus With {.ForTVShows = True, .IfTabMovies = True, .IfTabMovieSets = True, .IfTabTVShows = True}
                mnuMainToolsRewriteContentMovie.Tag = New Structures.ModulesMenus With {.ForMovies = True, .IfTabMovies = True, .IfTabMovieSets = True, .IfTabTVShows = True}
                mnuMainToolsSortFiles.Tag = New Structures.ModulesMenus With {.ForMovies = True, .IfNoMovies = True, .IfTabMovies = True, .IfTabMovieSets = True, .IfTabTVShows = True}

                Master.fLoading.SetLoadingMesg(Master.eLang.GetString(1165, "Initializing Main Form. Please wait..."))

                Application.DoEvents()

                Visible = True

                Master.fLoading.SetLoadingMesg(Master.eLang.GetString(864, "Setting menus..."))
                SetMenus(True)
                cmnuTrayExit.Enabled = True
                cmnuTraySettings.Enabled = True
                mnuMainEdit.Enabled = True
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Private Sub Dialog_Move(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Move
        If Not WindowState = FormWindowState.Minimized Then
            Master.AppPos = Bounds
        End If
    End Sub
    ''' <summary>
    ''' The form has been resized, so re-position those controls that need to be re-located
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub Dialog_Resize(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Resize
        If Created Then
            If Not WindowState = FormWindowState.Minimized Then
                Master.AppPos = Bounds
            End If
            InfoScreen_Move_MPAAIcon()
            InfoScreen_Move_GenreIcons()
            ImageUtils.ResizePB(pbBackground, pbBackgroundCache, scMain.Panel2.Height - 90, scMain.Panel2.Width, True)
            pbBackground.Left = Convert.ToInt32((scMain.Panel2.Width - pbBackground.Width) / 2)
            pnlNoInfo.Location = New Point(Convert.ToInt32((scMain.Panel2.Width - pnlNoInfo.Width) / 2), Convert.ToInt32((scMain.Panel2.Height - pnlNoInfo.Height) / 2))
            pnlCancel.Location = New Point(Convert.ToInt32((scMain.Panel2.Width - pnlNoInfo.Width) / 2), 124)
            pnlFilterCountries_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterCountry_Movies.Left + 1,
                                                              (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterCountry_Movies.Top) - pnlFilterCountries_Movies.Height)
            pnlFilterGenres_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterGenre_Movies.Left + 1,
                                                           (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterGenre_Movies.Top) - pnlFilterGenres_Movies.Height)
            pnlFilterGenres_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterSpecific_Shows.Left + tblFilterSpecific_Shows.Left + tblFilterSpecificData_Shows.Left + txtFilterGenre_Shows.Left + 1,
                                                          (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterSpecific_Shows.Top + tblFilterSpecific_Shows.Top + tblFilterSpecificData_Shows.Top + txtFilterGenre_Shows.Top) - pnlFilterGenres_Shows.Height)
            pnlFilterDataFields_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + gbFilterDataField_Movies.Left + tblFilterDataField_Movies.Left + txtFilterDataField_Movies.Left + 1,
                                                               (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + gbFilterDataField_Movies.Top + tblFilterDataField_Movies.Top + txtFilterDataField_Movies.Top) - pnlFilterDataFields_Movies.Height)
            pnlFilterMissingItems_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterGeneral_Movies.Left + tblFilterGeneral_Movies.Left + btnFilterMissing_Movies.Left + 1,
                                                                 (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterGeneral_Movies.Top + tblFilterGeneral_Movies.Top + btnFilterMissing_Movies.Top) - pnlFilterMissingItems_Movies.Height)
            pnlFilterMissingItems_MovieSets.Location = New Point(pnlFilter_MovieSets.Left + tblFilter_MovieSets.Left + gbFilterGeneral_MovieSets.Left + tblFilterGeneral_MovieSets.Left + btnFilterMissing_MovieSets.Left + 1,
                                                                 (pnlFilter_MovieSets.Top + tblFilter_MovieSets.Top + gbFilterGeneral_MovieSets.Top + tblFilterGeneral_MovieSets.Top + btnFilterMissing_MovieSets.Top) - pnlFilterMissingItems_MovieSets.Height)
            pnlFilterMissingItems_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterGeneral_Shows.Left + tblFilterGeneral_Shows.Left + btnFilterMissing_Shows.Left + 1,
                                                                 (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterGeneral_Shows.Top + tblFilterGeneral_Shows.Top + btnFilterMissing_Shows.Top) - pnlFilterMissingItems_Shows.Height)
            pnlFilterSources_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterSource_Movies.Left + 1,
                                                            (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterSource_Movies.Top) - pnlFilterSources_Movies.Height)
            pnlFilterSources_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterSpecific_Shows.Left + tblFilterSpecific_Shows.Left + tblFilterSpecificData_Shows.Left + txtFilterSource_Shows.Left + 1,
                                                           (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterSpecific_Shows.Top + tblFilterSpecific_Shows.Top + tblFilterSpecificData_Shows.Top + txtFilterSource_Shows.Top) - pnlFilterSources_Shows.Height)
            pnlFilterTags_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterTag_Movies.Left + 1,
                                                           (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterTag_Movies.Top) - pnlFilterTags_Movies.Height)
            pnlFilterVideoSources_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterVideoSource_Movies.Left + 1,
                                                              (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterVideoSource_Movies.Top) - pnlFilterVideoSources_Movies.Height)
            pnlLoadSettings.Location = New Point(Convert.ToInt32((Width - pnlLoadSettings.Width) / 2), Convert.ToInt32((Height - pnlLoadSettings.Height) / 2))
        End If
    End Sub

    Private Sub Dialog_Shown(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Shown
        If Not CloseApp Then
            BringToFront()
            Activate()
            cmnuTray.Enabled = True
        End If
    End Sub
    ''' <summary>
    ''' Setup the default/initial text for the GUI's controls. 
    ''' Language used is based on the app's current setting.
    ''' </summary>
    ''' <param name="doTheme"></param>
    ''' <remarks></remarks>
    Private Sub Setup(ByVal doTheme As Boolean)
        MinimumSize = New Size(800, 600)

        'Actor Thumbs Only
        Dim strActorThumbsOnly = Master.eLang.GetString(973, "Actor Thumbs Only")
        mnuScrapeModifierActorthumbs.Text = strActorThumbsOnly

        'Add
        Dim strAdd As String = Master.eLang.GetString(28, "Add")
        mnuGenresAdd.Text = strAdd
        mnuTagsAdd.Text = strAdd

        'All
        Dim strAll As String = Master.eLang.GetString(68, "All")
        mnuScrapeSubmenuAll.Text = strAll

        'All Items
        Dim strAllItems As String = Master.eLang.GetString(70, "All Items")
        mnuScrapeModifierAll.Text = strAllItems
        mnuMainToolsRewriteContentMovieAll.Text = strAllItems
        mnuMainToolsRewriteContentMovieSetAll.Text = strAllItems
        mnuMainToolsRewriteContentTVShowAll.Text = strAllItems

        'Ask (Require Input If No Exact Match)
        Dim strAsk As String = Master.eLang.GetString(77, "Ask (Require Input If No Exact Match)")
        mnuScrapeTypeAsk.Text = strAsk

        'Automatic (Force Best Match)
        Dim strAutomatic As String = Master.eLang.GetString(69, "Automatic (Force Best Match)")
        mnuScrapeTypeAuto.Text = strAutomatic

        'Custom Scraper
        Dim strCustomScraper = Master.eLang.GetString(81, "Custom Scraper...")
        mnuScrapeSubmenuCustom.Text = strCustomScraper

        'Banner Only
        Dim strBannerOnly As String = Master.eLang.GetString(1060, "Banner Only")
        mnuScrapeModifierBanner.Text = strBannerOnly

        'Change Language
        Dim strChangeLanguage As String = Master.eLang.GetString(1200, "Change Language")
        cmnuMovieLanguage.Text = strChangeLanguage
        cmnuMovieSetLanguage.Text = strChangeLanguage
        cmnuShowLanguage.Text = strChangeLanguage

        'CharacterArt Only
        Dim strCharacterArtOnly As String = Master.eLang.GetString(1121, "CharacterArt Only")
        mnuScrapeModifierCharacterArt.Text = strCharacterArtOnly

        'ClearArt Only
        Dim strClearArtOnly As String = Master.eLang.GetString(1122, "ClearArt Only")
        mnuScrapeModifierClearArt.Text = strClearArtOnly

        'ClearLogo Only
        Dim strClearLogoOnly As String = Master.eLang.GetString(1123, "ClearLogo Only")
        mnuScrapeModifierClearLogo.Text = strClearLogoOnly

        'Close
        Dim strClose As String = Master.eLang.GetString(19, "Close")
        lblFilterDataFieldsClose_Movies.Text = strClose
        lblFilterGenresClose_Movies.Text = strClose
        lblFilterGenresClose_Shows.Text = strClose
        lblFilterSourcesClose_Movies.Text = strClose
        lblFilterSourcesClose_Shows.Text = strClose
        lblFilterTagsClose_Movies.Text = strClose

        'Current Filter
        Dim strCurrentFilter As String = Master.eLang.GetString(624, "Current Filter")
        mnuScrapeSubmenuFilter.Text = strCurrentFilter

        'DiscArt Only
        Dim strDiscArtOnly As String = Master.eLang.GetString(1124, "DiscArt Only")
        mnuScrapeModifierDiscArt.Text = strDiscArtOnly

        'Edit Data Fields
        Dim strEditDataField As String = Master.eLang.GetString(1087, "Clear or Replace Data Fields")
        cmnuEpisodeEditDataFields.Text = String.Concat(strEditDataField, "...")
        cmnuMovieEditDataFields.Text = String.Concat(strEditDataField, "...")
        cmnuMovieSetEditDataFields.Text = String.Concat(strEditDataField, "...")
        cmnuSeasonEditDataFields.Text = String.Concat(strEditDataField, "...")
        cmnuShowEditDataFields.Text = String.Concat(strEditDataField, "...")

        'Edit Genres
        Dim strEditGenres As String = Master.eLang.GetString(1051, "Edit Genres")
        cmnuMovieEditGenres.Text = strEditGenres
        cmnuShowEditGenres.Text = strEditGenres

        'Edit Movie Sorting
        Dim strEditMovieSorting As String = Master.eLang.GetString(939, "Edit Movie Sorting")
        cmnuMovieSetEditSortMethod.Text = strEditMovieSorting

        'Edit Season
        Dim strEditSeason As String = Master.eLang.GetString(769, "Edit Season")
        cmnuSeasonEdit.Text = strEditSeason

        'Edit Tags
        Dim strEditTags As String = Master.eLang.GetString(1052, "Edit Tags")
        cmnuMovieEditTags.Text = strEditTags
        cmnuShowEditTags.Text = strEditTags

        'Episodes
        Dim strEpisodes As String = Master.eLang.GetString(682, "Episodes")
        gbFilterSpecificEpisodes_Shows.Text = strEpisodes

        'Extrafanarts Only
        Dim strExtrafanartsOnly As String = Master.eLang.GetString(975, "Extrafanarts Only")
        mnuScrapeModifierExtrafanarts.Text = strExtrafanartsOnly

        'Extrathumbs Only
        Dim strExtrathumbsOnly As String = Master.eLang.GetString(74, "Extrathumbs Only")
        mnuScrapeModifierExtrathumbs.Text = strExtrathumbsOnly

        'Fanart Only
        Dim strFanartOnly As String = Master.eLang.GetString(73, "Fanart Only")
        mnuScrapeModifierFanart.Text = strFanartOnly

        'Filters (Active/Inactive)
        Dim strFilters As String = Master.eLang.GetString(52, "Filters")
        lblFilter_Movies.Text = String.Format("{0} ({1})", strFilters, If(bsMovies.Filter Is Nothing, Master.eLang.GetString(1091, "Inactive"), Master.eLang.GetString(1090, "Active")))
        lblFilter_MovieSets.Text = String.Format("{0} ({1})", strFilters, If(bsMovieSets.Filter Is Nothing, Master.eLang.GetString(1091, "Inactive"), Master.eLang.GetString(1090, "Active")))
        lblFilter_Shows.Text = String.Format("{0} ({1})", strFilters, If(bsTVShows.Filter Is Nothing, Master.eLang.GetString(1091, "Inactive"), Master.eLang.GetString(1090, "Active")))

        'Landscape Only
        Dim strLandscapeOnly As String = Master.eLang.GetString(1061, "Landscape Only")
        mnuScrapeModifierLandscape.Text = strLandscapeOnly

        'List
        Dim strList As String = Master.eLang.GetString(1394, "List")
        gbFilterList_Movies.Text = strList
        gbFilterList_MovieSets.Text = strList
        gbFilterList_Shows.Text = strList

        'Lock
        Dim strLock As String = Master.eLang.GetString(24, "Lock")
        cmnuEpisodeLock.Text = strLock
        cmnuMovieLock.Text = strLock
        cmnuMovieSetLock.Text = strLock
        cmnuSeasonLock.Text = strLock
        cmnuShowLock.Text = strLock

        'Locked
        Dim strLocked As String = Master.eLang.GetString(43, "Locked")
        chkFilterLock_Movies.Text = strLocked
        chkFilterLock_MovieSets.Text = strLocked
        chkFilterLock_Shows.Text = strLocked
        chkFilterLockEpisodes_Shows.Text = strLocked

        'Mark
        Dim strMark As String = Master.eLang.GetString(23, "Mark")
        cmnuEpisodeMark.Text = strMark
        cmnuMovieMark.Text = strMark
        cmnuMovieSetMark.Text = strMark
        cmnuSeasonMark.Text = strMark
        cmnuShowMark.Text = strMark

        'Mark as Watched
        Dim strMarkAsWatched As String = Master.eLang.GetString(1072, "Mark as Watched")
        cmnuMovieWatched.Text = strMarkAsWatched
        cmnuEpisodeWatched.Text = strMarkAsWatched
        cmnuSeasonWatched.Text = strMarkAsWatched
        cmnuShowWatched.Text = strMarkAsWatched

        'Mark as Unwatched
        Dim strMarkAsUnwatched As String = Master.eLang.GetString(1073, "Mark as Unatched")
        cmnuMovieUnwatched.Text = strMarkAsUnwatched
        cmnuEpisodeUnwatched.Text = strMarkAsUnwatched
        cmnuSeasonUnwatched.Text = strMarkAsUnwatched
        cmnuShowUnwatched.Text = strMarkAsUnwatched

        'Marked
        Dim strMarked As String = Master.eLang.GetString(48, "Marked")
        chkFilterMark_Movies.Text = strMarked
        chkFilterMark_MovieSets.Text = strMarked
        chkFilterMark_Shows.Text = strMarked
        chkFilterMarkEpisodes_Shows.Text = strMarked
        mnuScrapeSubmenuMarked.Text = strMarked

        'Meta Data Only
        Dim strMetaDataOnly As String = Master.eLang.GetString(76, "Meta Data Only")
        mnuScrapeModifierMetaData.Text = strMetaDataOnly

        'Missing Items
        Dim strMissingItems As String = Master.eLang.GetString(40, "Missing Items")
        btnFilterMissing_Movies.Text = strMissingItems
        btnFilterMissing_MovieSets.Text = strMissingItems
        btnFilterMissing_Shows.Text = strMissingItems
        mnuScrapeSubmenuMissing.Text = strMissingItems

        'New
        Dim strNew As String = Master.eLang.GetString(47, "New")
        chkFilterNew_Movies.Text = strNew
        chkFilterNew_MovieSets.Text = strNew
        chkFilterNewEpisodes_Shows.Text = strNew
        chkFilterNewShows_Shows.Text = strNew
        mnuScrapeSubmenuNew.Text = strNew

        'NFO Only
        Dim strNFOOnly As String = Master.eLang.GetString(71, "NFO Only")
        mnuScrapeModifierNFO.Text = strNFOOnly
        mnuMainToolsRewriteContentMovieNFO.Text = strNFOOnly
        mnuMainToolsRewriteContentMovieSetNFO.Text = strNFOOnly
        mnuMainToolsRewriteContentTVShowNFO.Text = strNFOOnly

        'Open Containing Folder
        Dim strOpenContainingFolder = Master.eLang.GetString(33, "Open Containing Folder")
        cmnuEpisodeOpenFolder.Text = strOpenContainingFolder
        cmnuMovieOpenFolder.Text = strOpenContainingFolder
        cmnuSeasonOpenFolder.Text = strOpenContainingFolder
        cmnuShowOpenFolder.Text = strOpenContainingFolder

        'Open Fanart.tv-Page
        Dim strOpenFanartTVPage As String = Master.eLang.GetString(1093, "Open Fanart.tv-Page")

        'Open IMDB-Page
        Dim strOpenIMDBPage As String = Master.eLang.GetString(1281, "Open IMDB-Page")
        cmnuEpisodeBrowseIMDB.Text = strOpenIMDBPage
        cmnuMovieBrowseIMDB.Text = strOpenIMDBPage
        cmnuSeasonBrowseIMDB.Text = strOpenIMDBPage
        cmnuShowBrowseIMDB.Text = strOpenIMDBPage

        'Open TMDB-Page
        Dim strOpenTMDBPage As String = Master.eLang.GetString(1282, "Open TMDB-Page")
        cmnuEpisodeBrowseTMDB.Text = strOpenTMDBPage
        cmnuMovieBrowseTMDB.Text = strOpenTMDBPage
        cmnuMovieSetBrowseTMDB.Text = strOpenTMDBPage
        cmnuSeasonBrowseTMDB.Text = strOpenTMDBPage
        cmnuShowBrowseTMDB.Text = strOpenTMDBPage

        'Open TVDB-Page
        Dim strOpenTVDBPage As String = Master.eLang.GetString(1092, "Open TVDB-Page")
        cmnuEpisodeBrowseTVDB.Text = strOpenTVDBPage
        cmnuSeasonBrowseTVDB.Text = strOpenTVDBPage
        cmnuShowBrowseTVDB.Text = strOpenTVDBPage

        'Poster Only
        Dim strPosterOnly As String = Master.eLang.GetString(72, "Poster Only")
        mnuScrapeModifierPoster.Text = strPosterOnly

        'Premiered
        Dim strPremiered As String = Master.eLang.GetString(724, "Premiered")
        btnFilterSortPremiered_Movies.Text = strPremiered

        'Reload All Movies
        Dim strReloadAllMovies As String = Master.eLang.GetString(18, "Reload All Movies")
        cmnuTrayToolsReloadMovies.Text = strReloadAllMovies
        mnuMainToolsReloadMovies.Text = strReloadAllMovies

        'Reload All MovieSets
        Dim strReloadAllMovieSets As String = Master.eLang.GetString(1208, "Reload All MovieSets")
        cmnuTrayToolsReloadMovieSets.Text = strReloadAllMovieSets
        mnuMainToolsReloadMovieSets.Text = strReloadAllMovieSets

        'Reload All TV Shows
        Dim strReloadAllTVShows As String = Master.eLang.GetString(250, "Reload All TV Shows")
        cmnuTrayToolsReloadTVShows.Text = strReloadAllTVShows
        mnuMainToolsReloadTVShows.Text = strReloadAllTVShows

        'Remove
        Dim strRemove As String = Master.eLang.GetString(30, "Remove")
        mnuGenresRemove.Text = strRemove
        mnuTagsRemove.Text = strRemove

        'Scrape Movies
        Dim strScrapeMovies As String = Master.eLang.GetString(67, "Scrape Movies")
        mnuScrapeMovies.Text = strScrapeMovies
        cmnuTrayScrapeMovies.Text = strScrapeMovies

        'Scrape MovieSets
        Dim strScrapeMovieSets As String = Master.eLang.GetString(1213, "Scrape MovieSets")
        mnuScrapeMovieSets.Text = strScrapeMovieSets
        cmnuTrayScrapeMovieSets.Text = strScrapeMovieSets

        'Scrape TV Shows
        Dim strScrapeTVShows As String = Master.eLang.GetString(1234, "Scrape TV Shows")
        mnuScrapeTVShows.Text = strScrapeTVShows
        cmnuTrayScrapeTVShows.Text = strScrapeTVShows

        'Select Profile
        Dim strSelectProfile As String = Master.eLang.GetString(1101, "Select profile")
        mnuMainFileProfile.Text = String.Concat(strSelectProfile, "...")

        'Set
        Dim strSet As String = Master.eLang.GetString(29, "Set")
        cmnuMovieSetEditSortMethodSet.Text = strSet
        mnuGenresSet.Text = strSet
        mnuLanguagesSet.Text = strSet
        mnuTagsSet.Text = strSet

        'Select Genre
        Dim strSelectGenre As String = Master.eLang.GetString(27, "Select Genre")
        mnuGenresTitleSelect.Text = String.Concat(">> ", strSelectGenre, " <<")

        'Select Tag
        Dim strSelectTag As String = Master.eLang.GetString(1021, "Select Tag")
        mnuTagsTitleSelect.Text = String.Concat(">> ", strSelectTag, " <<")

        'Shows
        Dim strShows As String = Master.eLang.GetString(680, "Shows")
        gbFilterGeneral_Shows.Text = strShows
        gbFilterSpecificShows_Shows.Text = strShows

        'Skip (Skip If More Than One Match)
        Dim strSkip As String = Master.eLang.GetString(1041, "Skip (Skip If More Than One Match)")
        mnuScrapeTypeSkip.Text = strSkip

        'Theme Only
        Dim strThemeOnly As String = Master.eLang.GetString(1125, "Theme Only")
        mnuScrapeModifierTheme.Text = strThemeOnly

        'Trailer Only
        Dim strTrailerOnly As String = Master.eLang.GetString(75, "Trailer Only")
        mnuScrapeModifierTrailer.Text = strTrailerOnly

        'Unlock
        Dim strUnlock As String = Master.eLang.GetString(108, "Unlock")
        cmnuEpisodeUnlock.Text = strUnlock
        cmnuMovieUnlock.Text = strUnlock
        cmnuMovieSetUnlock.Text = strUnlock
        cmnuSeasonUnlock.Text = strUnlock
        cmnuShowUnlock.Text = strUnlock

        'Unmark
        Dim strUnmark As String = Master.eLang.GetString(107, "Unmark")
        cmnuEpisodeUnmark.Text = strUnmark
        cmnuMovieUnmark.Text = strUnmark
        cmnuMovieSetUnmark.Text = strUnmark
        cmnuSeasonUnmark.Text = strUnmark
        cmnuShowUnmark.Text = strUnmark

        'Update Single Data Field
        Dim strUpdateSingelDataField As String = Master.eLang.GetString(1126, "(Re)Scrape Single Data Field")
        cmnuEpisodeScrapeSingleDataField.Text = strUpdateSingelDataField
        cmnuMovieScrapeSingleDataField.Text = strUpdateSingelDataField
        cmnuMovieSetScrapeSingleDataField.Text = strUpdateSingelDataField
        cmnuSeasonScrapeSingleDataField.Text = strUpdateSingelDataField
        cmnuShowScrapeSingleDataField.Text = strUpdateSingelDataField

        ' others
        btnCancel.Text = Master.eLang.GetString(54, "Cancel Scraper")
        btnClearFilters_Movies.Text = Master.eLang.GetString(37, "Clear Filters")
        btnClearFilters_MovieSets.Text = btnClearFilters_Movies.Text
        btnClearFilters_Shows.Text = btnClearFilters_Movies.Text
        btnMarkAll.Text = Master.eLang.GetString(35, "Mark All")
        btnUnmarkAll.Text = Master.eLang.GetString(105, "Unmark All")
        btnMetaDataRefresh.Text = Master.eLang.GetString(58, "Refresh")
        btnFilterSortDateAdded_Movies.Tag = String.Empty
        btnFilterSortDateAdded_Movies.Text = Master.eLang.GetString(601, "Date Added")
        btnFilterSortDateModified_Movies.Tag = String.Empty
        btnFilterSortDateModified_Movies.Text = Master.eLang.GetString(1330, "Date Modified")
        btnFilterSortRating_Movies.Tag = String.Empty
        btnFilterSortRating_Movies.Text = Master.eLang.GetString(245, "Rating")
        btnFilterSortTitle_Movies.Tag = String.Empty
        btnFilterSortTitle_Movies.Text = Master.eLang.GetString(642, "Sort Title")
        btnFilterSortTitle_Shows.Tag = String.Empty
        btnFilterSortTitle_Shows.Text = Master.eLang.GetString(642, "Sort Title")
        btnFilterSortYear_Movies.Tag = String.Empty
        btnFilterSortYear_Movies.Text = Master.eLang.GetString(278, "Year")
        chkFilterDuplicates_Movies.Text = Master.eLang.GetString(41, "Duplicates")
        chkFilterEmpty_MovieSets.Text = Master.eLang.GetString(1275, "Empty")
        chkFilterMarkCustom1_Movies.Text = If(Not String.IsNullOrEmpty(Master.eSettings.MovieGeneralCustomMarker1Name), Master.eSettings.MovieGeneralCustomMarker1Name, String.Concat(Master.eLang.GetString(1191, "Custom"), " #1"))
        chkFilterMarkCustom2_Movies.Text = If(Not String.IsNullOrEmpty(Master.eSettings.MovieGeneralCustomMarker2Name), Master.eSettings.MovieGeneralCustomMarker2Name, String.Concat(Master.eLang.GetString(1191, "Custom"), " #2"))
        chkFilterMarkCustom3_Movies.Text = If(Not String.IsNullOrEmpty(Master.eSettings.MovieGeneralCustomMarker3Name), Master.eSettings.MovieGeneralCustomMarker3Name, String.Concat(Master.eLang.GetString(1191, "Custom"), " #3"))
        chkFilterMarkCustom4_Movies.Text = If(Not String.IsNullOrEmpty(Master.eSettings.MovieGeneralCustomMarker4Name), Master.eSettings.MovieGeneralCustomMarker4Name, String.Concat(Master.eLang.GetString(1191, "Custom"), " #4"))
        chkFilterMultiple_MovieSets.Text = Master.eLang.GetString(876, "Multiple Movies")
        chkFilterOne_MovieSets.Text = Master.eLang.GetString(1289, "Only One Movie")
        chkFilterTolerance_Movies.Text = Master.eLang.GetString(39, "Out of Tolerance")

        RemoveHandler chkMovieMissingBanner.CheckedChanged, AddressOf chkMovieMissingBanner_CheckedChanged
        chkMovieMissingBanner.Checked = Master.eSettings.MovieMissingBanner
        AddHandler chkMovieMissingBanner.CheckedChanged, AddressOf chkMovieMissingBanner_CheckedChanged

        RemoveHandler chkMovieMissingClearArt.CheckedChanged, AddressOf chkMovieMissingClearArt_CheckedChanged
        chkMovieMissingClearArt.Checked = Master.eSettings.MovieMissingClearArt
        AddHandler chkMovieMissingClearArt.CheckedChanged, AddressOf chkMovieMissingClearArt_CheckedChanged

        RemoveHandler chkMovieMissingClearLogo.CheckedChanged, AddressOf chkMovieMissingClearLogo_CheckedChanged
        chkMovieMissingClearLogo.Checked = Master.eSettings.MovieMissingClearLogo
        AddHandler chkMovieMissingClearLogo.CheckedChanged, AddressOf chkMovieMissingClearLogo_CheckedChanged

        RemoveHandler chkMovieMissingDiscArt.CheckedChanged, AddressOf chkMovieMissingDiscArt_CheckedChanged
        chkMovieMissingDiscArt.Checked = Master.eSettings.MovieMissingDiscArt
        AddHandler chkMovieMissingDiscArt.CheckedChanged, AddressOf chkMovieMissingDiscArt_CheckedChanged

        RemoveHandler chkMovieMissingExtrafanarts.CheckedChanged, AddressOf chkMovieMissingExtrafanarts_CheckedChanged
        chkMovieMissingExtrafanarts.Checked = Master.eSettings.MovieMissingExtrafanarts
        AddHandler chkMovieMissingExtrafanarts.CheckedChanged, AddressOf chkMovieMissingExtrafanarts_CheckedChanged

        RemoveHandler chkMovieMissingExtrathumbs.CheckedChanged, AddressOf chkMovieMissingExtrathumbs_CheckedChanged
        chkMovieMissingExtrathumbs.Checked = Master.eSettings.MovieMissingExtrathumbs
        AddHandler chkMovieMissingExtrathumbs.CheckedChanged, AddressOf chkMovieMissingExtrathumbs_CheckedChanged

        RemoveHandler chkMovieMissingFanart.CheckedChanged, AddressOf chkMovieMissingFanart_CheckedChanged
        chkMovieMissingFanart.Checked = Master.eSettings.MovieMissingFanart
        AddHandler chkMovieMissingFanart.CheckedChanged, AddressOf chkMovieMissingFanart_CheckedChanged

        RemoveHandler chkMovieMissingLandscape.CheckedChanged, AddressOf chkMovieMissingLandscape_CheckedChanged
        chkMovieMissingLandscape.Checked = Master.eSettings.MovieMissingLandscape
        AddHandler chkMovieMissingLandscape.CheckedChanged, AddressOf chkMovieMissingLandscape_CheckedChanged

        RemoveHandler chkMovieMissingNFO.CheckedChanged, AddressOf chkMovieMissingNFO_CheckedChanged
        chkMovieMissingNFO.Checked = Master.eSettings.MovieMissingNFO
        AddHandler chkMovieMissingNFO.CheckedChanged, AddressOf chkMovieMissingNFO_CheckedChanged

        RemoveHandler chkMovieMissingPoster.CheckedChanged, AddressOf chkMovieMissingPoster_CheckedChanged
        chkMovieMissingPoster.Checked = Master.eSettings.MovieMissingPoster
        AddHandler chkMovieMissingPoster.CheckedChanged, AddressOf chkMovieMissingPoster_CheckedChanged

        RemoveHandler chkMovieMissingSubtitles.CheckedChanged, AddressOf chkMovieMissingSubtitles_CheckedChanged
        chkMovieMissingSubtitles.Checked = Master.eSettings.MovieMissingSubtitles
        AddHandler chkMovieMissingSubtitles.CheckedChanged, AddressOf chkMovieMissingSubtitles_CheckedChanged

        RemoveHandler chkMovieMissingTheme.CheckedChanged, AddressOf chkMovieMissingTheme_CheckedChanged
        chkMovieMissingTheme.Checked = Master.eSettings.MovieMissingTheme
        AddHandler chkMovieMissingTheme.CheckedChanged, AddressOf chkMovieMissingTheme_CheckedChanged

        RemoveHandler chkMovieMissingTrailer.CheckedChanged, AddressOf chkMovieMissingTrailer_CheckedChanged
        chkMovieMissingTrailer.Checked = Master.eSettings.MovieMissingTrailer
        AddHandler chkMovieMissingTrailer.CheckedChanged, AddressOf chkMovieMissingTrailer_CheckedChanged

        RemoveHandler chkMovieSetMissingBanner.CheckedChanged, AddressOf chkMovieSetMissingBanner_CheckedChanged
        chkMovieSetMissingBanner.Checked = Master.eSettings.MovieSetMissingBanner
        AddHandler chkMovieSetMissingBanner.CheckedChanged, AddressOf chkMovieSetMissingBanner_CheckedChanged

        RemoveHandler chkMovieSetMissingClearArt.CheckedChanged, AddressOf chkMovieSetMissingClearArt_CheckedChanged
        chkMovieSetMissingClearArt.Checked = Master.eSettings.MovieSetMissingClearArt
        AddHandler chkMovieSetMissingClearArt.CheckedChanged, AddressOf chkMovieSetMissingClearArt_CheckedChanged

        RemoveHandler chkMovieSetMissingClearLogo.CheckedChanged, AddressOf chkMovieSetMissingClearLogo_CheckedChanged
        chkMovieSetMissingClearLogo.Checked = Master.eSettings.MovieSetMissingClearLogo
        AddHandler chkMovieSetMissingClearLogo.CheckedChanged, AddressOf chkMovieSetMissingClearLogo_CheckedChanged

        RemoveHandler chkMovieSetMissingDiscArt.CheckedChanged, AddressOf chkMovieSetMissingDiscArt_CheckedChanged
        chkMovieSetMissingDiscArt.Checked = Master.eSettings.MovieSetMissingDiscArt
        AddHandler chkMovieSetMissingDiscArt.CheckedChanged, AddressOf chkMovieSetMissingDiscArt_CheckedChanged

        RemoveHandler chkMovieSetMissingFanart.CheckedChanged, AddressOf chkMovieSetMissingFanart_CheckedChanged
        chkMovieSetMissingFanart.Checked = Master.eSettings.MovieSetMissingFanart
        AddHandler chkMovieSetMissingFanart.CheckedChanged, AddressOf chkMovieSetMissingFanart_CheckedChanged

        RemoveHandler chkMovieSetMissingLandscape.CheckedChanged, AddressOf chkMovieSetMissingLandscape_CheckedChanged
        chkMovieSetMissingLandscape.Checked = Master.eSettings.MovieSetMissingLandscape
        AddHandler chkMovieSetMissingLandscape.CheckedChanged, AddressOf chkMovieSetMissingLandscape_CheckedChanged

        RemoveHandler chkMovieSetMissingNFO.CheckedChanged, AddressOf chkMovieSetMissingNFO_CheckedChanged
        chkMovieSetMissingNFO.Checked = Master.eSettings.MovieSetMissingNFO
        AddHandler chkMovieSetMissingNFO.CheckedChanged, AddressOf chkMovieSetMissingNFO_CheckedChanged

        RemoveHandler chkMovieSetMissingPoster.CheckedChanged, AddressOf chkMovieSetMissingPoster_CheckedChanged
        chkMovieSetMissingPoster.Checked = Master.eSettings.MovieSetMissingPoster
        AddHandler chkMovieSetMissingPoster.CheckedChanged, AddressOf chkMovieSetMissingPoster_CheckedChanged

        RemoveHandler chkShowMissingBanner.CheckedChanged, AddressOf chkShowMissingBanner_CheckedChanged
        chkShowMissingBanner.Checked = Master.eSettings.TVShowMissingBanner
        AddHandler chkShowMissingBanner.CheckedChanged, AddressOf chkShowMissingBanner_CheckedChanged

        RemoveHandler chkShowMissingCharacterArt.CheckedChanged, AddressOf chkShowMissingCharacterArt_CheckedChanged
        chkShowMissingCharacterArt.Checked = Master.eSettings.TVShowMissingCharacterArt
        AddHandler chkShowMissingCharacterArt.CheckedChanged, AddressOf chkShowMissingCharacterArt_CheckedChanged

        RemoveHandler chkShowMissingClearArt.CheckedChanged, AddressOf chkShowMissingClearArt_CheckedChanged
        chkShowMissingClearArt.Checked = Master.eSettings.TVShowMissingClearArt
        AddHandler chkShowMissingClearArt.CheckedChanged, AddressOf chkShowMissingClearArt_CheckedChanged

        RemoveHandler chkShowMissingClearLogo.CheckedChanged, AddressOf chkShowMissingClearLogo_CheckedChanged
        chkShowMissingClearLogo.Checked = Master.eSettings.TVShowMissingClearLogo
        AddHandler chkShowMissingClearLogo.CheckedChanged, AddressOf chkShowMissingClearLogo_CheckedChanged

        RemoveHandler chkShowMissingExtrafanarts.CheckedChanged, AddressOf chkShowMissingExtrafanarts_CheckedChanged
        chkShowMissingExtrafanarts.Checked = Master.eSettings.TVShowMissingExtrafanarts
        AddHandler chkShowMissingExtrafanarts.CheckedChanged, AddressOf chkShowMissingExtrafanarts_CheckedChanged

        RemoveHandler chkShowMissingFanart.CheckedChanged, AddressOf chkShowMissingFanart_CheckedChanged
        chkShowMissingFanart.Checked = Master.eSettings.TVShowMissingFanart
        AddHandler chkShowMissingFanart.CheckedChanged, AddressOf chkShowMissingFanart_CheckedChanged

        RemoveHandler chkShowMissingLandscape.CheckedChanged, AddressOf chkShowMissingLandscape_CheckedChanged
        chkShowMissingLandscape.Checked = Master.eSettings.TVShowMissingLandscape
        AddHandler chkShowMissingLandscape.CheckedChanged, AddressOf chkShowMissingLandscape_CheckedChanged

        RemoveHandler chkShowMissingNFO.CheckedChanged, AddressOf chkShowMissingNFO_CheckedChanged
        chkShowMissingNFO.Checked = Master.eSettings.TVShowMissingNFO
        AddHandler chkShowMissingNFO.CheckedChanged, AddressOf chkShowMissingNFO_CheckedChanged

        RemoveHandler chkShowMissingPoster.CheckedChanged, AddressOf chkShowMissingPoster_CheckedChanged
        chkShowMissingPoster.Checked = Master.eSettings.TVShowMissingPoster
        AddHandler chkShowMissingPoster.CheckedChanged, AddressOf chkShowMissingPoster_CheckedChanged

        RemoveHandler chkShowMissingTheme.CheckedChanged, AddressOf chkShowMissingTheme_CheckedChanged
        chkShowMissingTheme.Checked = Master.eSettings.TVShowMissingTheme
        AddHandler chkShowMissingTheme.CheckedChanged, AddressOf chkShowMissingTheme_CheckedChanged

        cmnuEpisodeChange.Text = Master.eLang.GetString(772, "Change Episode")
        cmnuEpisodeEdit.Text = Master.eLang.GetString(656, "Edit Episode")
        cmnuEpisodeReload.Text = Master.eLang.GetString(22, "Reload")
        cmnuEpisodeRemove.Text = Master.eLang.GetString(30, "Remove")
        cmnuEpisodeRemoveFromDB.Text = Master.eLang.GetString(646, "Remove from Database")
        cmnuEpisodeRemoveFromDisk.Text = Master.eLang.GetString(773, "Delete Episode")
        cmnuEpisodeScrape.Text = Master.eLang.GetString(147, "(Re)Scrape Episode")
        cmnuMovieChange.Text = Master.eLang.GetString(32, "Change Movie")
        cmnuMovieChangeAuto.Text = Master.eLang.GetString(1294, "Change Movie (Auto)")
        cmnuMovieEdit.Text = Master.eLang.GetString(25, "Edit Movie")
        cmnuMovieEditMetaData.Text = Master.eLang.GetString(603, "Edit Meta Data")
        cmnuMovieLock.Text = Master.eLang.GetString(24, "Lock")
        cmnuMovieMarkAs.Text = Master.eLang.GetString(1192, "Mark as")
        cmnuMovieMarkAsCustom1.Text = If(Not String.IsNullOrEmpty(Master.eSettings.MovieGeneralCustomMarker1Name), Master.eSettings.MovieGeneralCustomMarker1Name, String.Concat(Master.eLang.GetString(1191, "Custom"), " #1"))
        cmnuMovieMarkAsCustom1.ForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker1Color)
        cmnuMovieMarkAsCustom2.Text = If(Not String.IsNullOrEmpty(Master.eSettings.MovieGeneralCustomMarker2Name), Master.eSettings.MovieGeneralCustomMarker2Name, String.Concat(Master.eLang.GetString(1191, "Custom"), " #2"))
        cmnuMovieMarkAsCustom2.ForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker2Color)
        cmnuMovieMarkAsCustom3.Text = If(Not String.IsNullOrEmpty(Master.eSettings.MovieGeneralCustomMarker3Name), Master.eSettings.MovieGeneralCustomMarker3Name, String.Concat(Master.eLang.GetString(1191, "Custom"), " #3"))
        cmnuMovieMarkAsCustom3.ForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker3Color)
        cmnuMovieMarkAsCustom4.Text = If(Not String.IsNullOrEmpty(Master.eSettings.MovieGeneralCustomMarker4Name), Master.eSettings.MovieGeneralCustomMarker4Name, String.Concat(Master.eLang.GetString(1191, "Custom"), " #4"))
        cmnuMovieMarkAsCustom4.ForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker4Color)
        cmnuMovieReload.Text = Master.eLang.GetString(22, "Reload")
        cmnuMovieRemove.Text = Master.eLang.GetString(30, "Remove")
        cmnuMovieRemoveFromDB.Text = Master.eLang.GetString(646, "Remove From Database")
        cmnuMovieRemoveFromDisk.Text = Master.eLang.GetString(34, "Delete Movie")
        cmnuMovieScrape.Text = Master.eLang.GetString(163, "(Re)Scrape Movie")
        cmnuMovieScrapeSelected.Text = Master.eLang.GetString(31, "(Re)Scrape Selected Movies")
        cmnuMovieSetEdit.Text = Master.eLang.GetString(207, "Edit MovieSet")
        cmnuMovieSetNew.Text = Master.eLang.GetString(208, "Add New MovieSet")
        cmnuMovieSetScrape.Text = Master.eLang.GetString(1233, "(Re)Scrape MovieSet")
        cmnuMovieTitle.Text = Master.eLang.GetString(21, "Title")
        cmnuSeasonRemoveFromDB.Text = Master.eLang.GetString(646, "Remove from Database")
        cmnuSeasonReload.Text = Master.eLang.GetString(22, "Reload")
        cmnuSeasonRemove.Text = Master.eLang.GetString(30, "Remove")
        cmnuSeasonRemoveFromDisk.Text = Master.eLang.GetString(771, "Delete Season")
        cmnuSeasonScrape.Text = Master.eLang.GetString(146, "(Re)Scrape Season")
        cmnuShowChange.Text = Master.eLang.GetString(767, "Change Show")
        cmnuShowClearCache.Text = Master.eLang.GetString(565, "Clear Cache")
        cmnuShowClearCacheDataAndImages.Text = Master.eLang.GetString(583, "Data and Images")
        cmnuShowClearCacheDataOnly.Text = Master.eLang.GetString(566, "Data Only")
        cmnuShowClearCacheImagesOnly.Text = Master.eLang.GetString(567, "Images Only")
        cmnuShowEdit.Text = Master.eLang.GetString(663, "Edit Show")
        cmnuShowReload.Text = Master.eLang.GetString(22, "Reload")
        cmnuShowRemove.Text = Master.eLang.GetString(30, "Remove")
        cmnuShowRemoveFromDB.Text = Master.eLang.GetString(646, "Remove from Database")
        cmnuShowRemoveFromDisk.Text = Master.eLang.GetString(768, "Delete TV Show")
        cmnuShowGetMissingEpisodes.Text = Master.eLang.GetString(1099, "Get Missing Episodes")
        cmnuShowScrape.Text = Master.eLang.GetString(766, "(Re)Scrape Show")
        cmnuTrayExit.Text = Master.eLang.GetString(2, "E&xit")
        cmnuTraySettings.Text = Master.eLang.GetString(4, "&Settings...")
        cmnuTrayTools.Text = Master.eLang.GetString(8, "&Tools")
        cmnuTrayUpdate.Text = Master.eLang.GetString(82, "Update Library")
        gbFilterDataField_Movies.Text = String.Concat(Master.eLang.GetString(1290, "Data Field"), ":")
        gbFilterGeneral_Movies.Text = Master.eLang.GetString(38, "General")
        gbFilterGeneral_MovieSets.Text = gbFilterGeneral_Movies.Text
        gbFilterModifier_Movies.Text = Master.eLang.GetString(44, "Modifier")
        gbFilterModifier_MovieSets.Text = gbFilterModifier_Movies.Text
        gbFilterModifier_Shows.Text = gbFilterModifier_Movies.Text
        gbFilterSpecific_Movies.Text = Master.eLang.GetString(42, "Specific")
        gbFilterSpecific_MovieSets.Text = gbFilterSpecific_Movies.Text
        gbFilterSpecific_Shows.Text = gbFilterSpecific_Movies.Text
        gbFilterSorting_Movies.Text = Master.eLang.GetString(600, "Extra Sorting")
        gbFilterSorting_Shows.Text = gbFilterSorting_Movies.Text
        lblActorsHeader.Text = Master.eLang.GetString(231, "Actors")
        lblCanceling.Text = Master.eLang.GetString(53, "Canceling Scraper...")
        lblCertificationsHeader.Text = Master.eLang.GetString(56, "Certifications")
        lblCharacterArtTitle.Text = Master.eLang.GetString(1140, "CharacterArt")
        lblClearArtTitle.Text = Master.eLang.GetString(1096, "ClearArt")
        lblClearLogoTitle.Text = Master.eLang.GetString(1097, "ClearLogo")
        lblDirectorsHeader.Text = Master.eLang.GetString(940, "Directors")
        lblDiscArtTitle.Text = Master.eLang.GetString(1098, "DiscArt")
        lblFanartSmallTitle.Text = Master.eLang.GetString(149, "Fanart")
        lblFilePathHeader.Text = Master.eLang.GetString(60, "File Path")
        lblFilterCountries_Movies.Text = Master.eLang.GetString(237, "Countries")
        lblFilterCountriesClose_Movies.Text = Master.eLang.GetString(19, "Close")
        lblFilterCountry_Movies.Text = String.Concat(Master.eLang.GetString(237, "Countries"), ":")
        lblFilterVideoSourcesClose_Movies.Text = Master.eLang.GetString(19, "Close")
        lblFilterVideoSources_Movies.Text = Master.eLang.GetString(246, "Video Sources")
        lblFilterVideoSource_Movies.Text = String.Concat(Master.eLang.GetString(824, "Video Source"), ":")
        lblFilterGenre_Movies.Text = String.Concat(Master.eLang.GetString(725, "Genres"), ":")
        lblFilterGenre_Shows.Text = lblFilterGenre_Movies.Text
        lblFilterGenres_Movies.Text = Master.eLang.GetString(725, "Genres")
        lblFilterGenres_Shows.Text = lblFilterGenres_Movies.Text
        lblFilterSource_Movies.Text = Master.eLang.GetString(50, "Source:")
        lblFilterSource_Shows.Text = lblFilterSource_Movies.Text
        lblFilterSources_Movies.Text = Master.eLang.GetString(602, "Sources")
        lblFilterSources_Shows.Text = lblFilterSources_Movies.Text
        lblFilterYear_Movies.Text = String.Concat(Master.eLang.GetString(278, "Year"), ":")
        lblFilterDataFields_Movies.Text = Master.eLang.GetString(1290, "Data Field")
        lblIMDBHeader.Text = Master.eLang.GetString(61, "IMDB ID")
        lblInfoPanelHeader.Text = Master.eLang.GetString(66, "Info")
        lblKeyartTitle.Text = Master.eLang.GetString(1237, "Keyart")
        lblLandscapeTitle.Text = Master.eLang.GetString(1035, "Landscape")
        lblLoadSettings.Text = Master.eLang.GetString(484, "Loading Settings...")
        lblMetaDataHeader.Text = Master.eLang.GetString(59, "Meta Data")
        lblMoviesInSetHeader.Text = Master.eLang.GetString(367, "Movies In Set")
        lblOutlineHeader.Text = Master.eLang.GetString(64, "Plot Outline")
        lblPlotHeader.Text = Master.eLang.GetString(65, "Plot")
        lblPosterTitle.Text = Master.eLang.GetString(148, "Poster")
        lblPremieredHeader.Text = Master.eLang.GetString(724, "Premiered")
        lblTrailerPathHeader.Text = Master.eLang.GetString(1058, "Trailer Path")
        mnuMainDonate.Text = Master.eLang.GetString(708, "Donate")
        mnuMainDonate.Text = Master.eLang.GetString(708, "Donate")
        mnuMainEdit.Text = Master.eLang.GetString(3, "&Edit")
        mnuMainEditSettings.Text = Master.eLang.GetString(4, "&Settings...")
        mnuMainFile.Text = Master.eLang.GetString(1, "&File")
        mnuMainFileExit.Text = Master.eLang.GetString(2, "E&xit")
        mnuMainHelp.Text = Master.eLang.GetString(5, "&Help")
        mnuMainHelpAbout.Text = Master.eLang.GetString(6, "&About...")
        mnuMainHelpUpdate.Text = Master.eLang.GetString(850, "&Check For Updates...")
        mnuMainHelpVersions.Text = Master.eLang.GetString(793, "&Versions...")
        mnuMainToolsExport.Text = Master.eLang.GetString(1174, "Export")
        mnuMainToolsExportMovies.Text = Master.eLang.GetString(36, "Movies")
        mnuMainToolsExportTvShows.Text = Master.eLang.GetString(653, "TV Shows")
        mnuMainTools.Text = Master.eLang.GetString(8, "&Tools")
        mnuMainToolsBackdrops.Text = Master.eLang.GetString(11, "Copy Existing Fanart To Backdrops Folder")
        mnuMainToolsCleanDB.Text = Master.eLang.GetString(709, "Clean Database")
        mnuMainToolsCleanFiles.Text = Master.eLang.GetString(9, "&Clean Files")
        mnuMainToolsClearCache.Text = Master.eLang.GetString(17, "Clear All Caches")
        mnuMainToolsOfflineHolder.Text = Master.eLang.GetString(524, "&Offline Media Manager")
        mnuMainToolsRewriteContentMovie.Text = Master.eLang.GetString(1298, "Rewrite Movie Content")
        mnuMainToolsRewriteContentMovieSet.Text = Master.eLang.GetString(1094, "Rewrite MovieSet Content")
        mnuMainToolsRewriteContentTVShow.Text = Master.eLang.GetString(1095, "Rewrite TV Show Content")
        mnuMainToolsSortFiles.Text = Master.eLang.GetString(10, "&Sort Files Into Folders")
        mnuMainToolsTagManager.Text = Master.eLang.GetString(868, "Tag Manager")
        mnuScrapeOptionActors.Text = Master.eLang.GetString(231, "Actors")
        mnuScrapeOptionAired.Text = Master.eLang.GetString(728, "Aired")
        mnuScrapeOptionCertifications.Text = Master.eLang.GetString(56, "Certification")
        mnuScrapeOptionCollectionID.Text = Master.eLang.GetString(1135, "Collection ID")
        mnuScrapeOptionCountries.Text = Master.eLang.GetString(237, "Countries")
        mnuScrapeOptionCreators.Text = Master.eLang.GetString(744, "Creators")
        mnuScrapeOptionDirectors.Text = Master.eLang.GetString(940, "Directors")
        mnuScrapeOptionGenres.Text = Master.eLang.GetString(725, "Genres")
        mnuScrapeOptionGuestStars.Text = Master.eLang.GetString(508, "Guest Stars")
        mnuScrapeOptionMPAA.Text = Master.eLang.GetString(401, "MPAA")
        mnuScrapeOptionOriginalTitle.Text = Master.eLang.GetString(302, "Original Title")
        mnuScrapeOptionOutline.Text = Master.eLang.GetString(64, "Plot Outline")
        mnuScrapeOptionPlot.Text = Master.eLang.GetString(65, "Plot")
        mnuScrapeOptionPremiered.Text = Master.eLang.GetString(724, "Premiered")
        mnuScrapeOptionRating.Text = Master.eLang.GetString(1145, "Ratings")
        mnuScrapeOptionRuntime.Text = Master.eLang.GetString(238, "Runtime")
        mnuScrapeOptionStatus.Text = Master.eLang.GetString(215, "Status")
        mnuScrapeOptionStudios.Text = Master.eLang.GetString(226, "Studios")
        mnuScrapeOptionTagline.Text = Master.eLang.GetString(397, "Tagline")
        mnuScrapeOptionTitle.Text = Master.eLang.GetString(21, "Title")
        mnuScrapeOptionTop250.Text = Master.eLang.GetString(591, "Top 250")
        mnuScrapeOptionTrailer.Text = Master.eLang.GetString(151, "Trailer")
        mnuScrapeOptionUserRating.Text = Master.eLang.GetString(1467, "User Rating")
        mnuScrapeOptionWriters.Text = Master.eLang.GetString(777, "Writer")
        mnuUpdate.Text = Master.eLang.GetString(82, "Update Library")
        mnuUpdateMovies.Text = Master.eLang.GetString(36, "Movies")
        mnuUpdateShows.Text = Master.eLang.GetString(653, "TV Shows")
        pnlFilterCountries_Movies.Tag = String.Empty
        pnlFilterGenres_Movies.Tag = String.Empty
        pnlFilterGenres_Shows.Tag = String.Empty
        pnlFilterDataFields_Movies.Tag = String.Empty
        pnlFilterSources_Movies.Tag = String.Empty
        pnlFilterSources_Shows.Tag = String.Empty
        pnlFilterTags_Movies.Tag = String.Empty
        pnlFilterTags_Shows.Tag = String.Empty
        pnlFilterVideoSources_Movies.Tag = String.Empty
        rbFilterAnd_Movies.Text = Master.eLang.GetString(45, "And")
        rbFilterAnd_MovieSets.Text = rbFilterAnd_Movies.Text
        rbFilterAnd_Shows.Text = rbFilterAnd_Movies.Text
        rbFilterOr_Movies.Text = Master.eLang.GetString(46, "Or")
        rbFilterOr_MovieSets.Text = rbFilterOr_Movies.Text
        rbFilterOr_Shows.Text = rbFilterOr_Movies.Text
        tslLoading.Text = Master.eLang.GetString(7, "Loading Media:")

        cmnuMovieSetLock.Text = cmnuMovieLock.Text
        cmnuMovieSetReload.Text = cmnuMovieReload.Text
        cmnuMovieSetRemove.Text = cmnuMovieRemove.Text
        cmnuTrayToolsBackdrops.Text = mnuMainToolsBackdrops.Text
        cmnuTrayToolsCleanFiles.Text = mnuMainToolsCleanFiles.Text
        cmnuTrayToolsClearCache.Text = mnuMainToolsClearCache.Text
        cmnuTrayToolsOfflineHolder.Text = mnuMainToolsOfflineHolder.Text
        cmnuTrayToolsSortFiles.Text = mnuMainToolsSortFiles.Text

        Dim TT As ToolTip = New ToolTip(components)
        mnuScrapeMovies.ToolTipText = Master.eLang.GetString(84, "Scrape/download data from the internet for multiple movies.")
        mnuScrapeMovieSets.ToolTipText = Master.eLang.GetString(1214, "Scrape/download data from the internet for multiple moviesets.")
        mnuScrapeTVShows.ToolTipText = Master.eLang.GetString(1235, "Scrape/download data from the internet for multiple tv shows.")
        mnuUpdate.ToolTipText = Master.eLang.GetString(85, "Scans sources for new content and cleans database.")
        TT.SetToolTip(btnMarkAll, Master.eLang.GetString(87, "Mark all items in the list"))
        TT.SetToolTip(btnUnmarkAll, Master.eLang.GetString(1100, "Unmark all items in the list"))
        TT.SetToolTip(txtSearchMovies, Master.eLang.GetString(88, "Search the movie titles by entering text here."))
        TT.SetToolTip(txtSearchMovieSets, Master.eLang.GetString(1267, "Search the movie titles by entering text here."))
        TT.SetToolTip(txtSearchShows, Master.eLang.GetString(1268, "Search the tv show titles by entering text here."))
        TT.SetToolTip(btnFilePlay, Master.eLang.GetString(89, "Play the movie file with the system default media player."))
        TT.SetToolTip(btnMetaDataRefresh, Master.eLang.GetString(90, "Rescan and save the meta data for the selected movie."))
        TT.SetToolTip(chkFilterDuplicates_Movies, Master.eLang.GetString(91, "Display only movies that have duplicate IMDB IDs."))
        TT.SetToolTip(chkFilterTolerance_Movies, Master.eLang.GetString(92, "Display only movies whose title matching is out of tolerance."))
        TT.SetToolTip(chkFilterMissing_Movies, Master.eLang.GetString(93, "Display only movies that have items missing."))
        TT.SetToolTip(chkFilterNew_Movies, Master.eLang.GetString(94, "Display only new movies."))
        TT.SetToolTip(chkFilterNew_MovieSets, Master.eLang.GetString(1269, "Display only new moviesets."))
        TT.SetToolTip(chkFilterMark_Movies, Master.eLang.GetString(95, "Display only marked movies."))
        TT.SetToolTip(chkFilterMark_MovieSets, Master.eLang.GetString(1270, "Display only marked moviesets."))
        TT.SetToolTip(chkFilterLock_Movies, Master.eLang.GetString(96, "Display only locked movies."))
        TT.SetToolTip(chkFilterLock_MovieSets, Master.eLang.GetString(1271, "Display only locked moviesets."))
        TT.SetToolTip(txtFilterSource_Movies, Master.eLang.GetString(97, "Display only movies from the selected source."))
        TT.Active = True

        RemoveHandler cbSearchMovies.SelectedIndexChanged, AddressOf cbSearchMovies_SelectedIndexChanged
        cbSearchMovies.Items.Clear()
        cbSearchMovies.Items.AddRange(New Object() {Master.eLang.GetString(21, "Title"), Master.eLang.GetString(302, "Original Title"), Master.eLang.GetString(100, "Actor"), Master.eLang.GetString(233, "Role"), Master.eLang.GetString(62, "Director"), Master.eLang.GetString(729, "Credits"), Master.eLang.GetString(301, "Country"), Master.eLang.GetString(395, "Studio")})
        If cbSearchMovies.Items.Count > 0 Then
            cbSearchMovies.SelectedIndex = 0
        End If
        AddHandler cbSearchMovies.SelectedIndexChanged, AddressOf cbSearchMovies_SelectedIndexChanged

        RemoveHandler cbSearchMovieSets.SelectedIndexChanged, AddressOf cbSearchMovieSets_SelectedIndexChanged
        cbSearchMovieSets.Items.Clear()
        cbSearchMovieSets.Items.AddRange(New Object() {Master.eLang.GetString(21, "Title"), String.Format("{0} ({1})", Master.eLang.GetString(21, "Title"), Master.eLang.GetString(1379, "Movie"))})
        If cbSearchMovieSets.Items.Count > 0 Then
            cbSearchMovieSets.SelectedIndex = 0
        End If
        AddHandler cbSearchMovieSets.SelectedIndexChanged, AddressOf cbSearchMovieSets_SelectedIndexChanged

        RemoveHandler cbSearchShows.SelectedIndexChanged, AddressOf cbSearchShows_SelectedIndexChanged
        cbSearchShows.Items.Clear()
        cbSearchShows.Items.AddRange(New Object() {Master.eLang.GetString(21, "Title")})
        If cbSearchShows.Items.Count > 0 Then
            cbSearchShows.SelectedIndex = 0
        End If
        AddHandler cbSearchShows.SelectedIndexChanged, AddressOf cbSearchShows_SelectedIndexChanged

        If doTheme Then
            tTheme = New Theming
            Dim currMainTabTag = MainTab_GetCurrentTag()
            Theme_Apply(currMainTabTag.ContentType)
        End If
    End Sub

#End Region 'Dialog

#Region "Methods"

    Private Sub AboutToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainHelpAbout.Click
        Using dAbout As New dlgAbout
            dAbout.ShowDialog()
        End Using
    End Sub

    Private Sub mnuMainToolsExportMovies_Click(sender As Object, e As EventArgs) Handles mnuMainToolsExportMovies.Click
        Try
            Dim table As New DataTable
            Dim ds As New DataSet
            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
                SQLcommand.CommandText = "SELECT * FROM movie INNER JOIN MoviesVStreams ON (MoviesVStreams.MovieID = movie.idMovie) INNER JOIN MoviesAStreams ON (MoviesAStreams.MovieID = movie.idMovie);"
                Using SQLreader As SQLite.SQLiteDataReader = SQLcommand.ExecuteReader()
                    ds.Tables.Add(table)
                    ds.EnforceConstraints = False
                    table.Load(SQLreader)
                End Using
            End Using

            Dim saveFileDialog1 As New SaveFileDialog()
            saveFileDialog1.FileName = "export_movies" + ".xml"
            saveFileDialog1.Filter = "xml files (*.xml)|*.xml"
            saveFileDialog1.FilterIndex = 2
            saveFileDialog1.RestoreDirectory = True

            If saveFileDialog1.ShowDialog() = DialogResult.OK Then
                table.WriteXml(saveFileDialog1.FileName)
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Private Sub mnuMainToolsExportTvShows_Click(sender As Object, e As EventArgs) Handles mnuMainToolsExportTvShows.Click
        Try
            Dim table As New DataTable
            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
                SQLcommand.CommandText = "Select * from tvshow;"
                Using SQLreader As SQLite.SQLiteDataReader = SQLcommand.ExecuteReader()
                    'Load the SqlDataReader object to the DataTable object as follows. 
                    table.Load(SQLreader)
                End Using
            End Using

            Dim saveFileDialog1 As New SaveFileDialog()
            saveFileDialog1.FileName = "export_tvshows" + ".xml"
            saveFileDialog1.Filter = "xml files (*.xml)|*.xml"
            saveFileDialog1.FilterIndex = 2
            saveFileDialog1.RestoreDirectory = True

            If saveFileDialog1.ShowDialog() = DialogResult.OK Then
                table.WriteXml(saveFileDialog1.FileName)
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Private Sub btnCancel_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnCancel.Click
        btnCancel.Visible = False
        lblCanceling.Visible = True
        prbCanceling.Visible = True

        If bwMovieScraper.IsBusy Then bwMovieScraper.CancelAsync()
        If bwMovieSetScraper.IsBusy Then bwMovieSetScraper.CancelAsync()
        If bwReload_Movies.IsBusy Then bwReload_Movies.CancelAsync()
        If bwReload_MovieSets.IsBusy Then bwReload_MovieSets.CancelAsync()
        If bwReload_TVShows.IsBusy Then bwReload_TVShows.CancelAsync()
        If bwRewriteContent.IsBusy Then bwRewriteContent.CancelAsync()
        If bwTVEpisodeScraper.IsBusy Then bwTVEpisodeScraper.CancelAsync()
        If bwTVScraper.IsBusy Then bwTVScraper.CancelAsync()
        If bwTVSeasonScraper.IsBusy Then bwTVSeasonScraper.CancelAsync()
        While bwMovieScraper.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse
            bwReload_TVShows.IsBusy OrElse bwRewriteContent.IsBusy OrElse bwTVEpisodeScraper.IsBusy OrElse bwTVScraper.IsBusy OrElse
            bwTVSeasonScraper.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(50)
        End While
    End Sub

    Private Sub btnClearFilters_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnClearFilters_Movies.Click
        Filter_Clear_Movie(True)
    End Sub

    Private Sub btnClearFilters_MovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnClearFilters_MovieSets.Click
        Filter_Clear_Movieset(True)
    End Sub

    Private Sub btnClearFilters_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnClearFilters_Shows.Click
        Filter_Clear_TVShow(True)
    End Sub

    Private Sub btnFilterDown_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterDown_Movies.Click
        FilterPanelIsRaised_Movie = False
        Filter_Panel_Movement_Movie()
    End Sub

    Private Sub btnFilterDown_MovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterDown_MovieSets.Click
        FilterPanelIsRaised_MovieSet = False
        Filter_Panel_Movement_Movieset()
    End Sub

    Private Sub btnFilterDown_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterDown_Shows.Click
        FilterPanelIsRaised_TVShow = False
        Filter_Panel_Movement_TVShow()
    End Sub

    Private Sub btnFilterUp_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterUp_Movies.Click
        FilterPanelIsRaised_Movie = True
        Filter_Panel_Movement_Movie()
    End Sub

    Private Sub btnFilterUp_MovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterUp_MovieSets.Click

        FilterPanelIsRaised_MovieSet = True
        Filter_Panel_Movement_Movieset()
    End Sub

    Private Sub btnFilterUp_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterUp_Shows.Click
        FilterPanelIsRaised_TVShow = True
        Filter_Panel_Movement_TVShow()
    End Sub

    Private Sub btnMarkAll_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnMarkAll.Click
        Dim currMainTabTag = Addons.Instance.RuntimeObjects.MediaTabSelected
        TaskManager_CreateTask(currMainTabTag.ContentType, Enums.SelectionType.All, TaskManager.TaskItem.TaskType.SetMarkedState, True, String.Empty)
    End Sub

    Private Sub btnUnmarkAll_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnUnmarkAll.Click
        Dim currMainTabTag = Addons.Instance.RuntimeObjects.MediaTabSelected
        TaskManager_CreateTask(currMainTabTag.ContentType, Enums.SelectionType.All, TaskManager.TaskItem.TaskType.SetMarkedState, False, String.Empty)
    End Sub

    Private Sub btnMetaDataRefresh_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnMetaDataRefresh.Click
        Dim currMainTabTag = MainTab_GetCurrentTag()

        If currMainTabTag.ContentType = Enums.ContentType.Movie Then
            If dgvMovies.SelectedRows.Count = 1 Then
                Dim ScrapeModifiers As New Structures.ScrapeModifiers
                Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainMetaData, True)
                Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Auto, Master.DefaultOptions_Movie, ScrapeModifiers, Enums.ContentType.Movie)
            End If
        ElseIf currMainTabTag.ContentType = Enums.ContentType.TV Then
            If dgvTVEpisodes.SelectedRows.Count = 1 AndAlso currTV.FilenameSpecified Then
                Dim ScrapeModifiers As New Structures.ScrapeModifiers
                Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeMeta, True)
                Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Auto, Master.DefaultOptions_TV, ScrapeModifiers, Enums.ContentType.TVEpisode)
            End If
        End If
    End Sub
    ''' <summary>
    ''' Launch video using system default player
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub btnFilePlay_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilePlay.Click
        If Not String.IsNullOrEmpty(txtFilePath.Text) Then Functions.Launch(txtFilePath.Text, True)
    End Sub
    ''' <summary>
    ''' Launch trailer using system default player
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub btnTrailerPlay_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnTrailerPlay.Click
        If txtTrailerPath.Text.StartsWith("plugin://plugin.video.youtube") Then
            Functions.Launch(StringUtils.ConvertFromKodiTrailerFormatToYouTubeURL(txtTrailerPath.Text))
        Else
            Functions.Launch(txtTrailerPath.Text, True)
        End If
    End Sub

    Private Sub bwDownloadPic_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwDownloadPic.DoWork
        Dim Args As Arguments = DirectCast(e.Argument, Arguments)
        Try

            sHTTP.StartDownloadImage(Args.pURL)

            While sHTTP.IsDownloading
                Application.DoEvents()
                If bwDownloadPic.CancellationPending Then
                    e.Cancel = True
                    sHTTP.Cancel()
                    Return
                End If
                Threading.Thread.Sleep(50)
            End While

            e.Result = New Results With {.Result = sHTTP.Image}
        Catch ex As Exception
            e.Result = New Results With {.Result = Nothing}
            e.Cancel = True
        End Try
    End Sub

    Private Sub bwDownloadPic_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwDownloadPic.RunWorkerCompleted
        '//
        ' Thread finished: display pic if it was able to get one
        '\\

        pbActorsLoad.Visible = False

        If e.Cancelled Then
            pbActors.Image = My.Resources.actor_silhouette
        Else
            Dim Res As Results = DirectCast(e.Result, Results)

            If Res.Result IsNot Nothing Then
                pbActors.Image = Res.Result
            Else
                pbActors.Image = My.Resources.actor_silhouette
            End If
        End If
    End Sub

    Private Sub cbFilterLists_Movies_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cbFilterLists_Movies.SelectedIndexChanged
        If Not currList_Movies = CType(cbFilterLists_Movies.SelectedItem, KeyValuePair(Of String, String)).Value Then
            currList_Movies = CType(cbFilterLists_Movies.SelectedItem, KeyValuePair(Of String, String)).Value
            Addons.Instance.RuntimeObjects.ListMovies = currList_Movies
            DataGridView_FillList_Main(True, False, False)
        End If
    End Sub

    Private Sub cbFilterLists_MovieSets_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cbFilterLists_MovieSets.SelectedIndexChanged
        If Not currList_Moviesets = CType(cbFilterLists_MovieSets.SelectedItem, KeyValuePair(Of String, String)).Value Then
            currList_Moviesets = CType(cbFilterLists_MovieSets.SelectedItem, KeyValuePair(Of String, String)).Value
            Addons.Instance.RuntimeObjects.ListMoviesets = currList_Moviesets
            DataGridView_FillList_Main(False, True, False)
        End If
    End Sub

    Private Sub cbFilterLists_Shows_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cbFilterLists_Shows.SelectedIndexChanged
        If Not currList_TVShows = CType(cbFilterLists_Shows.SelectedItem, KeyValuePair(Of String, String)).Value Then
            currList_TVShows = CType(cbFilterLists_Shows.SelectedItem, KeyValuePair(Of String, String)).Value
            Addons.Instance.RuntimeObjects.ListTVShows = currList_TVShows
            DataGridView_FillList_Main(False, False, True)
        End If
    End Sub

    Private Sub cbFilterYearModFrom_Movies_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cbFilterYearModFrom_Movies.SelectedIndexChanged
        Filter_Set_Year_Movie()
    End Sub

    Private Sub cbFilterYearModTo_Movies_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cbFilterYearModTo_Movies.SelectedIndexChanged
        Filter_Set_Year_Movie()
    End Sub

    Private Sub cbFilterYearFrom_Movies_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cbFilterYearFrom_Movies.SelectedIndexChanged
        Filter_Set_Year_Movie()
    End Sub

    Private Sub cbFilterYearTo_Movies_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cbFilterYearTo_Movies.SelectedIndexChanged
        Filter_Set_Year_Movie()
    End Sub

    Private Sub cbSearchMovies_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cbSearchMovies.SelectedIndexChanged
        currTextSearch_Movies = txtSearchMovies.Text

        tmrSearchWait_Movies.Enabled = False
        tmrSearch_Movies.Enabled = False
        tmrSearchWait_Movies.Enabled = True
    End Sub

    Private Sub cbSearchMovieSets_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cbSearchMovieSets.SelectedIndexChanged
        currTextSearch_MovieSets = txtSearchMovieSets.Text

        tmrSearchWait_MovieSets.Enabled = False
        tmrSearch_MovieSets.Enabled = False
        tmrSearchWait_MovieSets.Enabled = True
    End Sub

    Private Sub cbSearchShows_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cbSearchShows.SelectedIndexChanged
        currTextSearch_TVShows = txtSearchShows.Text

        tmrSearchWait_Shows.Enabled = False
        tmrSearch_Shows.Enabled = False
        tmrSearchWait_Shows.Enabled = True
    End Sub

    Private Sub chkFilterDuplicates_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterDuplicates_Movies.Click
        Filter_Run_Movie(True)
    End Sub

    Private Sub chkFilterEmpty_MovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterEmpty_MovieSets.Click
        If chkFilterEmpty_MovieSets.Checked Then
            FilterArray_MovieSets.Add("Count = 0")
        Else
            FilterArray_MovieSets.Remove("Count = 0")
        End If
        Filter_Run_Movieset()
    End Sub

    Private Sub chkFilterMultiple_MovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMultiple_MovieSets.Click
        If chkFilterMultiple_MovieSets.Checked Then
            FilterArray_MovieSets.Add("Count > 1")
        Else
            FilterArray_MovieSets.Remove("Count > 1")
        End If
        Filter_Run_Movieset()
    End Sub

    Private Sub chkFilterOne_MovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterOne_MovieSets.Click
        If chkFilterOne_MovieSets.Checked Then
            FilterArray_MovieSets.Add("Count = 1")
        Else
            FilterArray_MovieSets.Remove("Count = 1")
        End If
        Filter_Run_Movieset()
    End Sub

    Private Sub chkFilterLock_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterLock_Movies.Click
        If chkFilterLock_Movies.Checked Then
            FilterArray_Movies.Add("Lock = 1")
        Else
            FilterArray_Movies.Remove("Lock = 1")
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub chkFilterLock_MovieSets_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterLock_MovieSets.Click
        If chkFilterLock_MovieSets.Checked Then
            FilterArray_MovieSets.Add("Lock = 1")
        Else
            FilterArray_MovieSets.Remove("Lock = 1")
        End If
        Filter_Run_Movieset()
    End Sub

    Private Sub chkFilterLockEpisodes_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterLockEpisodes_Shows.Click
        If chkFilterLockEpisodes_Shows.Checked Then
            FilterArray_TVShows.Add("LockedEpisodes > 0")
        Else
            FilterArray_TVShows.Remove("LockedEpisodes > 0")
        End If
        Filter_Run_TVShow()
    End Sub

    Private Sub chkFilterLock_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterLock_Shows.Click
        If chkFilterLock_Shows.Checked Then
            FilterArray_TVShows.Add("Lock = 1")
        Else
            FilterArray_TVShows.Remove("Lock = 1")
        End If
        Filter_Run_TVShow()
    End Sub

    Private Sub chkFilterMark_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMark_Movies.Click
        If chkFilterMark_Movies.Checked Then
            FilterArray_Movies.Add("Mark = 1")
        Else
            FilterArray_Movies.Remove("Mark = 1")
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub chkFilterMark_MovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMark_MovieSets.Click
        If chkFilterMark_MovieSets.Checked Then
            FilterArray_MovieSets.Add("Mark = 1")
        Else
            FilterArray_MovieSets.Remove("Mark = 1")
        End If
        Filter_Run_Movieset()
    End Sub

    Private Sub chkFilterMark_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMark_Shows.Click
        If chkFilterMark_Shows.Checked Then
            FilterArray_TVShows.Add("Mark = 1")
        Else
            FilterArray_TVShows.Remove("Mark = 1")
        End If
        Filter_Run_TVShow()
    End Sub

    Private Sub chkFilterMarkEpisodes_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMarkEpisodes_Shows.Click
        If chkFilterMarkEpisodes_Shows.Checked Then
            FilterArray_TVShows.Add("MarkedEpisodes > 0")
        Else
            FilterArray_TVShows.Remove("MarkedEpisodes > 0")
        End If
        Filter_Run_TVShow()
    End Sub

    Private Sub chkFilterMarkCustom1_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMarkCustom1_Movies.Click
        If chkFilterMarkCustom1_Movies.Checked Then
            FilterArray_Movies.Add("MarkCustom1 = 1")
        Else
            FilterArray_Movies.Remove("MarkCustom1 = 1")
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub chkFilterMarkCustom2_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMarkCustom2_Movies.Click
        If chkFilterMarkCustom2_Movies.Checked Then
            FilterArray_Movies.Add("MarkCustom2 = 1")
        Else
            FilterArray_Movies.Remove("MarkCustom2 = 1")
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub chkFilterMarkCustom3_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMarkCustom3_Movies.Click
        If chkFilterMarkCustom3_Movies.Checked Then
            FilterArray_Movies.Add("MarkCustom3 = 1")
        Else
            FilterArray_Movies.Remove("MarkCustom3 = 1")
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub chkFilterMarkCustom4_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMarkCustom4_Movies.Click
        If chkFilterMarkCustom4_Movies.Checked Then
            FilterArray_Movies.Add("MarkCustom4 = 1")
        Else
            FilterArray_Movies.Remove("MarkCustom4 = 1")
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub chkFilterMissing_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMissing_Movies.Click
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkFilterMissing_MovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMissing_MovieSets.Click
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkFilterMissing_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterMissing_Shows.Click
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkFilterNew_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterNew_Movies.Click
        If chkFilterNew_Movies.Checked Then
            FilterArray_Movies.Add("New = 1")
        Else
            FilterArray_Movies.Remove("New = 1")
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub chkFilterNew_Moviesets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterNew_MovieSets.Click
        If chkFilterNew_MovieSets.Checked Then
            FilterArray_MovieSets.Add("New = 1")
        Else
            FilterArray_MovieSets.Remove("New = 1")
        End If
        Filter_Run_Movieset()
    End Sub

    Private Sub chkFilterNewEpisodes_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterNewEpisodes_Shows.Click
        If chkFilterNewEpisodes_Shows.Checked Then
            FilterArray_TVShows.Add("NewEpisodes > 0")
        Else
            FilterArray_TVShows.Remove("NewEpisodes > 0")
        End If
        Filter_Run_TVShow()
    End Sub

    Private Sub chkFilterNewShows_Shows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterNewShows_Shows.Click
        If chkFilterNewShows_Shows.Checked Then
            FilterArray_TVShows.Add("New = 1")
        Else
            FilterArray_TVShows.Remove("New = 1")
        End If
        Filter_Run_TVShow()
    End Sub

    Private Sub chkFilterTolerance_Movies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles chkFilterTolerance_Movies.Click
        If chkFilterTolerance_Movies.Checked Then
            FilterArray_Movies.Add("OutOfTolerance = 1")
        Else
            FilterArray_Movies.Remove("OutOfTolerance = 1")
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub chkMovieMissingBanner_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingBanner.CheckedChanged
        Master.eSettings.MovieMissingBanner = chkMovieMissingBanner.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingClearArt_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingClearArt.CheckedChanged
        Master.eSettings.MovieMissingClearArt = chkMovieMissingClearArt.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingClearLogo_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingClearLogo.CheckedChanged
        Master.eSettings.MovieMissingClearLogo = chkMovieMissingClearLogo.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingDiscArt_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingDiscArt.CheckedChanged
        Master.eSettings.MovieMissingDiscArt = chkMovieMissingDiscArt.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingExtrafanarts_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingExtrafanarts.CheckedChanged
        Master.eSettings.MovieMissingExtrafanarts = chkMovieMissingExtrafanarts.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingExtrathumbs_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingExtrathumbs.CheckedChanged
        Master.eSettings.MovieMissingExtrathumbs = chkMovieMissingExtrathumbs.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingFanart_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingFanart.CheckedChanged
        Master.eSettings.MovieMissingFanart = chkMovieMissingFanart.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingLandscape_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingLandscape.CheckedChanged
        Master.eSettings.MovieMissingLandscape = chkMovieMissingLandscape.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingNFO_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingNFO.CheckedChanged
        Master.eSettings.MovieMissingNFO = chkMovieMissingNFO.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingPoster_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingPoster.CheckedChanged
        Master.eSettings.MovieMissingPoster = chkMovieMissingPoster.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingSubtitles_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingSubtitles.CheckedChanged
        Master.eSettings.MovieMissingSubtitles = chkMovieMissingSubtitles.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingTheme_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingTheme.CheckedChanged
        Master.eSettings.MovieMissingTheme = chkMovieMissingTheme.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieMissingTrailer_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieMissingTrailer.CheckedChanged
        Master.eSettings.MovieMissingTrailer = chkMovieMissingTrailer.Checked
        chkFilterMissing_Movies.Enabled = Master.eSettings.MovieMissingItemsAnyEnabled
        chkFilterMissing_Movies.Checked = Master.eSettings.MovieMissingItemsAnyEnabled
        Filter_Set_Missing_Movie()
    End Sub

    Private Sub chkMovieSetMissingBanner_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieSetMissingBanner.CheckedChanged
        Master.eSettings.MovieSetMissingBanner = chkMovieSetMissingBanner.Checked
        chkFilterMissing_MovieSets.Enabled = Master.eSettings.MovieSetMissingItemsAnyEnabled
        chkFilterMissing_MovieSets.Checked = Master.eSettings.MovieSetMissingItemsAnyEnabled
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkMovieSetMissingClearArt_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieSetMissingClearArt.CheckedChanged
        Master.eSettings.MovieSetMissingClearArt = chkMovieSetMissingClearArt.Checked
        chkFilterMissing_MovieSets.Enabled = Master.eSettings.MovieSetMissingItemsAnyEnabled
        chkFilterMissing_MovieSets.Checked = Master.eSettings.MovieSetMissingItemsAnyEnabled
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkMovieSetMissingClearLogo_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieSetMissingClearLogo.CheckedChanged
        Master.eSettings.MovieSetMissingClearLogo = chkMovieSetMissingClearLogo.Checked
        chkFilterMissing_MovieSets.Enabled = Master.eSettings.MovieSetMissingItemsAnyEnabled
        chkFilterMissing_MovieSets.Checked = Master.eSettings.MovieSetMissingItemsAnyEnabled
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkMovieSetMissingDiscArt_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieSetMissingDiscArt.CheckedChanged
        Master.eSettings.MovieSetMissingDiscArt = chkMovieSetMissingDiscArt.Checked
        chkFilterMissing_MovieSets.Enabled = Master.eSettings.MovieSetMissingItemsAnyEnabled
        chkFilterMissing_MovieSets.Checked = Master.eSettings.MovieSetMissingItemsAnyEnabled
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkMovieSetMissingFanart_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieSetMissingFanart.CheckedChanged
        Master.eSettings.MovieSetMissingFanart = chkMovieSetMissingFanart.Checked
        chkFilterMissing_MovieSets.Enabled = Master.eSettings.MovieSetMissingItemsAnyEnabled
        chkFilterMissing_MovieSets.Checked = Master.eSettings.MovieSetMissingItemsAnyEnabled
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkMovieSetMissingLandscape_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieSetMissingLandscape.CheckedChanged
        Master.eSettings.MovieSetMissingLandscape = chkMovieSetMissingLandscape.Checked
        chkFilterMissing_MovieSets.Enabled = Master.eSettings.MovieSetMissingItemsAnyEnabled
        chkFilterMissing_MovieSets.Checked = Master.eSettings.MovieSetMissingItemsAnyEnabled
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkMovieSetMissingNFO_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieSetMissingNFO.CheckedChanged
        Master.eSettings.MovieSetMissingNFO = chkMovieSetMissingNFO.Checked
        chkFilterMissing_MovieSets.Enabled = Master.eSettings.MovieSetMissingItemsAnyEnabled
        chkFilterMissing_MovieSets.Checked = Master.eSettings.MovieSetMissingItemsAnyEnabled
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkMovieSetMissingPoster_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkMovieSetMissingPoster.CheckedChanged
        Master.eSettings.MovieSetMissingPoster = chkMovieSetMissingPoster.Checked
        chkFilterMissing_MovieSets.Enabled = Master.eSettings.MovieSetMissingItemsAnyEnabled
        chkFilterMissing_MovieSets.Checked = Master.eSettings.MovieSetMissingItemsAnyEnabled
        Filter_Set_Missing_Movieset()
    End Sub

    Private Sub chkShowMissingBanner_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingBanner.CheckedChanged
        Master.eSettings.TVShowMissingBanner = chkShowMissingBanner.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingCharacterArt_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingCharacterArt.CheckedChanged
        Master.eSettings.TVShowMissingCharacterArt = chkShowMissingCharacterArt.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingClearArt_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingClearArt.CheckedChanged
        Master.eSettings.TVShowMissingClearArt = chkShowMissingClearArt.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingClearLogo_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingClearLogo.CheckedChanged
        Master.eSettings.TVShowMissingClearLogo = chkShowMissingClearLogo.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingExtrafanarts_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingExtrafanarts.CheckedChanged
        Master.eSettings.TVShowMissingExtrafanarts = chkShowMissingExtrafanarts.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingFanart_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingFanart.CheckedChanged
        Master.eSettings.TVShowMissingFanart = chkShowMissingFanart.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingLandscape_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingLandscape.CheckedChanged
        Master.eSettings.TVShowMissingLandscape = chkShowMissingLandscape.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingNFO_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingNFO.CheckedChanged
        Master.eSettings.TVShowMissingNFO = chkShowMissingNFO.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingPoster_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingPoster.CheckedChanged
        Master.eSettings.TVShowMissingPoster = chkShowMissingPoster.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub chkShowMissingTheme_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkShowMissingTheme.CheckedChanged
        Master.eSettings.TVShowMissingTheme = chkShowMissingTheme.Checked
        chkFilterMissing_Shows.Enabled = Master.eSettings.TVShowMissingItemsAnyEnabled
        chkFilterMissing_Shows.Checked = Master.eSettings.TVShowMissingItemsAnyEnabled
        Filter_Set_Missing_TVShow()
    End Sub

    Private Sub clbFilterTags_Movies_ItemCheck(sender As Object, e As ItemCheckEventArgs) Handles clbFilterTags_Movies.ItemCheck
        If e.Index = 0 Then
            For i As Integer = 1 To clbFilterTags_Movies.Items.Count - 1
                clbFilterTags_Movies.SetItemChecked(i, False)
            Next
        Else
            clbFilterTags_Movies.SetItemChecked(0, False)
        End If
    End Sub

    Private Sub clbFilterTags_Shows_ItemCheck(sender As Object, e As ItemCheckEventArgs) Handles clbFilterTags_Shows.ItemCheck
        If e.Index = 0 Then
            For i As Integer = 1 To clbFilterTags_Shows.Items.Count - 1
                clbFilterTags_Shows.SetItemChecked(i, False)
            Next
        Else
            clbFilterTags_Shows.SetItemChecked(0, False)
        End If
    End Sub

    Private Sub clbFilterGenres_Movies_ItemCheck(sender As Object, e As ItemCheckEventArgs) Handles clbFilterGenres_Movies.ItemCheck
        If e.Index = 0 Then
            For i As Integer = 1 To clbFilterGenres_Movies.Items.Count - 1
                clbFilterGenres_Movies.SetItemChecked(i, False)
            Next
        Else
            clbFilterGenres_Movies.SetItemChecked(0, False)
        End If
    End Sub

    Private Sub clbFilterGenres_Shows_ItemCheck(sender As Object, e As ItemCheckEventArgs) Handles clbFilterGenres_Shows.ItemCheck
        If e.Index = 0 Then
            For i As Integer = 1 To clbFilterGenres_Shows.Items.Count - 1
                clbFilterGenres_Shows.SetItemChecked(i, False)
            Next
        Else
            clbFilterGenres_Shows.SetItemChecked(0, False)
        End If
    End Sub

    Private Sub clbFilterCountries_Movies_ItemCheck(sender As Object, e As ItemCheckEventArgs) Handles clbFilterCountries_Movies.ItemCheck
        If e.Index = 0 Then
            For i As Integer = 1 To clbFilterCountries_Movies.Items.Count - 1
                clbFilterCountries_Movies.SetItemChecked(i, False)
            Next
        Else
            clbFilterCountries_Movies.SetItemChecked(0, False)
        End If
    End Sub

    Private Sub clbFilterTags_Movies_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterTags_Movies.LostFocus
        pnlFilterTags_Movies.Visible = False
        pnlFilterTags_Movies.Tag = "NO"

        If clbFilterTags_Movies.CheckedItems.Count > 0 Then
            txtFilterTag_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filTag_Movies)

            Dim lstTags As New List(Of String)
            lstTags.AddRange(clbFilterTags_Movies.CheckedItems.OfType(Of String).ToList)

            If rbFilterAnd_Movies.Checked Then
                txtFilterTag_Movies.Text = String.Join(" AND ", lstTags.ToArray)
            Else
                txtFilterTag_Movies.Text = String.Join(" OR ", lstTags.ToArray)
            End If

            For i As Integer = 0 To lstTags.Count - 1
                If lstTags.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstTags.Item(i) = "Tag IS NULL OR Tag = ''"
                Else
                    lstTags.Item(i) = String.Format("Tag LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstTags.Item(i)))
                End If
            Next

            If rbFilterAnd_Movies.Checked Then
                filTag_Movies = String.Format("({0})", String.Join(" AND ", lstTags.ToArray))
            Else
                filTag_Movies = String.Format("({0})", String.Join(" OR ", lstTags.ToArray))
            End If

            FilterArray_Movies.Add(filTag_Movies)
            Filter_Run_Movie()
        Else
            If Not String.IsNullOrEmpty(filTag_Movies) Then
                txtFilterTag_Movies.Text = String.Empty
                FilterArray_Movies.Remove(filTag_Movies)
                filTag_Movies = String.Empty
                Filter_Run_Movie()
            End If
        End If
    End Sub

    Private Sub clbFilterTags_Shows_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterTags_Shows.LostFocus
        pnlFilterTags_Shows.Visible = False
        pnlFilterTags_Shows.Tag = "NO"

        If clbFilterTags_Shows.CheckedItems.Count > 0 Then
            txtFilterTag_Shows.Text = String.Empty
            FilterArray_TVShows.Remove(filTag_TVShows)

            Dim lstTags As New List(Of String)
            lstTags.AddRange(clbFilterTags_Shows.CheckedItems.OfType(Of String).ToList)

            If rbFilterAnd_Shows.Checked Then
                txtFilterTag_Shows.Text = String.Join(" AND ", lstTags.ToArray)
            Else
                txtFilterTag_Shows.Text = String.Join(" OR ", lstTags.ToArray)
            End If

            For i As Integer = 0 To lstTags.Count - 1
                If lstTags.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstTags.Item(i) = "Tag IS NULL OR Tag = ''"
                Else
                    lstTags.Item(i) = String.Format("Tag LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstTags.Item(i)))
                End If
            Next

            If rbFilterAnd_Shows.Checked Then
                filTag_TVShows = String.Format("({0})", String.Join(" AND ", lstTags.ToArray))
            Else
                filTag_TVShows = String.Format("({0})", String.Join(" OR ", lstTags.ToArray))
            End If

            FilterArray_TVShows.Add(filTag_TVShows)
            Filter_Run_TVShow()
        Else
            If Not String.IsNullOrEmpty(filTag_TVShows) Then
                txtFilterTag_Shows.Text = String.Empty
                FilterArray_TVShows.Remove(filTag_TVShows)
                filTag_TVShows = String.Empty
                Filter_Run_TVShow()
            End If
        End If
    End Sub

    Private Sub clbFilterGenres_Movies_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterGenres_Movies.LostFocus
        pnlFilterGenres_Movies.Visible = False
        pnlFilterGenres_Movies.Tag = "NO"

        If clbFilterGenres_Movies.CheckedItems.Count > 0 Then
            txtFilterGenre_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filGenre_Movies)

            Dim lstGenres As New List(Of String)
            lstGenres.AddRange(clbFilterGenres_Movies.CheckedItems.OfType(Of String).ToList)

            If rbFilterAnd_Movies.Checked Then
                txtFilterGenre_Movies.Text = String.Join(" AND ", lstGenres.ToArray)
            Else
                txtFilterGenre_Movies.Text = String.Join(" OR ", lstGenres.ToArray)
            End If

            For i As Integer = 0 To lstGenres.Count - 1
                If lstGenres.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstGenres.Item(i) = "Genre IS NULL OR Genre = ''"
                Else
                    lstGenres.Item(i) = String.Format("Genre LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstGenres.Item(i)))
                End If
            Next

            If rbFilterAnd_Movies.Checked Then
                filGenre_Movies = String.Format("({0})", String.Join(" AND ", lstGenres.ToArray))
            Else
                filGenre_Movies = String.Format("({0})", String.Join(" OR ", lstGenres.ToArray))
            End If

            FilterArray_Movies.Add(filGenre_Movies)
            Filter_Run_Movie()
        Else
            If Not String.IsNullOrEmpty(filGenre_Movies) Then
                txtFilterGenre_Movies.Text = String.Empty
                FilterArray_Movies.Remove(filGenre_Movies)
                filGenre_Movies = String.Empty
                Filter_Run_Movie()
            End If
        End If
    End Sub

    Private Sub clbFilterGenres_Shows_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterGenres_Shows.LostFocus
        pnlFilterGenres_Shows.Visible = False
        pnlFilterGenres_Shows.Tag = "NO"

        If clbFilterGenres_Shows.CheckedItems.Count > 0 Then
            txtFilterGenre_Shows.Text = String.Empty
            FilterArray_TVShows.Remove(filGenre_TVShows)

            Dim lstGenres As New List(Of String)
            lstGenres.AddRange(clbFilterGenres_Shows.CheckedItems.OfType(Of String).ToList)

            If rbFilterAnd_Shows.Checked Then
                txtFilterGenre_Shows.Text = String.Join(" AND ", lstGenres.ToArray)
            Else
                txtFilterGenre_Shows.Text = String.Join(" OR ", lstGenres.ToArray)
            End If

            For i As Integer = 0 To lstGenres.Count - 1
                If lstGenres.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstGenres.Item(i) = "Genre IS NULL OR Genre = ''"
                Else
                    lstGenres.Item(i) = String.Format("Genre LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstGenres.Item(i)))
                End If
            Next

            If rbFilterAnd_Shows.Checked Then
                filGenre_TVShows = String.Format("({0})", String.Join(" AND ", lstGenres.ToArray))
            Else
                filGenre_TVShows = String.Format("({0})", String.Join(" OR ", lstGenres.ToArray))
            End If

            FilterArray_TVShows.Add(filGenre_TVShows)
            Filter_Run_TVShow()
        Else
            If Not String.IsNullOrEmpty(filGenre_TVShows) Then
                txtFilterGenre_Shows.Text = String.Empty
                FilterArray_TVShows.Remove(filGenre_TVShows)
                filGenre_TVShows = String.Empty
                Filter_Run_TVShow()
            End If
        End If
    End Sub

    Private Sub clbFilterCountries_Movies_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterCountries_Movies.LostFocus
        pnlFilterCountries_Movies.Visible = False
        pnlFilterCountries_Movies.Tag = "NO"

        If clbFilterCountries_Movies.CheckedItems.Count > 0 Then
            txtFilterCountry_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filCountry_Movies)

            Dim lstCountries As New List(Of String)
            lstCountries.AddRange(clbFilterCountries_Movies.CheckedItems.OfType(Of String).ToList)

            If rbFilterAnd_Movies.Checked Then
                txtFilterCountry_Movies.Text = String.Join(" AND ", lstCountries.ToArray)
            Else
                txtFilterCountry_Movies.Text = String.Join(" OR ", lstCountries.ToArray)
            End If

            For i As Integer = 0 To lstCountries.Count - 1
                If lstCountries.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstCountries.Item(i) = "Country IS NULL OR Country = ''"
                Else
                    lstCountries.Item(i) = String.Format("Country LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstCountries.Item(i)))
                End If
            Next

            If rbFilterAnd_Movies.Checked Then
                filCountry_Movies = String.Format("({0})", String.Join(" AND ", lstCountries.ToArray))
            Else
                filCountry_Movies = String.Format("({0})", String.Join(" OR ", lstCountries.ToArray))
            End If

            FilterArray_Movies.Add(filCountry_Movies)
            Filter_Run_Movie()
        Else
            If Not String.IsNullOrEmpty(filCountry_Movies) Then
                txtFilterCountry_Movies.Text = String.Empty
                FilterArray_Movies.Remove(filCountry_Movies)
                filCountry_Movies = String.Empty
                Filter_Run_Movie()
            End If
        End If
    End Sub

    Private Sub clbFilterDataFields_Movies_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterDataFields_Movies.LostFocus, cbFilterDataField_Movies.SelectedIndexChanged
        pnlFilterDataFields_Movies.Visible = False
        pnlFilterDataFields_Movies.Tag = "NO"

        If clbFilterDataFields_Movies.CheckedItems.Count > 0 Then
            txtFilterDataField_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filDataField_Movies)

            Dim lstDataFields As New List(Of String)
            lstDataFields.AddRange(clbFilterDataFields_Movies.CheckedItems.OfType(Of String).ToList)

            If rbFilterAnd_Movies.Checked Then
                txtFilterDataField_Movies.Text = String.Join(" AND ", lstDataFields.ToArray)
            Else
                txtFilterDataField_Movies.Text = String.Join(" OR ", lstDataFields.ToArray)
            End If

            For i As Integer = 0 To lstDataFields.Count - 1
                Dim bInteger As Boolean = lstDataFields.Item(i) = "Top250"
                If cbFilterDataField_Movies.SelectedIndex = 0 Then
                    If bInteger Then
                        lstDataFields.Item(i) = String.Format("{0} IS NULL", lstDataFields.Item(i))
                    Else
                        lstDataFields.Item(i) = String.Format("{0} IS NULL OR {0} = ''", lstDataFields.Item(i))
                    End If
                Else
                    If bInteger Then
                        lstDataFields.Item(i) = String.Format("{0} NOT IS NULL", lstDataFields.Item(i))
                    Else
                        lstDataFields.Item(i) = String.Format("{0} NOT IS NULL AND {0} NOT = ''", lstDataFields.Item(i))
                    End If
                End If
            Next

            If rbFilterAnd_Movies.Checked Then
                filDataField_Movies = String.Format("({0})", String.Join(" AND ", lstDataFields.ToArray))
            Else
                filDataField_Movies = String.Format("({0})", String.Join(" OR ", lstDataFields.ToArray))
            End If

            FilterArray_Movies.Add(filDataField_Movies)
            Filter_Run_Movie()
        Else
            If Not String.IsNullOrEmpty(filDataField_Movies) Then
                txtFilterDataField_Movies.Text = String.Empty
                FilterArray_Movies.Remove(filDataField_Movies)
                filDataField_Movies = String.Empty
                Filter_Run_Movie()
            End If
        End If
    End Sub

    Private Sub clbFilterSource_Movies_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterSources_Movies.LostFocus
        pnlFilterSources_Movies.Visible = False
        pnlFilterSources_Movies.Tag = "NO"

        If clbFilterSources_Movies.CheckedItems.Count > 0 Then
            txtFilterSource_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filSource_Movies)

            Dim lstSource As New List(Of String)
            lstSource.AddRange(clbFilterSources_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterSource_Movies.Text = String.Join(" | ", lstSource.ToArray)

            For i As Integer = 0 To lstSource.Count - 1
                lstSource.Item(i) = String.Format("Source = '{0}'", StringUtils.ConvertToValidFilterString(lstSource.Item(i)))
            Next

            filSource_Movies = String.Format("({0})", String.Join(" OR ", lstSource.ToArray))

            FilterArray_Movies.Add(filSource_Movies)
            Filter_Run_Movie()
        Else
            If Not String.IsNullOrEmpty(filSource_Movies) Then
                txtFilterSource_Movies.Text = String.Empty
                FilterArray_Movies.Remove(filSource_Movies)
                filSource_Movies = String.Empty
                Filter_Run_Movie()
            End If
        End If
    End Sub

    Private Sub clbFilterVideoSources_Movies_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterVideoSources_Movies.LostFocus
        pnlFilterVideoSources_Movies.Visible = False
        pnlFilterVideoSources_Movies.Tag = "NO"

        If clbFilterVideoSources_Movies.CheckedItems.Count > 0 Then
            txtFilterVideoSource_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filVideoSource_Movies)

            Dim lstVideoSources As New List(Of String)
            lstVideoSources.AddRange(clbFilterVideoSources_Movies.CheckedItems.OfType(Of String).ToList)

            If rbFilterAnd_Movies.Checked Then
                txtFilterVideoSource_Movies.Text = String.Join(" AND ", lstVideoSources.ToArray)
            Else
                txtFilterVideoSource_Movies.Text = String.Join(" OR ", lstVideoSources.ToArray)
            End If

            For i As Integer = 0 To lstVideoSources.Count - 1
                If lstVideoSources.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstVideoSources.Item(i) = "VideoSource IS NULL OR VideoSource = ''"
                Else
                    lstVideoSources.Item(i) = String.Format("VideoSource LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstVideoSources.Item(i)))
                End If
            Next

            If rbFilterAnd_Movies.Checked Then
                filVideoSource_Movies = String.Format("({0})", String.Join(" AND ", lstVideoSources.ToArray))
            Else
                filVideoSource_Movies = String.Format("({0})", String.Join(" OR ", lstVideoSources.ToArray))
            End If

            FilterArray_Movies.Add(filVideoSource_Movies)
            Filter_Run_Movie()
        Else
            If Not String.IsNullOrEmpty(filVideoSource_Movies) Then
                txtFilterVideoSource_Movies.Text = String.Empty
                FilterArray_Movies.Remove(filVideoSource_Movies)
                filVideoSource_Movies = String.Empty
                Filter_Run_Movie()
            End If
        End If
    End Sub

    Private Sub clbFilterSource_Shows_LostFocus(ByVal sender As Object, ByVal e As EventArgs) Handles clbFilterSource_Shows.LostFocus
        pnlFilterSources_Shows.Visible = False
        pnlFilterSources_Shows.Tag = "NO"

        If clbFilterSource_Shows.CheckedItems.Count > 0 Then
            txtFilterSource_Shows.Text = String.Empty
            FilterArray_TVShows.Remove(filSource_TVShows)

            Dim lstSource As New List(Of String)
            lstSource.AddRange(clbFilterSource_Shows.CheckedItems.OfType(Of String).ToList)

            txtFilterSource_Shows.Text = String.Join(" | ", lstSource.ToArray)

            For i As Integer = 0 To lstSource.Count - 1
                lstSource.Item(i) = String.Format("Source = '{0}'", StringUtils.ConvertToValidFilterString(lstSource.Item(i)))
            Next

            filSource_TVShows = String.Format("({0})", String.Join(" OR ", lstSource.ToArray))

            FilterArray_TVShows.Add(filSource_TVShows)
            Filter_Run_TVShow()
        Else
            If Not String.IsNullOrEmpty(filSource_TVShows) Then
                txtFilterSource_Shows.Text = String.Empty
                FilterArray_TVShows.Remove(filSource_TVShows)
                filSource_TVShows = String.Empty
                Filter_Run_TVShow()
            End If
        End If
    End Sub

    Private Sub mnuMainToolsCleanDB_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsCleanDB.Click, cmnuTrayToolsCleanDB.Click
        Database_Clean(New Scanner.ScanOrCleanOptions With {.Movies = True, .Moviesets = True, .TV = True})
    End Sub

    Private Sub CleanFiles()
        FileUtils.CleanUp.DoCleanUp()
        'Try
        '    Dim sWarning As String = String.Empty
        '    Dim sWarningFile As String = String.Empty
        '    With Master.eSettings
        '        If .FileSystemExpertCleaner Then
        '            sWarning = String.Concat(Master.eLang.GetString(102, "WARNING: If you continue, all non-whitelisted file types will be deleted!"), Environment.NewLine, Environment.NewLine, Master.eLang.GetString(101, "Are you sure you want to continue?"))
        '        Else
        '            If .CleanDotFanartJPG Then sWarningFile += String.Concat("<movie>.fanart.jpg", Environment.NewLine)
        '            If .CleanFanartJPG Then sWarningFile += String.Concat("fanart.jpg", Environment.NewLine)
        '            If .CleanFolderJPG Then sWarningFile += String.Concat("folder.jpg", Environment.NewLine)
        '            If .CleanMovieFanartJPG Then sWarningFile += String.Concat("<movie>-fanart.jpg", Environment.NewLine)
        '            If .CleanMovieJPG Then sWarningFile += String.Concat("movie.jpg", Environment.NewLine)
        '            If .CleanMovieNameJPG Then sWarningFile += String.Concat("<movie>.jpg", Environment.NewLine)
        '            If .CleanMovieNFO Then sWarningFile += String.Concat("movie.nfo", Environment.NewLine)
        '            If .CleanMovieNFOB Then sWarningFile += String.Concat("<movie>.nfo", Environment.NewLine)
        '            If .CleanMovieTBN Then sWarningFile += String.Concat("movie.tbn", Environment.NewLine)
        '            If .CleanMovieTBNB Then sWarningFile += String.Concat("<movie>.tbn", Environment.NewLine)
        '            If .CleanPosterJPG Then sWarningFile += String.Concat("poster.jpg", Environment.NewLine)
        '            If .CleanPosterTBN Then sWarningFile += String.Concat("poster.tbn", Environment.NewLine)
        '            If .CleanExtrathumbs Then sWarningFile += String.Concat("/extrathumbs/", Environment.NewLine)
        '            sWarning = String.Concat(Master.eLang.GetString(103, "WARNING: If you continue, all files of the following types will be permanently deleted:"), Environment.NewLine, Environment.NewLine, sWarningFile, Environment.NewLine, Master.eLang.GetString(101, "Are you sure you want to continue?"))
        '        End If
        '    End With
        '    If MessageBox.Show(sWarning, Master.eLang.GetString(104, "Are you sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Warning) = DialogResult.Yes Then
        '        NonScrape(Enums.TaskManagerType.CleanFolders)
        '    End If
        'Catch ex As Exception
        '    logger.Error(ex, New StackFrame().GetMethod().Name)
        'End Try
    End Sub

    Private Sub mnuMainToolsCleanFiles_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsCleanFiles.Click, cmnuTrayToolsCleanFiles.Click
        CleanFiles()
    End Sub

    Private Sub mnuMainToolsClearCache_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsClearCache.Click, cmnuTrayToolsClearCache.Click
        FileUtils.Delete.Cache_All()
    End Sub

    Private Sub cmnuShowOpenFolder_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowOpenFolder.Click
        If dgvTVShows.SelectedRows.Count > 0 Then
            Dim doOpen As Boolean = True
            If dgvTVShows.SelectedRows.Count > 10 Then
                If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVShows.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
            End If

            If doOpen Then
                For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                    Using Explorer As New Process
                        Explorer.StartInfo.FileName = "explorer.exe"
                        Explorer.StartInfo.Arguments = String.Format("/root,""{0}""", sRow.Cells("TVShowPath").Value.ToString)
                        Explorer.Start()
                    End Using
                Next
            End If
        End If
    End Sub

    Private Sub cmnuShowClearCacheDataAndImages_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowClearCacheDataAndImages.Click
        Dim idList As New List(Of String)
        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
            idList.Add(sRow.Cells("TVDB").Value.ToString)
        Next
        FileUtils.Delete.Cache_Show(idList, True, True)
    End Sub

    Private Sub cmnuShowClearCacheDataOnly_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowClearCacheDataOnly.Click
        Dim idList As New List(Of String)
        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
            idList.Add(sRow.Cells("TVDB").Value.ToString)
        Next
        FileUtils.Delete.Cache_Show(idList, True, False)
    End Sub

    Private Sub cmnuShowClearCacheImagesOnly_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowClearCacheImagesOnly.Click
        Dim idList As New List(Of String)
        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
            idList.Add(sRow.Cells("TVDB").Value.ToString)
        Next
        FileUtils.Delete.Cache_Show(idList, False, True)
    End Sub

    Private Sub cmnuEpisodeChange_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeChange.Click
        Dim indX As Integer = dgvTVEpisodes.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvTVEpisodes.Item("idEpisode", indX).Value)
        Dim ShowID As Long = Convert.ToInt64(dgvTVEpisodes.Item("idShow", indX).Value)

        SetControlsEnabled(False, True)

        Dim tmpEpisode As Database.DBElement = Master.DB.Load_TVEpisode(ID, True)
        Dim tmpShow As Database.DBElement = Master.DB.Load_TVShow(ShowID, False, False)

        Dim ScrapeModifiers As New Structures.ScrapeModifiers
        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainNFO, True)
        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.withEpisodes, True)

        'TODO: move to TaskManager

        'If Addons.Instance.ScrapeData_TVShow(tmpShow, ScrapeModifiers, Enums.ScrapeType.Change, Master.DefaultOptions_TV, True) Then
        '    If tmpShow.Episodes.Count > 0 Then
        '        Dim dlgChangeEp As New dlgTVChangeEp(tmpShow)
        '        If dlgChangeEp.ShowDialog = DialogResult.OK Then
        '            If dlgChangeEp.Result.Count > 0 Then
        '                If Master.eSettings.TVScraperMetaDataScan Then
        '                    MediaInfo.UpdateTVMediaInfo(tmpEpisode)
        '                End If
        '                Master.DB.Change_TVEpisode(tmpEpisode, dlgChangeEp.Result, False)
        '            End If
        '        End If
        '    Else
        '        MessageBox.Show(Master.eLang.GetString(943, "There are no known episodes for this show. Scrape the show, season, or episode and try again."), Master.eLang.GetString(944, "No Known Episodes"), MessageBoxButtons.OK, MessageBoxIcon.Information)
        '    End If
        'End If

        DataGridView_Row_Update_TVShow(ShowID, True)

        SetControlsEnabled(True)
    End Sub

    Private Sub cmnuShowGetMissingEpisodes_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowGetMissingEpisodes.Click
        If dgvTVShows.SelectedRows.Count > 0 Then
            Dim lItemsToChange As New List(Of Long)
            For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                lItemsToChange.Add(Convert.ToInt64(sRow.Cells("idShow").Value))
            Next

            fTaskManager.AddTask(New TaskManager.TaskItem(TaskManager.TaskItem.TaskType.GetMissingEpisodes) With {
                                 .ListOfID = lItemsToChange,
                                 .ContentType = Enums.ContentType.TVShow
                                 })
        End If
    End Sub

    Private Sub cmnuShowChange_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowChange.Click
        If dgvTVShows.SelectedRows.Count = 1 Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.DoSearch, True)
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.withEpisodes, True)
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.withSeasons, True)
            Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Manually, Master.DefaultOptions_TV, ScrapeModifiers, Enums.ContentType.TVShow)
        End If
    End Sub

    Private Sub cmnuSeasonRemoveFromDisk_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonRemoveFromDisk.Click
        Dim lstTVSeasonID As New List(Of Long)

        For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
            Dim lngID As Long = Convert.ToInt64(sRow.Cells("idSeason").Value)
            If Not lstTVSeasonID.Contains(lngID) Then lstTVSeasonID.Add(lngID)
        Next

        If lstTVSeasonID.Count > 0 Then
            Using dlg As New dlgDeleteConfirm
                If dlg.ShowDialog(lstTVSeasonID, Enums.ContentType.TVSeason) = DialogResult.OK Then
                    DataGridView_FillList_TVSeason(Convert.ToInt64(dgvTVSeasons.Item("idShow", currRow_TVSeason).Value))
                    MainTab_SetCount_TV()
                End If
            End Using
        End If
    End Sub

    Private Sub cmnuEpisodeRemoveFromDisk_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeRemoveFromDisk.Click
        Dim lstTVEpisodeID As New List(Of Long)

        For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
            Dim lngID As Long = Convert.ToInt64(sRow.Cells("idEpisode").Value)
            If Not lstTVEpisodeID.Contains(lngID) Then lstTVEpisodeID.Add(lngID)
        Next

        If lstTVEpisodeID.Count > 0 Then
            Using dlg As New dlgDeleteConfirm
                If dlg.ShowDialog(lstTVEpisodeID, Enums.ContentType.TVEpisode) = DialogResult.OK Then
                    DataGridView_FillList_TVEpisode(Convert.ToInt64(dgvTVSeasons.Item("idShow", currRow_TVSeason).Value), Convert.ToInt32(dgvTVSeasons.Item("Season", currRow_TVSeason).Value))
                    MainTab_SetCount_TV()
                End If
            End Using
        End If
    End Sub

    Private Sub cmnuShowRemoveFromDisk_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowRemoveFromDisk.Click
        Dim lstTVShowID As New List(Of Long)

        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
            Dim lngID As Long = Convert.ToInt64(sRow.Cells("idShow").Value)
            If Not lstTVShowID.Contains(lngID) Then lstTVShowID.Add(lngID)
        Next

        If lstTVShowID.Count > 0 Then
            Using dlg As New dlgDeleteConfirm
                If dlg.ShowDialog(lstTVShowID, Enums.ContentType.TVShow) = DialogResult.OK Then
                    DataGridView_FillList_Main(False, False, True)
                End If
            End Using
        End If
    End Sub

    Private Sub cmnuEpisodeEdit_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeEdit.Click
        If dgvTVEpisodes.SelectedRows.Count > 1 Then Return

        Dim indX As Integer = dgvTVEpisodes.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvTVEpisodes.Item("idEpisode", indX).Value)
        Dim tmpDBTVEpisode As Database.DBElement = Master.DB.Load_TVEpisode(ID, True)
        Edit_TVEpisode(tmpDBTVEpisode)
    End Sub

    Private Sub cmnuMovieEdit_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieEdit.Click
        If dgvMovies.SelectedRows.Count > 1 Then Return

        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
        Dim tmpDBMovie As Database.DBElement = Master.DB.Load_Movie(ID)
        Edit_Movie(tmpDBMovie)
    End Sub

    Private Sub cmnuShowEdit_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowEdit.Click
        If dgvTVShows.SelectedRows.Count > 1 Then Return

        Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
        Dim tmpDBTVShow As Database.DBElement = Master.DB.Load_TVShow(ID, True, False)
        Edit_TVShow(tmpDBTVShow)
    End Sub

    Private Sub cmnuEpisodeOpenFolder_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeOpenFolder.Click
        If dgvTVEpisodes.SelectedRows.Count > 0 Then
            Dim doOpen As Boolean = True
            Dim ePath As String = String.Empty

            If dgvTVEpisodes.SelectedRows.Count > 10 Then
                If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVEpisodes.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
            End If

            If doOpen Then
                Using SQLCommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
                    For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                        If Not Convert.ToInt64(sRow.Cells("idFile").Value) = -1 Then
                            SQLCommand.CommandText = String.Concat("SELECT strFilename FROM files WHERE idFile = ", sRow.Cells("idFile").Value.ToString, ";")
                            ePath = SQLCommand.ExecuteScalar.ToString

                            If Not String.IsNullOrEmpty(ePath) Then
                                Using Explorer As New Process
                                    Explorer.StartInfo.FileName = "explorer.exe"
                                    Explorer.StartInfo.Arguments = String.Format("/select,""{0}""", ePath)
                                    Explorer.Start()
                                End Using
                            End If
                        End If
                    Next
                End Using
            End If
        End If
    End Sub

    Private Sub cmnuMovieLock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieLock.Click
        TaskManager_CreateTask(Enums.ContentType.Movie, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, True, String.Empty)
    End Sub

    Private Sub cmnuMovieUnlock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieUnlock.Click
        TaskManager_CreateTask(Enums.ContentType.Movie, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, False, String.Empty)
    End Sub

    Private Sub cmnuMovieMark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieMark.Click
        TaskManager_CreateTask(Enums.ContentType.Movie, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, True, String.Empty)
    End Sub

    Private Sub cmnuMovieUnmark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieUnmark.Click
        TaskManager_CreateTask(Enums.ContentType.Movie, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, False, String.Empty)
    End Sub

    Private Sub cmnuMovieWatched_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieWatched.Click
        TaskManager_CreateTask(Enums.ContentType.Movie, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, True, String.Empty)
    End Sub

    Private Sub cmnuMovieUnwatched_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieUnwatched.Click
        TaskManager_CreateTask(Enums.ContentType.Movie, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, False, String.Empty)
    End Sub

    Private Sub cmnuMovieSetLock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetLock.Click
        TaskManager_CreateTask(Enums.ContentType.Movieset, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, True, String.Empty)
    End Sub

    Private Sub cmnuMovieSetUnlock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetUnlock.Click
        TaskManager_CreateTask(Enums.ContentType.Movieset, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, False, String.Empty)
    End Sub

    Private Sub cmnuMovieSetMark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetMark.Click
        TaskManager_CreateTask(Enums.ContentType.Movieset, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, True, String.Empty)
    End Sub

    Private Sub cmnuMovieSetUnmark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetUnmark.Click
        TaskManager_CreateTask(Enums.ContentType.Movieset, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, False, String.Empty)
    End Sub

    Private Sub cmnuEpisodeLock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeLock.Click
        TaskManager_CreateTask(Enums.ContentType.TVEpisode, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, True, String.Empty)
    End Sub

    Private Sub cmnuEpisodeUnlock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeUnlock.Click
        TaskManager_CreateTask(Enums.ContentType.TVEpisode, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, False, String.Empty)
    End Sub

    Private Sub cmnuEpisodeMark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeMark.Click
        TaskManager_CreateTask(Enums.ContentType.TVEpisode, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, True, String.Empty)
    End Sub

    Private Sub cmnuEpisodeUnmark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeUnmark.Click
        TaskManager_CreateTask(Enums.ContentType.TVEpisode, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, False, String.Empty)
    End Sub

    Private Sub cmnuEpisodeWatched_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeWatched.Click
        TaskManager_CreateTask(Enums.ContentType.TVEpisode, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, True, String.Empty)
    End Sub

    Private Sub cmnuEpisodeUnwatched_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeUnwatched.Click
        TaskManager_CreateTask(Enums.ContentType.TVEpisode, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, False, String.Empty)
    End Sub

    Private Sub cmnuSeasonLock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonLock.Click
        TaskManager_CreateTask(Enums.ContentType.TVSeason, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, True, String.Empty)
    End Sub

    Private Sub cmnuSeasonUnlock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonUnlock.Click
        TaskManager_CreateTask(Enums.ContentType.TVSeason, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, False, String.Empty)
    End Sub

    Private Sub cmnuSeasonMark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonMark.Click
        TaskManager_CreateTask(Enums.ContentType.TVSeason, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, True, String.Empty)
    End Sub

    Private Sub cmnuSeasonUnmark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonUnmark.Click
        TaskManager_CreateTask(Enums.ContentType.TVSeason, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, False, String.Empty)
    End Sub

    Private Sub cmnuSeasonWatched_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonWatched.Click
        TaskManager_CreateTask(Enums.ContentType.TVSeason, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, True, String.Empty)
    End Sub

    Private Sub cmnuSeasonUnwatched_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonUnwatched.Click
        TaskManager_CreateTask(Enums.ContentType.TVSeason, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, False, String.Empty)
    End Sub

    Private Sub cmnuShowLock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowLock.Click
        TaskManager_CreateTask(Enums.ContentType.TVShow, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, True, String.Empty)
    End Sub

    Private Sub cmnuShowUnlock_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowUnlock.Click
        TaskManager_CreateTask(Enums.ContentType.TVShow, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLockedState, False, String.Empty)
    End Sub

    Private Sub cmnuShowMark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowMark.Click
        TaskManager_CreateTask(Enums.ContentType.TVShow, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, True, String.Empty)
    End Sub

    Private Sub cmnuShowUnmark_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowUnmark.Click
        TaskManager_CreateTask(Enums.ContentType.TVShow, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetMarkedState, False, String.Empty)
    End Sub

    Private Sub cmnuShowWatched_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowWatched.Click
        TaskManager_CreateTask(Enums.ContentType.TVShow, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, True, String.Empty)
    End Sub

    Private Sub cmnuShowUnwatched_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowUnwatched.Click
        TaskManager_CreateTask(Enums.ContentType.TVShow, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, False, String.Empty)
    End Sub

    'Private Sub cmnuEpisodeMark_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmnuEpisodeMark.Click, cmnuEpisodeUnmark.Click
    '    Try
    '        Dim setMark As Boolean = False
    '        If dgvTVEpisodes.SelectedRows.Count > 1 Then
    '            For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
    '                'if any one item is set as unmarked, set menu to mark
    '                'else they are all marked, so set menu to unmark
    '                If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
    '                    setMark = True
    '                    Exit For
    '                End If
    '            Next
    '        End If

    '        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
    '            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '                Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMark", DbType.Boolean, 0, "mark")
    '                Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idEpisode")
    '                SQLcommand.CommandText = "UPDATE episode SET mark = (?) WHERE idEpisode = (?);"
    '                For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
    '                    parMark.Value = If(dgvTVEpisodes.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("Mark").Value))
    '                    parID.Value = sRow.Cells("idEpisode").Value
    '                    SQLcommand.ExecuteNonQuery()
    '                    sRow.Cells("Mark").Value = parMark.Value
    '                Next
    '            End Using

    '            'now check the status of all episodes in the season so we can update the season mark flag if needed
    '            Dim MarkCount As Integer = 0
    '            Dim NotMarkCount As Integer = 0
    '            For Each sRow As DataGridViewRow In dgvTVEpisodes.Rows
    '                If Convert.ToBoolean(sRow.Cells("Mark").Value) Then
    '                    MarkCount += 1
    '                Else
    '                    NotMarkCount += 1
    '                End If
    '            Next

    '            If MarkCount = 0 OrElse NotMarkCount = 0 Then
    '                Using SQLSeacommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '                    Dim parSeaMark As SQLite.SQLiteParameter = SQLSeacommand.Parameters.Add("parSeaMark", DbType.Boolean, 0, "Mark")
    '                    Dim parTVShowID As SQLite.SQLiteParameter = SQLSeacommand.Parameters.Add("parTVShowID", DbType.Int64, 0, "idShow")
    '                    Dim parSeason As SQLite.SQLiteParameter = SQLSeacommand.Parameters.Add("parSeason", DbType.Int64, 0, "Season")
    '                    SQLSeacommand.CommandText = "UPDATE seasons SET Mark = (?) WHERE idShow = (?) AND Season = (?);"
    '                    If MarkCount = 0 Then
    '                        parSeaMark.Value = False
    '                    ElseIf NotMarkCount = 0 Then
    '                        parSeaMark.Value = True
    '                    End If
    '                    parTVShowID.Value = Convert.ToInt64(dgvTVSeasons.SelectedRows(0).Cells("idShow").Value)
    '                    parSeason.Value = Convert.ToInt32(dgvTVSeasons.SelectedRows(0).Cells("Season").Value)
    '                    SQLSeacommand.ExecuteNonQuery()
    '                    dgvTVSeasons.SelectedRows(0).Cells("Mark").Value = parSeaMark.Value
    '                End Using
    '            End If

    '            SQLtransaction.Commit()
    '        End Using

    '        dgvTVSeasons.Invalidate()
    '        dgvTVEpisodes.Invalidate()

    '    Catch ex As Exception
    '        logger.Error(ex, New StackFrame().GetMethod().Name)
    '    End Try
    'End Sub

    'Private Sub cmnuSeasonMark_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmnuSeasonMark.Click, cmnuSeasonUnmark.Click
    '    Try
    '        Dim setMark As Boolean = False
    '        If dgvTVSeasons.SelectedRows.Count > 1 Then
    '            For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
    '                If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
    '                    setMark = True
    '                    Exit For
    '                End If
    '            Next
    '        End If

    '        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
    '            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '                Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMark", DbType.Boolean, 0, "mark")
    '                Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idShow")
    '                Dim parSeason As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parSeason", DbType.Int64, 0, "Season")
    '                SQLcommand.CommandText = "UPDATE seasons SET mark = (?) WHERE idShow = (?) AND Season = (?);"
    '                For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
    '                    parMark.Value = If(dgvTVSeasons.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("Mark").Value))
    '                    parID.Value = sRow.Cells("idShow").Value
    '                    parSeason.Value = sRow.Cells("Season").Value
    '                    SQLcommand.ExecuteNonQuery()
    '                    sRow.Cells("Mark").Value = parMark.Value

    '                    Using SQLECommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '                        Dim parEMark As SQLite.SQLiteParameter = SQLECommand.Parameters.Add("parEMark", DbType.Boolean, 0, "mark")
    '                        Dim parEID As SQLite.SQLiteParameter = SQLECommand.Parameters.Add("parEID", DbType.Int64, 0, "idShow")
    '                        Dim parESeason As SQLite.SQLiteParameter = SQLECommand.Parameters.Add("parESeason", DbType.Int64, 0, "Season")
    '                        SQLECommand.CommandText = "UPDATE episode SET mark = (?) WHERE idShow = (?) AND Season = (?);"
    '                        parEMark.Value = parMark.Value
    '                        parEID.Value = parID.Value
    '                        parESeason.Value = parSeason.Value
    '                        SQLECommand.ExecuteNonQuery()

    '                        For Each eRow As DataGridViewRow In dgvTVEpisodes.Rows
    '                            eRow.Cells("Mark").Value = parMark.Value
    '                        Next
    '                    End Using
    '                Next
    '            End Using
    '            SQLtransaction.Commit()
    '        End Using

    '        dgvTVSeasons.Invalidate()
    '        dgvTVEpisodes.Invalidate()

    '    Catch ex As Exception
    '        logger.Error(ex, New StackFrame().GetMethod().Name)
    '    End Try
    'End Sub

    'Private Sub cmnuShowMark_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmnuShowMark.Click, cmnuShowUnmark.Click
    '    Try
    '        Dim setMark As Boolean = False
    '        If dgvTVShows.SelectedRows.Count > 1 Then
    '            For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
    '                'if any one item is set as unmarked, set menu to mark
    '                'else they are all marked, so set menu to unmark
    '                If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
    '                    setMark = True
    '                    Exit For
    '                End If
    '            Next
    '        End If

    '        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
    '            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '                Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMark", DbType.Boolean, 0, "mark")
    '                Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idShow")
    '                SQLcommand.CommandText = "UPDATE tvshow SET mark = (?) WHERE idShow = (?);"
    '                For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
    '                    parMark.Value = If(dgvTVShows.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("Mark").Value))
    '                    parID.Value = sRow.Cells("idShow").Value
    '                    SQLcommand.ExecuteNonQuery()
    '                    sRow.Cells("Mark").Value = parMark.Value

    '                    Using SQLSeaCommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '                        Dim parSeaMark As SQLite.SQLiteParameter = SQLSeaCommand.Parameters.Add("parSeaMark", DbType.Boolean, 0, "mark")
    '                        Dim parSeaID As SQLite.SQLiteParameter = SQLSeaCommand.Parameters.Add("parSeaID", DbType.Int64, 0, "idShow")
    '                        SQLSeaCommand.CommandText = "UPDATE seasons SET mark = (?) WHERE idShow = (?);"
    '                        parSeaMark.Value = parMark.Value
    '                        parSeaID.Value = parID.Value
    '                        SQLSeaCommand.ExecuteNonQuery()

    '                        For Each eRow As DataGridViewRow In dgvTVSeasons.Rows
    '                            eRow.Cells("Mark").Value = parMark.Value
    '                        Next
    '                    End Using

    '                    Using SQLECommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '                        Dim parEMark As SQLite.SQLiteParameter = SQLECommand.Parameters.Add("parEMark", DbType.Boolean, 0, "mark")
    '                        Dim parEID As SQLite.SQLiteParameter = SQLECommand.Parameters.Add("parEID", DbType.Int64, 0, "idShow")
    '                        SQLECommand.CommandText = "UPDATE episode SET mark = (?) WHERE idShow = (?);"
    '                        parEMark.Value = parMark.Value
    '                        parEID.Value = parID.Value
    '                        SQLECommand.ExecuteNonQuery()

    '                        For Each eRow As DataGridViewRow In dgvTVEpisodes.Rows
    '                            eRow.Cells("Mark").Value = parMark.Value
    '                        Next
    '                    End Using
    '                Next
    '            End Using
    '            SQLtransaction.Commit()
    '        End Using

    '        If chkFilterMark_Shows.Checked Then
    '            dgvTVShows.ClearSelection()
    '            dgvTVShows.CurrentCell = Nothing
    '            If dgvTVShows.RowCount <= 0 Then
    '                ClearInfo()
    '                dgvTVSeasons.DataSource = Nothing
    '                dgvTVEpisodes.DataSource = Nothing
    '            End If
    '        End If

    '        dgvTVShows.Invalidate()
    '        dgvTVSeasons.Invalidate()
    '        dgvTVEpisodes.Invalidate()

    '    Catch ex As Exception
    '        logger.Error(ex, New StackFrame().GetMethod().Name)
    '    End Try
    'End Sub

    'Private Sub cmnuMovieMark_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmnuMovieMark.Click
    '    Dim setMark As Boolean = False
    '    If dgvMovies.SelectedRows.Count > 1 Then
    '        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
    '            'if any one item is set as unmarked, set menu to mark
    '            'else they are all marked, so set menu to unmark
    '            If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
    '                setMark = True
    '                Exit For
    '            End If
    '        Next
    '    End If

    '    Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
    '        Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '            Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMark", DbType.Boolean, 0, "Mark")
    '            Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idMovie")
    '            SQLcommand.CommandText = "UPDATE movie SET Mark = (?) WHERE idMovie = (?);"
    '            For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
    '                parMark.Value = If(dgvMovies.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("Mark").Value))
    '                parID.Value = sRow.Cells("idMovie").Value
    '                SQLcommand.ExecuteNonQuery()
    '                sRow.Cells("Mark").Value = parMark.Value
    '            Next
    '        End Using
    '        SQLtransaction.Commit()
    '    End Using

    '    setMark = False
    '    For Each sRow As DataGridViewRow In dgvMovies.Rows
    '        If Convert.ToBoolean(sRow.Cells("Mark").Value) Then
    '            setMark = True
    '            Exit For
    '        End If
    '    Next
    '    btnMarkAll.Text = If(setMark, Master.eLang.GetString(105, "Unmark All"), Master.eLang.GetString(35, "Mark All"))

    '    If chkFilterMark_Movies.Checked Then
    '        dgvMovies.ClearSelection()
    '        dgvMovies.CurrentCell = Nothing
    '        If dgvMovies.RowCount <= 0 Then ClearInfo()
    '    End If

    '    dgvMovies.Invalidate()
    'End Sub

    'Private Sub cmnuMovieSetMark_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmnuMovieSetMark.Click, cmnuMovieSetUnmark.Click
    '    Dim setMark As Boolean = False
    '    If dgvMovieSets.SelectedRows.Count > 1 Then
    '        For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
    '            'if any one item is set as unmarked, set menu to mark
    '            'else they are all marked, so set menu to unmark
    '            If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
    '                setMark = True
    '                Exit For
    '            End If
    '        Next
    '    End If

    '    Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
    '        Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
    '            Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMark", DbType.Boolean, 0, "Mark")
    '            Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idSet")
    '            SQLcommand.CommandText = "UPDATE sets SET Mark = (?) WHERE idSet = (?);"
    '            For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
    '                parMark.Value = If(dgvMovieSets.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("Mark").Value))
    '                parID.Value = sRow.Cells("idSet").Value
    '                SQLcommand.ExecuteNonQuery()
    '                sRow.Cells("Mark").Value = parMark.Value
    '            Next
    '        End Using
    '        SQLtransaction.Commit()
    '    End Using

    '    setMark = False
    '    For Each sRow As DataGridViewRow In dgvMovieSets.Rows
    '        If Convert.ToBoolean(sRow.Cells("Mark").Value) Then
    '            setMark = True
    '            Exit For
    '        End If
    '    Next
    '    'Me.btnMarkAll.Text = If(setMark, Master.eLang.GetString(105, "Unmark All"), Master.eLang.GetString(35, "Mark All"))

    '    If chkFilterMark_MovieSets.Checked Then
    '        dgvMovieSets.ClearSelection()
    '        dgvMovieSets.CurrentCell = Nothing
    '        If dgvMovieSets.RowCount <= 0 Then ClearInfo()
    '    End If

    '    dgvMovieSets.Invalidate()
    'End Sub

    Private Sub cmnuMovieMarkAsCustom1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieMarkAsCustom1.Click
        Dim setMark As Boolean = False
        If dgvMovies.SelectedRows.Count > 1 Then
            For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                'if any one item is set as unmarked, set menu to mark
                'else they are all marked, so set menu to unmark
                If Not Convert.ToBoolean(sRow.Cells("MarkCustom1").Value) Then
                    setMark = True
                    Exit For
                End If
            Next
        End If

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
                Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMarkCustom1", DbType.Boolean, 0, "MarkCustom1")
                Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idMovie")
                SQLcommand.CommandText = "UPDATE movie SET MarkCustom1 = (?) WHERE idMovie = (?);"
                For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                    parMark.Value = If(dgvMovies.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("MarkCustom1").Value))
                    parID.Value = sRow.Cells("idMovie").Value
                    SQLcommand.ExecuteNonQuery()
                    sRow.Cells("MarkCustom1").Value = parMark.Value
                Next
            End Using
            SQLtransaction.Commit()
        End Using

        'setMark = False
        'For Each sRow As DataGridViewRow In Me.dgvMovies.Rows
        '    If Convert.ToBoolean(sRow.Cells(66).Value) Then
        '        setMark = True
        '        Exit For
        '    End If
        'Next
        'Me.btnMarkAll.Text = If(setMark, Master.eLang.GetString(105, "Unmark All"), Master.eLang.GetString(35, "Mark All"))

        If chkFilterMarkCustom1_Movies.Checked Then
            dgvMovies.ClearSelection()
            dgvMovies.CurrentCell = Nothing
            If dgvMovies.RowCount <= 0 Then InfoScreen_Clear()
        End If

        dgvMovies.Invalidate()
    End Sub

    Private Sub cmnuMovieMarkAsCustom2_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieMarkAsCustom2.Click
        Dim setMark As Boolean = False
        If dgvMovies.SelectedRows.Count > 1 Then
            For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                'if any one item is set as unmarked, set menu to mark
                'else they are all marked, so set menu to unmark
                If Not Convert.ToBoolean(sRow.Cells("MarkCustom2").Value) Then
                    setMark = True
                    Exit For
                End If
            Next
        End If

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
                Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMarkCustom2", DbType.Boolean, 0, "MarkCustom2")
                Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idMovie")
                SQLcommand.CommandText = "UPDATE movie SET MarkCustom2 = (?) WHERE idMovie = (?);"
                For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                    parMark.Value = If(dgvMovies.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("MarkCustom2").Value))
                    parID.Value = sRow.Cells("idMovie").Value
                    SQLcommand.ExecuteNonQuery()
                    sRow.Cells("MarkCustom2").Value = parMark.Value
                Next
            End Using
            SQLtransaction.Commit()
        End Using

        'setMark = False
        'For Each sRow As DataGridViewRow In Me.dgvMovies.Rows
        '    If Convert.ToBoolean(sRow.Cells(66).Value) Then
        '        setMark = True
        '        Exit For
        '    End If
        'Next
        'Me.btnMarkAll.Text = If(setMark, Master.eLang.GetString(105, "Unmark All"), Master.eLang.GetString(35, "Mark All"))

        If chkFilterMarkCustom2_Movies.Checked Then
            dgvMovies.ClearSelection()
            dgvMovies.CurrentCell = Nothing
            If dgvMovies.RowCount <= 0 Then InfoScreen_Clear()
        End If

        dgvMovies.Invalidate()
    End Sub

    Private Sub cmnuMovieMarkAsCustom3_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieMarkAsCustom3.Click
        Dim setMark As Boolean = False
        If dgvMovies.SelectedRows.Count > 1 Then
            For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                'if any one item is set as unmarked, set menu to mark
                'else they are all marked, so set menu to unmark
                If Not Convert.ToBoolean(sRow.Cells("MarkCustom3").Value) Then
                    setMark = True
                    Exit For
                End If
            Next
        End If

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
                Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMarkCustom3", DbType.Boolean, 0, "MarkCustom3")
                Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idMovie")
                SQLcommand.CommandText = "UPDATE movie SET MarkCustom3 = (?) WHERE idMovie = (?);"
                For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                    parMark.Value = If(dgvMovies.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("MarkCustom3").Value))
                    parID.Value = sRow.Cells("idMovie").Value
                    SQLcommand.ExecuteNonQuery()
                    sRow.Cells("MarkCustom3").Value = parMark.Value
                Next
            End Using
            SQLtransaction.Commit()
        End Using

        'setMark = False
        'For Each sRow As DataGridViewRow In Me.dgvMovies.Rows
        '    If Convert.ToBoolean(sRow.Cells(66).Value) Then
        '        setMark = True
        '        Exit For
        '    End If
        'Next
        'Me.btnMarkAll.Text = If(setMark, Master.eLang.GetString(105, "Unmark All"), Master.eLang.GetString(35, "Mark All"))

        If chkFilterMarkCustom3_Movies.Checked Then
            dgvMovies.ClearSelection()
            dgvMovies.CurrentCell = Nothing
            If dgvMovies.RowCount <= 0 Then InfoScreen_Clear()
        End If

        dgvMovies.Invalidate()
    End Sub

    Private Sub cmnuMovieMarkAsCustom4_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieMarkAsCustom4.Click
        Dim setMark As Boolean = False
        If dgvMovies.SelectedRows.Count > 1 Then
            For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                'if any one item is set as unmarked, set menu to mark
                'else they are all marked, so set menu to unmark
                If Not Convert.ToBoolean(sRow.Cells("MarkCustom4").Value) Then
                    setMark = True
                    Exit For
                End If
            Next
        End If

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            Using SQLcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
                Dim parMark As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parMarkCustom4", DbType.Boolean, 0, "MarkCustom4")
                Dim parID As SQLite.SQLiteParameter = SQLcommand.Parameters.Add("parID", DbType.Int64, 0, "idMovie")
                SQLcommand.CommandText = "UPDATE movie SET MarkCustom4 = (?) WHERE idMovie = (?);"
                For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                    parMark.Value = If(dgvMovies.SelectedRows.Count > 1, setMark, Not Convert.ToBoolean(sRow.Cells("MarkCustom4").Value))
                    parID.Value = sRow.Cells("idMovie").Value
                    SQLcommand.ExecuteNonQuery()
                    sRow.Cells("MarkCustom4").Value = parMark.Value
                Next
            End Using
            SQLtransaction.Commit()
        End Using

        'setMark = False
        'For Each sRow As DataGridViewRow In Me.dgvMovies.Rows
        '    If Convert.ToBoolean(sRow.Cells(66).Value) Then
        '        setMark = True
        '        Exit For
        '    End If
        'Next
        'Me.btnMarkAll.Text = If(setMark, Master.eLang.GetString(105, "Unmark All"), Master.eLang.GetString(35, "Mark All"))

        If chkFilterMarkCustom4_Movies.Checked Then
            dgvMovies.ClearSelection()
            dgvMovies.CurrentCell = Nothing
            If dgvMovies.RowCount <= 0 Then InfoScreen_Clear()
        End If

        dgvMovies.Invalidate()
    End Sub

    Private Sub cmnuMovieEditMetaData_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieEditMetaData.Click
        If dgvMovies.SelectedRows.Count > 1 Then Return
        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
        Dim DBElement As Database.DBElement = Master.DB.Load_Movie(ID)
        Using dFileInfo As New dlgFileInfo(DBElement.MainDetails.FileInfo)
            If dFileInfo.ShowDialog() = DialogResult.OK Then
                DBElement.MainDetails.FileInfo = dFileInfo.Result
                Master.DB.Save_Movie(DBElement, False, True, False, True, False)
                DataGridView_Row_Update_Movie(ID)
            End If
        End Using
    End Sub

    Private Sub cmnuMovieReload_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieReload.Click
        dgvMovies.Cursor = Cursors.WaitCursor
        SetControlsEnabled(False, True)

        Dim doFill As Boolean = False

        Dim showMessages As Boolean = dgvMovies.SelectedRows.Count = 1

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                If ReloadContent_Movie(Convert.ToInt64(sRow.Cells("idMovie").Value), True, showMessages) Then
                    doFill = True
                Else
                    DataGridView_Row_Update_Movie(Convert.ToInt64(sRow.Cells("idMovie").Value))
                End If
            Next
            SQLtransaction.Commit()
        End Using

        dgvMovies.Cursor = Cursors.Default
        SetControlsEnabled(True)

        If doFill Then
            DataGridView_FillList_Main(True, True, False)
        Else
            DoTitleCheck()
        End If
    End Sub

    Private Sub cmnuMovieSetEdit_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetEdit.Click
        If dgvMovieSets.SelectedRows.Count > 1 Then Return

        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
        Dim tmpDBMovieSet As Database.DBElement = Master.DB.Load_Movieset(ID)
        Edit_MovieSet(tmpDBMovieSet)
    End Sub

    Private Sub cmnuMovieSetNew_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetNew.Click
        dgvMovieSets.ClearSelection()
        InfoScreen_Clear()

        Dim tmpDBMovieSet = New Database.DBElement(Enums.ContentType.Movieset) With {.MainDetails = New MediaContainers.MainDetails}

        Using dNewSet As New dlgNewSet()
            If dNewSet.ShowDialog(tmpDBMovieSet) = DialogResult.OK Then
                tmpDBMovieSet = Master.DB.Save_Movieset(dNewSet.Result, False, False, False, False, False)
                Dim iNewRowIndex = DataGridView_Row_Add_Movieset(tmpDBMovieSet.ID)
                If Not iNewRowIndex = -1 Then
                    dgvMovieSets.Rows(iNewRowIndex).Selected = True
                End If
                Edit_MovieSet(tmpDBMovieSet)
            End If
        End Using

    End Sub

    Private Sub cmnuMovieSetReload_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetReload.Click
        dgvMovieSets.Cursor = Cursors.WaitCursor
        SetControlsEnabled(False, True)

        Dim doFill As Boolean = False

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
                If ReloadContent_Movieset(Convert.ToInt64(sRow.Cells("idSet").Value), True) Then
                    doFill = True
                Else
                    DataGridView_Row_Update_Movieset(Convert.ToInt64(sRow.Cells("idSet").Value))
                End If
            Next
            SQLtransaction.Commit()
        End Using

        dgvMovieSets.Cursor = Cursors.Default
        SetControlsEnabled(True)

        If doFill Then DataGridView_FillList_Main(False, True, False)
    End Sub

    Private Sub cmnuMovieSetRemove_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetRemove.Click
        Dim lItemsToRemove As New List(Of Long)
        InfoScreen_Clear()

        For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
            lItemsToRemove.Add(Convert.ToInt64(sRow.Cells("idSet").Value))
        Next

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each tID As Long In lItemsToRemove
                Master.DB.Delete_MovieSet(tID, True)
                DataGridView_Row_Remove_Movieset(tID)
            Next
            SQLtransaction.Commit()
        End Using

        DataGridView_FillList_Main(True, False, False)
    End Sub

    Private Sub cmnuEpisodeReload_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeReload.Click
        dgvTVShows.Cursor = Cursors.WaitCursor
        dgvTVSeasons.Cursor = Cursors.WaitCursor
        dgvTVEpisodes.Cursor = Cursors.WaitCursor
        SetControlsEnabled(False, True)

        Dim doFill As Boolean = False

        If dgvTVEpisodes.SelectedRows.Count > 0 Then
            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                    If Not Convert.ToInt64(sRow.Cells("idFile").Value) = -1 Then 'skipping missing episodes
                        If ReloadContent_TVEpisode(Convert.ToInt64(sRow.Cells("idEpisode").Value), True, dgvTVEpisodes.SelectedRows.Count = 1) Then
                            doFill = True
                        Else
                            DataGridView_Row_Update_TVEpisode(Convert.ToInt64(sRow.Cells("idEpisode").Value))
                        End If
                    End If
                Next
                SQLtransaction.Commit()
            End Using
        End If

        dgvTVShows.Cursor = Cursors.Default
        dgvTVSeasons.Cursor = Cursors.Default
        dgvTVEpisodes.Cursor = Cursors.Default
        SetControlsEnabled(True)

        If doFill Then DataGridView_FillList_TVEpisode(Convert.ToInt64(dgvTVEpisodes.SelectedRows(0).Cells("idEpisode").Value), Convert.ToInt32(dgvTVEpisodes.SelectedRows(0).Cells("Season").Value))
    End Sub

    Private Sub cmnuSeasonReload_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonReload.Click
        dgvTVShows.Cursor = Cursors.WaitCursor
        dgvTVSeasons.Cursor = Cursors.WaitCursor
        dgvTVEpisodes.Cursor = Cursors.WaitCursor
        SetControlsEnabled(False, True)

        Dim doFill As Boolean = False

        If dgvTVSeasons.SelectedRows.Count > 0 Then
            tspbLoading.Style = ProgressBarStyle.Continuous
            tspbLoading.Value = 0
            tspbLoading.Maximum = dgvTVSeasons.SelectedRows.Count

            tslLoading.Text = String.Concat(Master.eLang.GetString(563, "Reloading Season"), ":")
            tslLoading.Visible = True
            tspbLoading.Visible = True
            Application.DoEvents()

            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                    tspbLoading.Value += 1
                    If ReloadContent_TVSeason(Convert.ToInt64(sRow.Cells("idSeason").Value), True, dgvTVSeasons.SelectedRows.Count = 1, False) Then
                        doFill = True
                    Else
                        DataGridView_Row_Update_TVSeason(Convert.ToInt64(sRow.Cells("idSeason").Value))
                    End If
                Next
                SQLtransaction.Commit()
            End Using

            tslLoading.Visible = False
            tspbLoading.Visible = False
        End If

        dgvTVShows.Cursor = Cursors.Default
        dgvTVSeasons.Cursor = Cursors.Default
        dgvTVEpisodes.Cursor = Cursors.Default
        SetControlsEnabled(True)

        If doFill Then DataGridView_FillList_TVSeason(Convert.ToInt64(dgvTVSeasons.SelectedRows(0).Cells("idShow").Value))
    End Sub

    Private Sub cmnuSeasonReloadFull_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonReloadFull.Click
        dgvTVShows.Cursor = Cursors.WaitCursor
        dgvTVSeasons.Cursor = Cursors.WaitCursor
        dgvTVEpisodes.Cursor = Cursors.WaitCursor
        SetControlsEnabled(False, True)

        Dim doFill As Boolean = False

        If dgvTVSeasons.SelectedRows.Count > 0 Then
            tspbLoading.Style = ProgressBarStyle.Continuous
            tspbLoading.Value = 0
            tspbLoading.Maximum = dgvTVSeasons.SelectedRows.Count

            tslLoading.Text = String.Concat(Master.eLang.GetString(563, "Reloading Season"), ":")
            tslLoading.Visible = True
            tspbLoading.Visible = True
            Application.DoEvents()

            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                    tspbLoading.Value += 1
                    If ReloadContent_TVSeason(Convert.ToInt64(sRow.Cells("idSeason").Value), True, dgvTVSeasons.SelectedRows.Count = 1, False) Then
                        doFill = True
                    Else
                        DataGridView_Row_Update_TVSeason(Convert.ToInt64(sRow.Cells("idSeason").Value))
                    End If
                Next
                SQLtransaction.Commit()
            End Using

            tslLoading.Visible = False
            tspbLoading.Visible = False
        End If

        dgvTVShows.Cursor = Cursors.Default
        dgvTVSeasons.Cursor = Cursors.Default
        dgvTVEpisodes.Cursor = Cursors.Default
        SetControlsEnabled(True)

        If doFill Then DataGridView_FillList_TVSeason(Convert.ToInt64(dgvTVSeasons.SelectedRows(0).Cells("idShow").Value))
    End Sub

    Private Sub cmnuShowReload_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowReload.Click
        dgvTVShows.Cursor = Cursors.WaitCursor
        dgvTVSeasons.Cursor = Cursors.WaitCursor
        dgvTVEpisodes.Cursor = Cursors.WaitCursor
        SetControlsEnabled(False, True)

        Dim doFill As Boolean = False

        If dgvTVShows.SelectedRows.Count > 1 Then
            tspbLoading.Style = ProgressBarStyle.Continuous
            tspbLoading.Value = 0
            tspbLoading.Maximum = dgvTVShows.SelectedRows.Count

            tslLoading.Text = String.Concat(Master.eLang.GetString(562, "Reloading Show"), ":")
            tslLoading.Visible = True
            tspbLoading.Visible = True
            Application.DoEvents()

            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                    tspbLoading.Value += 1
                    If ReloadContent_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value), True, dgvTVShows.SelectedRows.Count = 1, False) Then
                        doFill = True
                    Else
                        DataGridView_Row_Update_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value))
                    End If
                Next
                SQLtransaction.Commit()
            End Using

            tslLoading.Visible = False
            tspbLoading.Visible = False
        ElseIf dgvTVShows.SelectedRows.Count = 1 Then
            If ReloadContent_TVShow(Convert.ToInt64(dgvTVShows.SelectedRows(0).Cells("idShow").Value), False, True, False) Then
                doFill = True
            Else
                DataGridView_Row_Update_TVShow(Convert.ToInt64(dgvTVShows.SelectedRows(0).Cells("idShow").Value))
            End If
        End If

        dgvTVShows.Cursor = Cursors.Default
        dgvTVSeasons.Cursor = Cursors.Default
        dgvTVEpisodes.Cursor = Cursors.Default
        SetControlsEnabled(True)

        If doFill Then DataGridView_FillList_Main(False, False, True)
    End Sub

    Private Sub cmnuShowReloadFull_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowReloadFull.Click
        dgvTVShows.Cursor = Cursors.WaitCursor
        dgvTVSeasons.Cursor = Cursors.WaitCursor
        dgvTVEpisodes.Cursor = Cursors.WaitCursor
        SetControlsEnabled(False, True)

        Dim doFill As Boolean = False

        If dgvTVShows.SelectedRows.Count > 1 Then
            tspbLoading.Style = ProgressBarStyle.Continuous
            tspbLoading.Value = 0
            tspbLoading.Maximum = dgvTVShows.SelectedRows.Count

            tslLoading.Text = String.Concat(Master.eLang.GetString(562, "Reloading Show"), ":")
            tslLoading.Visible = True
            tspbLoading.Visible = True
            Application.DoEvents()

            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                    tspbLoading.Value += 1
                    If ReloadContent_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value), True, dgvTVShows.SelectedRows.Count = 1, True) Then
                        doFill = True
                    Else
                        DataGridView_Row_Update_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value))
                    End If
                Next
                SQLtransaction.Commit()
            End Using

            tslLoading.Visible = False
            tspbLoading.Visible = False
        ElseIf dgvTVShows.SelectedRows.Count = 1 Then
            If ReloadContent_TVShow(Convert.ToInt64(dgvTVShows.SelectedRows(0).Cells("idShow").Value), False, True, True) Then
                doFill = True
            Else
                DataGridView_Row_Update_TVShow(Convert.ToInt64(dgvTVShows.SelectedRows(0).Cells("idShow").Value))
            End If
        End If

        dgvTVShows.Cursor = Cursors.Default
        dgvTVSeasons.Cursor = Cursors.Default
        dgvTVEpisodes.Cursor = Cursors.Default
        SetControlsEnabled(True)

        If doFill Then DataGridView_FillList_Main(False, False, True)
    End Sub

    Private Sub cmnuSeasonRemoveFromDB_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonRemoveFromDB.Click
        Dim lItemsToRemove As New List(Of Long)
        InfoScreen_Clear()

        For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
            lItemsToRemove.Add(Convert.ToInt64(sRow.Cells("idSeason").Value))
        Next

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            Dim idShow As Integer = CInt(dgvTVSeasons.SelectedRows(0).Cells("idShow").Value)
            For Each tID As Long In lItemsToRemove
                If Not tID = -1 Then
                    Master.DB.Delete_TVSeason(tID, True)
                    DataGridView_Row_Remove_TVSeason(tID)
                End If
            Next
            ReloadContent_TVShow(idShow, True, True, False) 'TODO: check if needed
            SQLtransaction.Commit()
        End Using

        MainTab_SetCount_TV()
    End Sub

    Private Sub cmnuEpisodeRemoveFromDB_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeRemoveFromDB.Click
        Dim lItemsToRemove As New Dictionary(Of Long, Boolean)
        Dim SeasonsList As New List(Of Integer)
        InfoScreen_Clear()

        For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
            If Not SeasonsList.Contains(CInt(sRow.Cells("Season").Value)) Then SeasonsList.Add(CInt(sRow.Cells("Season").Value))
            lItemsToRemove.Add(Convert.ToInt64(sRow.Cells("idEpisode").Value), Convert.ToInt64(sRow.Cells("idFile").Value) = -1)
        Next

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            Dim idShow As Integer = CInt(dgvTVEpisodes.SelectedRows(0).Cells("idShow").Value)
            For Each tID As KeyValuePair(Of Long, Boolean) In lItemsToRemove
                If tID.Value Then
                    Master.DB.Delete_TVEpisode(tID.Key, True, False, True) 'remove the "missing episode" from DB
                    DataGridView_Row_Remove_TVEpisode(tID.Key)
                Else
                    If Master.DB.Delete_TVEpisode(tID.Key, False, False, True) Then 'set the episode as "missing episode"
                        DataGridView_Row_Remove_TVEpisode(tID.Key)
                    Else
                        DataGridView_Row_Update_TVEpisode(tID.Key)
                    End If
                End If
            Next

            For Each iSeason In SeasonsList
                DataGridView_Row_Update_TVSeason(idShow, iSeason)
            Next
            DataGridView_Row_Update_TVShow(idShow)

            SQLtransaction.Commit()
        End Using

        MainTab_SetCount_TV()
    End Sub

    Private Sub cmnuShowRemoveFromDB_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowRemoveFromDB.Click
        Dim lItemsToRemove As New List(Of Long)
        InfoScreen_Clear()

        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
            lItemsToRemove.Add(Convert.ToInt64(sRow.Cells("idShow").Value))
        Next

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each tID As Long In lItemsToRemove
                Master.DB.Delete_TVShow(tID, True)
                DataGridView_Row_Remove_TVShow(tID)
            Next
            SQLtransaction.Commit()
        End Using

        MainTab_SetCount_TV()
    End Sub

    Private Sub cmnuEpisodeRescrape_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuEpisodeScrape.Click
        If dgvTVEpisodes.SelectedRows.Count = 1 Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
            Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Manually, Master.DefaultOptions_TV, ScrapeModifiers, Enums.ContentType.TVEpisode)
        End If
    End Sub

    Private Sub cmnuMovieRescrape_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieScrape.Click
        If dgvMovies.SelectedRows.Count = 1 Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
            Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Manually, Master.DefaultOptions_Movie, ScrapeModifiers, Enums.ContentType.Movie)
        End If
    End Sub

    Private Sub cmnuMovieSetRescrape_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetScrape.Click
        If dgvMovieSets.SelectedRows.Count = 1 Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
            Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Manually, Master.DefaultOptions_Movieset, ScrapeModifiers, Enums.ContentType.Movieset)
        End If
    End Sub

    Private Sub cmnuShowRescrape_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuShowScrape.Click
        If dgvTVShows.SelectedRows.Count > 0 Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.withEpisodes, True)
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.withSeasons, True)
            Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Manually, Master.DefaultOptions_TV, ScrapeModifiers, Enums.ContentType.TVShow)
        End If
    End Sub
    ''' <summary>
    ''' User has selected "Change Movie" from the context menu. This will re-validate the movie title with the user,
    ''' and initiate a new manually scrape of the movie.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub cmnuMovieChange_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieChange.Click
        If dgvMovies.SelectedRows.Count <> 1 Then Return 'This method is only valid for when exactly one movie is selected
        Dim ScrapeModifiers As New Structures.ScrapeModifiers
        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.DoSearch, True)
        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
        Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Change, Master.DefaultOptions_Movie, ScrapeModifiers, Enums.ContentType.Movie)
    End Sub
    ''' <summary>
    ''' User has selected "Change Movie" from the context menu. This will re-validate the movie title with the user,
    ''' and initiate a new auto scrape of the movie.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub cmnuMovieChangeAuto_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieChangeAuto.Click
        If dgvMovies.SelectedRows.Count <> 1 Then Return 'This method is only valid for when exactly one movie is selected
        Dim ScrapeModifiers As New Structures.ScrapeModifiers
        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.DoSearch, True)
        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
        Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.SemiManually, Master.DefaultOptions_Movie, ScrapeModifiers, Enums.ContentType.Movie)
    End Sub

    Private Sub cmnuSeasonEdit_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonEdit.Click
        Dim indX As Integer = dgvTVSeasons.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvTVSeasons.Item("idSeason", indX).Value)
        Dim tmpDBTVSeason As Database.DBElement = Master.DB.Load_TVSeason(ID, True, False)
        Edit_TVSeason(tmpDBTVSeason)
    End Sub

    Private Sub cmnuSeasonOpenFolder_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonOpenFolder.Click
        If dgvTVSeasons.SelectedRows.Count > 0 Then
            Dim doOpen As Boolean = True
            Dim SeasonPath As String = String.Empty

            If dgvTVSeasons.SelectedRows.Count > 10 Then
                If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVSeasons.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
            End If

            If doOpen Then
                For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                    SeasonPath = Functions.GetSeasonDirectoryFromShowPath(currTV.ShowPath, Convert.ToInt32(sRow.Cells("Season").Value))

                    Using Explorer As New Process
                        Explorer.StartInfo.FileName = "explorer.exe"
                        If String.IsNullOrEmpty(SeasonPath) Then
                            Explorer.StartInfo.Arguments = String.Format("/root,""{0}""", currTV.ShowPath)
                        Else
                            Explorer.StartInfo.Arguments = String.Format("/select,""{0}""", SeasonPath)
                        End If
                        Explorer.Start()
                    End Using
                Next
            End If
        End If
    End Sub

    Private Sub cmnuSeasonRescrape_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuSeasonScrape.Click
        If dgvTVSeasons.SelectedRows.Count > 0 Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
            Scraper_CreateList(Enums.SelectionType.Selected, Enums.ScrapeType.Manually, Master.DefaultOptions_TV, ScrapeModifiers, Enums.ContentType.TVSeason)
        End If
    End Sub

    Private Sub mnuMainToolsSortFiles_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsSortFiles.Click, cmnuTrayToolsSortFiles.Click
        SetControlsEnabled(False)
        Using dSortFiles As New dlgSortFiles
            dSortFiles.ShowDialog()
            SetControlsEnabled(True)
        End Using
    End Sub

    Private Sub mnuMainToolsBackdrops_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsBackdrops.Click, cmnuTrayToolsBackdrops.Click
        fTaskManager.AddTask(New TaskManager.TaskItem(TaskManager.TaskItem.TaskType.CopyBackdrops) With {.ContentType = Enums.ContentType.Movie})
    End Sub

    Private Sub cmnuMovieRemoveFromDisk_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieRemoveFromDisk.Click
        Dim lstMovieID As New List(Of Long)

        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
            Dim lngID As Long = Convert.ToInt64(sRow.Cells("idMovie").Value)
            If Not lstMovieID.Contains(lngID) Then lstMovieID.Add(lngID)
        Next

        If lstMovieID.Count > 0 Then
            Using dlg As New dlgDeleteConfirm
                If dlg.ShowDialog(lstMovieID, Enums.ContentType.Movie) = DialogResult.OK Then
                    DataGridView_FillList_Main(True, True, False)
                End If
            End Using
        End If
    End Sub

    Private Sub Database_Clean(ByVal Clean As Scanner.ScanOrCleanOptions)
        SetControlsEnabled(False, True)
        tspbLoading.Style = ProgressBarStyle.Marquee
        Filter_Enable_Movie(False)
        Filter_Enable_Movieset(False)
        Filter_Enable_TVShow(False)

        SetStatus(Master.eLang.GetString(644, "Cleaning Database..."))
        tspbLoading.Visible = True

        bwCleanDB.WorkerSupportsCancellation = True
        bwCleanDB.RunWorkerAsync(Clean)
    End Sub

    Private Sub Database_Clean_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwCleanDB.DoWork
        Dim Args = DirectCast(e.Argument, Scanner.ScanOrCleanOptions)
        Master.DB.Clean(Args.Movies, Args.Moviesets, Args.TV)
    End Sub

    Private Sub Database_Clean_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwCleanDB.RunWorkerCompleted
        SetStatus(String.Empty)
        tspbLoading.Visible = False

        DataGridView_FillList_Main(True, True, True)
    End Sub

    Private Function DataGridView_CheckColumnHide_Movie(ByVal ColumnName As String) As Boolean
        Dim lsColumn As Settings.ListSorting = Master.eSettings.MovieGeneralMediaListSorting.FirstOrDefault(Function(l) l.Column = ColumnName)
        Return If(lsColumn Is Nothing, True, lsColumn.Hide)
    End Function

    Private Function DataGridView_CheckColumnHide_Movieset(ByVal ColumnName As String) As Boolean
        Dim lsColumn As Settings.ListSorting = Master.eSettings.MovieSetGeneralMediaListSorting.FirstOrDefault(Function(l) l.Column = ColumnName)
        Return If(lsColumn Is Nothing, True, lsColumn.Hide)
    End Function

    Private Function DataGridView_CheckColumnHide_TVEpisode(ByVal ColumnName As String) As Boolean
        Dim lsColumn As Settings.ListSorting = Master.eSettings.TVGeneralEpisodeListSorting.FirstOrDefault(Function(l) l.Column = ColumnName)
        Return If(lsColumn Is Nothing, True, lsColumn.Hide)
    End Function

    Private Function DataGridView_CheckColumnHide_TVSeason(ByVal ColumnName As String) As Boolean
        Dim lsColumn As Settings.ListSorting = Master.eSettings.TVGeneralSeasonListSorting.FirstOrDefault(Function(l) l.Column = ColumnName)
        Return If(lsColumn Is Nothing, True, lsColumn.Hide)
    End Function

    Private Function DataGridView_CheckColumnHide_TVShow(ByVal ColumnName As String) As Boolean
        Dim lsColumn As Settings.ListSorting = Master.eSettings.TVGeneralShowListSorting.FirstOrDefault(Function(l) l.Column = ColumnName)
        Return If(lsColumn Is Nothing, True, lsColumn.Hide)
    End Function

    Private Function DataGridView_ColumnAnyInfoValue(ByVal dgView As DataGridView, ByVal row As Integer) As Boolean
        If dgView IsNot Nothing AndAlso row >= 0 Then
            Return _
                DataGridView_ColumnHasValue(dgView, "BannerPath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "CharacterArtPath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "ClearArtPath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "ClearLogoPath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "DiscArtPath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "FanartPath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "KeyartPath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "LandscapePath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "NfoPath", row) OrElse
                DataGridView_ColumnHasValue(dgView, "PosterPath", row)
        End If
        Return False
    End Function

    Private Function DataGridView_ColumnExists(ByVal dgView As DataGridView, ByVal columnName As String) As Boolean
        If dgView IsNot Nothing AndAlso Not String.IsNullOrEmpty(columnName) Then
            Return dgView.Columns.Contains(columnName)
        End If
        Return False
    End Function

    Private Function DataGridView_ColumnHasValue(ByVal dgView As DataGridView, ByVal columnName As String, ByVal row As Integer) As Boolean
        If dgView IsNot Nothing AndAlso Not String.IsNullOrEmpty(columnName) AndAlso row >= 0 Then
            Return DataGridView_ColumnExists(dgView, columnName) AndAlso Not String.IsNullOrEmpty(dgView.Item(columnName, row).Value.ToString)
        End If
        Return False
    End Function

    Sub DataGridView_Datatable_Row_Add(ByVal dTable As DataTable, ByVal dRow As DataRow)
        dTable.Rows.Add(dRow)
    End Sub

    Sub DataGridView_Datatable_Row_Remove(ByVal dTable As DataTable, ByVal dRow As DataRow)
        dTable.Rows.Remove(dRow)
    End Sub

    Sub DataGridView_Datatable_Row_Update(ByVal dRow As DataRow, ByVal newRow As DataRow)
        dRow.ItemArray = newRow.ItemArray
    End Sub
    ''' <summary>
    ''' Reloads the DB and refresh the lists
    ''' </summary>
    ''' <param name="doMovies">reload movies</param>
    ''' <param name="doMovieSets">reload moviesets</param>
    ''' <param name="doTVShows">reload tv shows</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_FillList_Main(ByVal doMovies As Boolean, ByVal doMovieSets As Boolean, ByVal doTVShows As Boolean)
        If doMovies Then
            bsMovies.DataSource = Nothing
            dgvMovies.DataSource = Nothing

            If Not String.IsNullOrEmpty(filSearch_Movies) AndAlso cbSearchMovies.Text = Master.eLang.GetString(100, "Actor") Then
                Master.DB.FillDataTable_Movie(dtMovies, String.Concat("SELECT DISTINCT '", currList_Movies, "'.* FROM actors ",
                                                                      "LEFT OUTER JOIN actorlinkmovie ON (actors.idActor = actorlinkmovie.idActor) ",
                                                                      "INNER JOIN '", currList_Movies, "' ON (actorlinkmovie.idMovie = '", currList_Movies, "'.idMovie) ",
                                                                      "WHERE actors.strActor LIKE '%", filSearch_Movies, "%' ",
                                                                      "COLLATE NOCASE;"))
            ElseIf Not String.IsNullOrEmpty(filSearch_Movies) AndAlso cbSearchMovies.Text = Master.eLang.GetString(233, "Role") Then
                Master.DB.FillDataTable_Movie(dtMovies, String.Concat("SELECT DISTINCT '", currList_Movies, "'.* FROM actorlinkmovie ",
                                                                      "INNER JOIN '", currList_Movies, "' ON (actorlinkmovie.idMovie = '", currList_Movies, "'.idMovie) ",
                                                                      "WHERE actorlinkmovie.strRole LIKE '%", filSearch_Movies, "%' ",
                                                                      "COLLATE NOCASE;"))
            Else
                If chkFilterDuplicates_Movies.Checked Then
                    Master.DB.FillDataTable_Movie(dtMovies, String.Concat("SELECT * FROM '", currList_Movies, "' ",
                                                                          "WHERE imdb IN (SELECT imdb FROM '", currList_Movies, "' WHERE imdb IS NOT NULL AND LENGTH(imdb) > 0 GROUP BY imdb HAVING ( COUNT(imdb) > 1 )) ",
                                                                          "COLLATE NOCASE;"))
                Else
                    Master.DB.FillDataTable_Movie(dtMovies, String.Concat("SELECT * FROM '", currList_Movies, "';"))
                End If
            End If
        End If

        If doMovieSets Then
            bsMovieSets.DataSource = Nothing
            dgvMovieSets.DataSource = Nothing
            Master.DB.FillDataTable_Movieset(dtMovieSets, String.Concat("SELECT * FROM '", currList_Moviesets, "';"))
        End If

        If doTVShows Then
            bsTVShows.DataSource = Nothing
            dgvTVShows.DataSource = Nothing
            bsTVSeasons.DataSource = Nothing
            dgvTVSeasons.DataSource = Nothing
            bsTVEpisodes.DataSource = Nothing
            dgvTVEpisodes.DataSource = Nothing
            Master.DB.FillDataTable_TVShow(dtTVShows, String.Concat("SELECT * FROM '", currList_TVShows, "';"))
        End If


        If Master.isCL Then
            LoadingDone = True
        Else
            If doMovies Then
                prevRow_Movie = -2
                bsMovies.DataSource = dtMovies
                dgvMovies.DataSource = bsMovies

                Try
                    If Master.eSettings.MovieGeneralMediaListSorting.Count > 0 Then
                        For Each mColumn In Master.eSettings.MovieGeneralMediaListSorting
                            Dim colname = mColumn.Column.ToString
                            If dgvMovies.Columns.Contains(colname) Then
                                dgvMovies.Columns(colname).DisplayIndex = mColumn.DisplayIndex
                            Else
                                logger.Warn("Column {0} not found in database columns", colname)
                            End If

                        Next
                    End If
                Catch ex As Exception
                    logger.Warn("default list for movie list sorting has been loaded")
                    Master.eSettings.SetDefaultsForLists(Enums.DefaultType.ListSorting_Movie, True)
                    If Master.eSettings.MovieGeneralMediaListSorting.Count > 0 Then
                        For Each mColumn In Master.eSettings.MovieGeneralMediaListSorting
                            dgvMovies.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                        Next
                    End If
                End Try

                For i As Integer = 0 To dgvMovies.Columns.Count - 1
                    dgvMovies.Columns(i).Visible = False
                Next

                'dgvMovies.Columns("BannerPath").Width = 20
                'dgvMovies.Columns("BannerPath").Resizable = DataGridViewTriState.False
                'dgvMovies.Columns("BannerPath").ReadOnly = True
                'dgvMovies.Columns("BannerPath").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvMovies.Columns("BannerPath").Visible = Not DataGridView_CheckColumnHide_Movie("BannerPath")
                'dgvMovies.Columns("BannerPath").ToolTipText = Master.eLang.GetString(838, "Banner")
                dgvMovies.Columns("ClearArtPath").Width = 20
                dgvMovies.Columns("ClearArtPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("ClearArtPath").ReadOnly = True
                dgvMovies.Columns("ClearArtPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("ClearArtPath").Visible = Not DataGridView_CheckColumnHide_Movie("ClearArtPath")
                dgvMovies.Columns("ClearArtPath").ToolTipText = Master.eLang.GetString(1096, "ClearArt")
                dgvMovies.Columns("ClearLogoPath").Width = 20
                dgvMovies.Columns("ClearLogoPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("ClearLogoPath").ReadOnly = True
                dgvMovies.Columns("ClearLogoPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("ClearLogoPath").Visible = Not DataGridView_CheckColumnHide_Movie("ClearLogoPath")
                dgvMovies.Columns("ClearLogoPath").ToolTipText = Master.eLang.GetString(1097, "ClearLogo")
                dgvMovies.Columns("Certification").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Certification").MinimumWidth = 45
                dgvMovies.Columns("Certification").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Certification").ReadOnly = True
                dgvMovies.Columns("Certification").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Certification").Visible = Not DataGridView_CheckColumnHide_Movie("Certification")
                dgvMovies.Columns("Certification").ToolTipText = Master.eLang.GetString(722, "Certification")
                dgvMovies.Columns("Certification").HeaderText = Master.eLang.GetString(722, "Certification")
                dgvMovies.Columns("Credits").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Credits").MinimumWidth = 30
                dgvMovies.Columns("Credits").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Credits").ReadOnly = True
                dgvMovies.Columns("Credits").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Credits").Visible = Not DataGridView_CheckColumnHide_Movie("Credits")
                dgvMovies.Columns("Credits").ToolTipText = Master.eLang.GetString(729, "Credits")
                dgvMovies.Columns("Country").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Country").MinimumWidth = 45
                dgvMovies.Columns("Country").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Country").ReadOnly = True
                dgvMovies.Columns("Country").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Country").Visible = Not DataGridView_CheckColumnHide_Movie("Country")
                dgvMovies.Columns("Country").ToolTipText = Master.eLang.GetString(301, "Country")
                dgvMovies.Columns("Country").HeaderText = Master.eLang.GetString(301, "Country")
                dgvMovies.Columns("Director").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Director").MinimumWidth = 45
                dgvMovies.Columns("Director").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Director").ReadOnly = True
                dgvMovies.Columns("Director").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Director").Visible = Not DataGridView_CheckColumnHide_Movie("Director")
                dgvMovies.Columns("Director").ToolTipText = Master.eLang.GetString(62, "Director")
                dgvMovies.Columns("Director").HeaderText = Master.eLang.GetString(62, "Director")
                dgvMovies.Columns("DiscArtPath").Width = 20
                dgvMovies.Columns("DiscArtPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("DiscArtPath").ReadOnly = True
                dgvMovies.Columns("DiscArtPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("DiscArtPath").Visible = Not DataGridView_CheckColumnHide_Movie("DiscArtPath")
                dgvMovies.Columns("DiscArtPath").ToolTipText = Master.eLang.GetString(1098, "DiscArt")
                'dgvMovies.Columns("edition").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvMovies.Columns("edition").Resizable = DataGridViewTriState.False
                'dgvMovies.Columns("edition").ReadOnly = True
                'dgvMovies.Columns("edition").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvMovies.Columns("edition").Visible = Not DataGridView_CheckColumnHide_Movie("edition")
                'dgvMovies.Columns("edition").ToolTipText = Master.eLang.GetString(308, "Edition")
                'dgvMovies.Columns("edition").HeaderText = Master.eLang.GetString(308, "Edition")
                dgvMovies.Columns("EFanartsPath").Width = 20
                dgvMovies.Columns("EFanartsPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("EFanartsPath").ReadOnly = True
                dgvMovies.Columns("EFanartsPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("EFanartsPath").Visible = Not DataGridView_CheckColumnHide_Movie("EFanartsPath")
                dgvMovies.Columns("EFanartsPath").ToolTipText = Master.eLang.GetString(992, "Extrafanarts")
                dgvMovies.Columns("EThumbsPath").Width = 20
                dgvMovies.Columns("EThumbsPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("EThumbsPath").ReadOnly = True
                dgvMovies.Columns("EThumbsPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("EThumbsPath").Visible = Not DataGridView_CheckColumnHide_Movie("EThumbsPath")
                dgvMovies.Columns("EThumbsPath").ToolTipText = Master.eLang.GetString(153, "Extrathumbs")
                dgvMovies.Columns("FanartPath").Width = 20
                dgvMovies.Columns("FanartPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("FanartPath").ReadOnly = True
                dgvMovies.Columns("FanartPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_Movie("FanartPath")
                dgvMovies.Columns("FanartPath").ToolTipText = Master.eLang.GetString(149, "Fanart")
                dgvMovies.Columns("Genre").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Genre").MinimumWidth = 45
                dgvMovies.Columns("Genre").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Genre").ReadOnly = True
                dgvMovies.Columns("Genre").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Genre").Visible = Not DataGridView_CheckColumnHide_Movie("Genre")
                dgvMovies.Columns("Genre").ToolTipText = Master.eLang.GetString(20, "Genre")
                dgvMovies.Columns("Genre").HeaderText = Master.eLang.GetString(20, "Genre")
                dgvMovies.Columns("HasSet").Width = 20
                dgvMovies.Columns("HasSet").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("HasSet").ReadOnly = True
                dgvMovies.Columns("HasSet").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("HasSet").Visible = Not DataGridView_CheckColumnHide_Movie("HasSet")
                dgvMovies.Columns("HasSet").ToolTipText = Master.eLang.GetString(1295, "Part of a MovieSet")
                dgvMovies.Columns("HasSub").Width = 20
                dgvMovies.Columns("HasSub").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("HasSub").ReadOnly = True
                dgvMovies.Columns("HasSub").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("HasSub").Visible = Not DataGridView_CheckColumnHide_Movie("HasSub")
                dgvMovies.Columns("HasSub").ToolTipText = Master.eLang.GetString(152, "Subtitles")
                dgvMovies.Columns("LastPlayed").Width = 20
                dgvMovies.Columns("LastPlayed").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("LastPlayed").ReadOnly = True
                dgvMovies.Columns("LastPlayed").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("LastPlayed").Visible = Not DataGridView_CheckColumnHide_Movie("iLastPlayed")
                dgvMovies.Columns("LastPlayed").ToolTipText = Master.eLang.GetString(981, "Watched")
                'dgvMovies.Columns("Imdb").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvMovies.Columns("Imdb").MinimumWidth = 45
                'dgvMovies.Columns("Imdb").Resizable = DataGridViewTriState.False
                'dgvMovies.Columns("Imdb").ReadOnly = True
                'dgvMovies.Columns("Imdb").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvMovies.Columns("Imdb").Visible = Not DataGridView_CheckColumnHide_Movie("Imdb")
                'dgvMovies.Columns("Imdb").ToolTipText = "IMDb ID"
                'dgvMovies.Columns("Imdb").HeaderText = "IMDb"
                'dgvMovies.Columns("KeyartPath").Width = 20
                'dgvMovies.Columns("KeyartPath").Resizable = DataGridViewTriState.False
                'dgvMovies.Columns("KeyartPath").ReadOnly = True
                'dgvMovies.Columns("KeyartPath").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvMovies.Columns("KeyartPath").Visible = Not DataGridView_CheckColumnHide_Movie("KeyartPath")
                'dgvMovies.Columns("KeyartPath").ToolTipText = Master.eLang.GetString(1237, "Keyart")
                'dgvMovies.Columns("LandscapePath").Width = 20
                'dgvMovies.Columns("LandscapePath").Resizable = DataGridViewTriState.False
                'dgvMovies.Columns("LandscapePath").ReadOnly = True
                'dgvMovies.Columns("LandscapePath").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvMovies.Columns("LandscapePath").Visible = Not DataGridView_CheckColumnHide_Movie("LandscapePath")
                'dgvMovies.Columns("LandscapePath").ToolTipText = Master.eLang.GetString(1035, "Landscape")
                dgvMovies.Columns("Language").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Language").MinimumWidth = 45
                dgvMovies.Columns("Language").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Language").ReadOnly = True
                dgvMovies.Columns("Language").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Language").Visible = Not DataGridView_CheckColumnHide_Movie("Language")
                dgvMovies.Columns("Language").ToolTipText = Master.eLang.GetString(610, "Language")
                dgvMovies.Columns("Language").HeaderText = Master.eLang.GetString(610, "Language")
                dgvMovies.Columns("ListTitle").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("ListTitle").ReadOnly = True
                dgvMovies.Columns("ListTitle").MinimumWidth = 83
                dgvMovies.Columns("ListTitle").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("ListTitle").Visible = True
                dgvMovies.Columns("ListTitle").ToolTipText = Master.eLang.GetString(21, "Title")
                dgvMovies.Columns("ListTitle").HeaderText = Master.eLang.GetString(21, "Title")
                dgvMovies.Columns("MPAA").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("MPAA").MinimumWidth = 45
                dgvMovies.Columns("MPAA").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("MPAA").ReadOnly = True
                dgvMovies.Columns("MPAA").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("MPAA").Visible = Not DataGridView_CheckColumnHide_Movie("MPAA")
                dgvMovies.Columns("MPAA").ToolTipText = Master.eLang.GetString(401, "MPAA")
                dgvMovies.Columns("MPAA").HeaderText = Master.eLang.GetString(401, "MPAA")
                dgvMovies.Columns("NfoPath").Width = 20
                dgvMovies.Columns("NfoPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("NfoPath").ReadOnly = True
                dgvMovies.Columns("NfoPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("NfoPath").Visible = Not DataGridView_CheckColumnHide_Movie("NfoPath")
                dgvMovies.Columns("NfoPath").ToolTipText = Master.eLang.GetString(150, "Nfo")
                dgvMovies.Columns("OriginalTitle").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("OriginalTitle").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("OriginalTitle").ReadOnly = True
                dgvMovies.Columns("OriginalTitle").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("OriginalTitle").Visible = Not DataGridView_CheckColumnHide_Movie("OriginalTitle")
                dgvMovies.Columns("OriginalTitle").ToolTipText = Master.eLang.GetString(302, "Original Title")
                dgvMovies.Columns("OriginalTitle").HeaderText = Master.eLang.GetString(302, "Original Title")
                dgvMovies.Columns("PosterPath").Width = 20
                dgvMovies.Columns("PosterPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("PosterPath").ReadOnly = True
                dgvMovies.Columns("PosterPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_Movie("PosterPath")
                dgvMovies.Columns("PosterPath").ToolTipText = Master.eLang.GetString(148, "Poster")
                dgvMovies.Columns("userRating").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCellsExceptHeader
                dgvMovies.Columns("userRating").MinimumWidth = 30
                dgvMovies.Columns("userRating").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("userRating").ReadOnly = True
                dgvMovies.Columns("userRating").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("userRating").Visible = Not DataGridView_CheckColumnHide_Movie("Rating")
                dgvMovies.Columns("userRating").ToolTipText = Master.eLang.GetString(245, "Rating")
                dgvMovies.Columns("premiered").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("premiered").MinimumWidth = 30
                dgvMovies.Columns("premiered").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("premiered").ReadOnly = True
                dgvMovies.Columns("premiered").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("premiered").Visible = Not DataGridView_CheckColumnHide_Movie("premiered")
                dgvMovies.Columns("premiered").ToolTipText = Master.eLang.GetString(724, "remiered")
                dgvMovies.Columns("Runtime").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Runtime").MinimumWidth = 45
                dgvMovies.Columns("Runtime").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Runtime").ReadOnly = True
                dgvMovies.Columns("Runtime").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Runtime").Visible = Not DataGridView_CheckColumnHide_Movie("Runtime")
                dgvMovies.Columns("Runtime").ToolTipText = Master.eLang.GetString(238, "Runtime")
                dgvMovies.Columns("Runtime").HeaderText = Master.eLang.GetString(238, "Runtime")
                dgvMovies.Columns("Studio").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Studio").MinimumWidth = 45
                dgvMovies.Columns("Studio").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Studio").ReadOnly = True
                dgvMovies.Columns("Studio").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Studio").Visible = Not DataGridView_CheckColumnHide_Movie("Studio")
                dgvMovies.Columns("Studio").ToolTipText = Master.eLang.GetString(395, "Studio")
                dgvMovies.Columns("Studio").HeaderText = Master.eLang.GetString(395, "Studio")
                dgvMovies.Columns("ThemePath").Width = 20
                dgvMovies.Columns("ThemePath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("ThemePath").ReadOnly = True
                dgvMovies.Columns("ThemePath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("ThemePath").Visible = Not DataGridView_CheckColumnHide_Movie("ThemePath")
                dgvMovies.Columns("ThemePath").ToolTipText = Master.eLang.GetString(1118, "Theme")
                'dgvMovies.Columns("TMDB").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvMovies.Columns("TMDB").MinimumWidth = 45
                'dgvMovies.Columns("TMDB").Resizable = DataGridViewTriState.False
                'dgvMovies.Columns("TMDB").ReadOnly = True
                'dgvMovies.Columns("TMDB").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvMovies.Columns("TMDB").Visible = Not DataGridView_CheckColumnHide_Movie("TMDB")
                'dgvMovies.Columns("TMDB").ToolTipText = "TMDb ID"
                'dgvMovies.Columns("TMDB").HeaderText = "TMDb"
                dgvMovies.Columns("Top250").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Top250").MinimumWidth = 35
                dgvMovies.Columns("Top250").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Top250").ReadOnly = True
                dgvMovies.Columns("Top250").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Top250").Visible = Not DataGridView_CheckColumnHide_Movie("Top250")
                dgvMovies.Columns("Top250").ToolTipText = Master.eLang.GetString(591, "Top 250")
                dgvMovies.Columns("Top250").HeaderText = "250"
                dgvMovies.Columns("TrailerPath").Width = 20
                dgvMovies.Columns("TrailerPath").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("TrailerPath").ReadOnly = True
                dgvMovies.Columns("TrailerPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("TrailerPath").Visible = Not DataGridView_CheckColumnHide_Movie("TrailerPath")
                dgvMovies.Columns("TrailerPath").ToolTipText = Master.eLang.GetString(151, "Trailer")
                'dgvMovies.Columns("iUserRating").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCellsExceptHeader
                'dgvMovies.Columns("iUserRating").MinimumWidth = 30
                'dgvMovies.Columns("iUserRating").Resizable = DataGridViewTriState.False
                'dgvMovies.Columns("iUserRating").ReadOnly = True
                'dgvMovies.Columns("iUserRating").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvMovies.Columns("iUserRating").Visible = Not DataGridView_CheckColumnHide_Movie("iUserRating")
                'dgvMovies.Columns("iUserRating").ToolTipText = Master.eLang.GetString(1467, "User Rating")
                dgvMovies.Columns("VideoSource").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("VideoSource").MinimumWidth = 30
                dgvMovies.Columns("VideoSource").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("VideoSource").ReadOnly = True
                dgvMovies.Columns("VideoSource").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("VideoSource").Visible = Not DataGridView_CheckColumnHide_Movie("VideoSource")
                dgvMovies.Columns("VideoSource").ToolTipText = Master.eLang.GetString(824, "Video Source")
                dgvMovies.Columns("Premiered").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovies.Columns("Premiered").Resizable = DataGridViewTriState.False
                dgvMovies.Columns("Premiered").ReadOnly = True
                dgvMovies.Columns("Premiered").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovies.Columns("Premiered").Visible = Not DataGridView_CheckColumnHide_Movie("Year")
                dgvMovies.Columns("Premiered").ToolTipText = Master.eLang.GetString(278, "Year")
                dgvMovies.Columns("Premiered").HeaderText = Master.eLang.GetString(278, "Year")

                dgvMovies.Columns("idMovie").ValueType = GetType(Long)

                dgvMovies.Columns("ListTitle").AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill
            End If

            If doMovieSets Then
                prevRow_MovieSet = -2
                dgvMovieSets.Enabled = False
                bsMovieSets.DataSource = dtMovieSets
                dgvMovieSets.DataSource = bsMovieSets

                Try
                    If Master.eSettings.MovieSetGeneralMediaListSorting.Count > 0 Then
                        For Each mColumn In Master.eSettings.MovieSetGeneralMediaListSorting
                            If dgvMovieSets.Columns.Contains(mColumn.Column.ToString) Then
                                dgvMovieSets.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                            Else
                                MessageBox.Show(mColumn.Column.ToString + " column does not exist in database") 'annoy the developer until it is fixed
                            End If
                        Next
                    End If
                Catch ex As Exception
                    logger.Warn("default list for movieset list sorting has been loaded")
                    Master.eSettings.SetDefaultsForLists(Enums.DefaultType.ListSorting_Movieset, True)
                    If Master.eSettings.MovieSetGeneralMediaListSorting.Count > 0 Then
                        For Each mColumn In Master.eSettings.MovieSetGeneralMediaListSorting
                            dgvMovieSets.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                        Next
                    End If
                End Try

                For i As Integer = 0 To dgvMovieSets.Columns.Count - 1
                    dgvMovieSets.Columns(i).Visible = False
                Next

                dgvMovieSets.Columns("BannerPath").Width = 20
                dgvMovieSets.Columns("BannerPath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("BannerPath").ReadOnly = True
                dgvMovieSets.Columns("BannerPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("BannerPath").Visible = Not DataGridView_CheckColumnHide_Movieset("BannerPath")
                dgvMovieSets.Columns("BannerPath").ToolTipText = Master.eLang.GetString(838, "Banner")
                dgvMovieSets.Columns("ClearArtPath").Width = 20
                dgvMovieSets.Columns("ClearArtPath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("ClearArtPath").ReadOnly = True
                dgvMovieSets.Columns("ClearArtPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("ClearArtPath").Visible = Not DataGridView_CheckColumnHide_Movieset("ClearArtPath")
                dgvMovieSets.Columns("ClearArtPath").ToolTipText = Master.eLang.GetString(1096, "ClearArt")
                dgvMovieSets.Columns("ClearLogoPath").Width = 20
                dgvMovieSets.Columns("ClearLogoPath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("ClearLogoPath").ReadOnly = True
                dgvMovieSets.Columns("ClearLogoPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("ClearLogoPath").Visible = Not DataGridView_CheckColumnHide_Movieset("ClearLogoPath")
                dgvMovieSets.Columns("ClearLogoPath").ToolTipText = Master.eLang.GetString(1097, "ClearLogo")
                dgvMovieSets.Columns("DiscArtPath").Width = 20
                dgvMovieSets.Columns("DiscArtPath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("DiscArtPath").ReadOnly = True
                dgvMovieSets.Columns("DiscArtPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("DiscArtPath").Visible = Not DataGridView_CheckColumnHide_Movieset("DiscArtPath")
                dgvMovieSets.Columns("DiscArtPath").ToolTipText = Master.eLang.GetString(1098, "DiscArt")
                dgvMovieSets.Columns("FanartPath").Width = 20
                dgvMovieSets.Columns("FanartPath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("FanartPath").ReadOnly = True
                dgvMovieSets.Columns("FanartPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_Movieset("FanartPath")
                dgvMovieSets.Columns("FanartPath").ToolTipText = Master.eLang.GetString(149, "Fanart")
                dgvMovieSets.Columns("KeyartPath").Width = 20
                dgvMovieSets.Columns("KeyartPath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("KeyartPath").ReadOnly = True
                dgvMovieSets.Columns("KeyartPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("KeyartPath").Visible = Not DataGridView_CheckColumnHide_Movieset("KeyartPath")
                dgvMovieSets.Columns("KeyartPath").ToolTipText = Master.eLang.GetString(1237, "Keyart")
                dgvMovieSets.Columns("LandscapePath").Width = 20
                dgvMovieSets.Columns("LandscapePath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("LandscapePath").ReadOnly = True
                dgvMovieSets.Columns("LandscapePath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("LandscapePath").Visible = Not DataGridView_CheckColumnHide_Movieset("LandscapePath")
                dgvMovieSets.Columns("LandscapePath").ToolTipText = Master.eLang.GetString(1035, "Landscape")
                dgvMovieSets.Columns("Language").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvMovieSets.Columns("Language").MinimumWidth = 45
                dgvMovieSets.Columns("Language").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("Language").ReadOnly = True
                dgvMovieSets.Columns("Language").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("Language").Visible = Not DataGridView_CheckColumnHide_Movieset("Language")
                dgvMovieSets.Columns("Language").ToolTipText = Master.eLang.GetString(610, "Language")
                dgvMovieSets.Columns("Language").HeaderText = Master.eLang.GetString(610, "Language")
                dgvMovieSets.Columns("ListTitle").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("ListTitle").ReadOnly = True
                dgvMovieSets.Columns("ListTitle").MinimumWidth = 83
                dgvMovieSets.Columns("ListTitle").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("ListTitle").Visible = True
                dgvMovieSets.Columns("ListTitle").ToolTipText = Master.eLang.GetString(21, "Title")
                dgvMovieSets.Columns("ListTitle").HeaderText = Master.eLang.GetString(21, "Title")
                dgvMovieSets.Columns("NfoPath").Width = 20
                dgvMovieSets.Columns("NfoPath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("NfoPath").ReadOnly = True
                dgvMovieSets.Columns("NfoPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("NfoPath").Visible = Not DataGridView_CheckColumnHide_Movieset("NfoPath")
                dgvMovieSets.Columns("NfoPath").ToolTipText = Master.eLang.GetString(150, "Nfo")
                dgvMovieSets.Columns("PosterPath").Width = 20
                dgvMovieSets.Columns("PosterPath").Resizable = DataGridViewTriState.False
                dgvMovieSets.Columns("PosterPath").ReadOnly = True
                dgvMovieSets.Columns("PosterPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvMovieSets.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_Movieset("PosterPath")
                dgvMovieSets.Columns("PosterPath").ToolTipText = Master.eLang.GetString(148, "Poster")
                'dgvMovieSets.Columns("TMDBColID").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvMovieSets.Columns("TMDBColID").MinimumWidth = 45
                'dgvMovieSets.Columns("TMDBColID").Resizable = DataGridViewTriState.False
                'dgvMovieSets.Columns("TMDBColID").ReadOnly = True
                'dgvMovieSets.Columns("TMDBColID").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvMovieSets.Columns("TMDBColID").Visible = Not DataGridView_CheckColumnHide_Movieset("TMDBColID")
                'dgvMovieSets.Columns("TMDBColID").ToolTipText = Master.eLang.GetString(1135, "Collection ID")
                'dgvMovieSets.Columns("TMDBColID").HeaderText = "TMDb"

                dgvMovieSets.Columns("idSet").ValueType = GetType(Long)

                dgvMovieSets.Columns("ListTitle").AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill

                dgvMovieSets.Enabled = True
            End If

            If doTVShows Then
                currList = 0
                prevRow_TVEpisode = -2
                prevRow_TVSeason = -2
                prevRow_TVShow = -2
                dgvTVShows.Enabled = False
                bsTVShows.DataSource = dtTVShows
                dgvTVShows.DataSource = bsTVShows

                Try
                    If Master.eSettings.TVGeneralShowListSorting.Count > 0 Then
                        For Each mColumn In Master.eSettings.TVGeneralShowListSorting

                            If dgvTVShows.Columns.Contains(mColumn.Column.ToString) Then
                                dgvTVShows.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                            Else
                                MessageBox.Show(mColumn.Column.ToString + " column does not exist in database") 'annoy the developer until it is fixed
                            End If
                        Next
                    End If
                Catch ex As Exception
                    logger.Warn("default list for tv show list sorting has been loaded")
                    Master.eSettings.SetDefaultsForLists(Enums.DefaultType.ListSorting_TVShow, True)
                    If Master.eSettings.TVGeneralShowListSorting.Count > 0 Then
                        For Each mColumn In Master.eSettings.TVGeneralShowListSorting
                            dgvTVShows.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                        Next
                    End If
                End Try

                For i As Integer = 0 To dgvTVShows.Columns.Count - 1
                    dgvTVShows.Columns(i).Visible = False
                Next

                dgvTVShows.Columns("BannerPath").Width = 20
                dgvTVShows.Columns("BannerPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("BannerPath").ReadOnly = True
                dgvTVShows.Columns("BannerPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("BannerPath").Visible = Not DataGridView_CheckColumnHide_TVShow("BannerPath")
                dgvTVShows.Columns("BannerPath").ToolTipText = Master.eLang.GetString(838, "Banner")
                dgvTVShows.Columns("CharacterArtPath").Width = 20
                dgvTVShows.Columns("CharacterArtPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("CharacterArtPath").ReadOnly = True
                dgvTVShows.Columns("CharacterArtPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("CharacterArtPath").Visible = Not DataGridView_CheckColumnHide_TVShow("CharacterArtPath")
                dgvTVShows.Columns("CharacterArtPath").ToolTipText = Master.eLang.GetString(1140, "CharacterArt")
                dgvTVShows.Columns("ClearArtPath").Width = 20
                dgvTVShows.Columns("ClearArtPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("ClearArtPath").ReadOnly = True
                dgvTVShows.Columns("ClearArtPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("ClearArtPath").Visible = Not DataGridView_CheckColumnHide_TVShow("ClearArtPath")
                dgvTVShows.Columns("ClearArtPath").ToolTipText = Master.eLang.GetString(1096, "ClearArt")
                dgvTVShows.Columns("ClearLogoPath").Width = 20
                dgvTVShows.Columns("ClearLogoPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("ClearLogoPath").ReadOnly = True
                dgvTVShows.Columns("ClearLogoPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("ClearLogoPath").Visible = Not DataGridView_CheckColumnHide_TVShow("ClearLogoPath")
                dgvTVShows.Columns("ClearLogoPath").ToolTipText = Master.eLang.GetString(1097, "ClearLogo")
                dgvTVShows.Columns("Country").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvTVShows.Columns("Country").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Country").ReadOnly = True
                dgvTVShows.Columns("Country").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Country").Visible = Not DataGridView_CheckColumnHide_TVShow("Country")
                dgvTVShows.Columns("Country").ToolTipText = Master.eLang.GetString(301, "Country")
                dgvTVShows.Columns("Country").HeaderText = Master.eLang.GetString(301, "Country")
                dgvTVShows.Columns("Creator").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvTVShows.Columns("Creator").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Creator").ReadOnly = True
                dgvTVShows.Columns("Creator").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Creator").Visible = Not DataGridView_CheckColumnHide_TVShow("Creator")
                dgvTVShows.Columns("Creator").ToolTipText = Master.eLang.GetString(744, "Creators")
                dgvTVShows.Columns("Creator").HeaderText = Master.eLang.GetString(744, "Creators")
                'dgvTVShows.Columns("Director").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvTVShows.Columns("Director").Resizable = DataGridViewTriState.False
                'dgvTVShows.Columns("Director").ReadOnly = True
                'dgvTVShows.Columns("Director").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvTVShows.Columns("Director").Visible = Not DataGridView_CheckColumnHide_TVShow("Director")
                'dgvTVShows.Columns("Director").ToolTipText = Master.eLang.GetString(62, "Director")
                'dgvTVShows.Columns("Director").HeaderText = Master.eLang.GetString(62, "Director")
                dgvTVShows.Columns("EFanartsPath").Width = 20
                dgvTVShows.Columns("EFanartsPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("EFanartsPath").ReadOnly = True
                dgvTVShows.Columns("EFanartsPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("EFanartsPath").Visible = Not DataGridView_CheckColumnHide_TVShow("EFanartsPath")
                dgvTVShows.Columns("EFanartsPath").ToolTipText = Master.eLang.GetString(992, "Extrafanarts")
                dgvTVShows.Columns("Episodes").AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader
                dgvTVShows.Columns("Episodes").MinimumWidth = 30
                dgvTVShows.Columns("Episodes").DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight
                dgvTVShows.Columns("Episodes").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Episodes").ReadOnly = True
                dgvTVShows.Columns("Episodes").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Episodes").Visible = Not DataGridView_CheckColumnHide_TVShow("Episodes")
                dgvTVShows.Columns("Episodes").ToolTipText = Master.eLang.GetString(682, "Episodes")
                dgvTVShows.Columns("Episodes").HeaderText = String.Empty
                dgvTVShows.Columns("FanartPath").Width = 20
                dgvTVShows.Columns("FanartPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("FanartPath").ReadOnly = True
                dgvTVShows.Columns("FanartPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_TVShow("FanartPath")
                dgvTVShows.Columns("FanartPath").ToolTipText = Master.eLang.GetString(149, "Fanart")
                dgvTVShows.Columns("Genre").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvTVShows.Columns("Genre").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Genre").ReadOnly = True
                dgvTVShows.Columns("Genre").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Genre").Visible = Not DataGridView_CheckColumnHide_TVShow("Genre")
                dgvTVShows.Columns("Genre").ToolTipText = Master.eLang.GetString(20, "Genre")
                dgvTVShows.Columns("Genre").HeaderText = Master.eLang.GetString(20, "Genre")
                dgvTVShows.Columns("HasWatched").Width = 20
                dgvTVShows.Columns("HasWatched").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("HasWatched").ReadOnly = True
                dgvTVShows.Columns("HasWatched").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("HasWatched").Visible = Not DataGridView_CheckColumnHide_TVShow("HasWatched")
                dgvTVShows.Columns("HasWatched").ToolTipText = Master.eLang.GetString(981, "Watched")
                dgvTVShows.Columns("Language").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvTVShows.Columns("Language").MinimumWidth = 45
                dgvTVShows.Columns("Language").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Language").ReadOnly = True
                dgvTVShows.Columns("Language").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Language").Visible = Not DataGridView_CheckColumnHide_TVShow("Language")
                dgvTVShows.Columns("Language").ToolTipText = Master.eLang.GetString(610, "Language")
                dgvTVShows.Columns("Language").HeaderText = Master.eLang.GetString(610, "Language")
                dgvTVShows.Columns("KeyartPath").Width = 20
                dgvTVShows.Columns("KeyartPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("KeyartPath").ReadOnly = True
                dgvTVShows.Columns("KeyartPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("KeyartPath").Visible = Not DataGridView_CheckColumnHide_TVShow("KeyartPath")
                dgvTVShows.Columns("KeyartPath").ToolTipText = Master.eLang.GetString(1237, "Keyart")
                dgvTVShows.Columns("LandscapePath").Width = 20
                dgvTVShows.Columns("LandscapePath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("LandscapePath").ReadOnly = True
                dgvTVShows.Columns("LandscapePath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("LandscapePath").Visible = Not DataGridView_CheckColumnHide_TVShow("LandscapePath")
                dgvTVShows.Columns("LandscapePath").ToolTipText = Master.eLang.GetString(1035, "Landscape")
                dgvTVShows.Columns("ListTitle").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("ListTitle").ReadOnly = True
                dgvTVShows.Columns("ListTitle").MinimumWidth = 83
                dgvTVShows.Columns("ListTitle").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("ListTitle").Visible = True
                dgvTVShows.Columns("ListTitle").ToolTipText = Master.eLang.GetString(21, "Title")
                dgvTVShows.Columns("ListTitle").HeaderText = Master.eLang.GetString(21, "Title")
                dgvTVShows.Columns("MPAA").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCellsExceptHeader
                dgvTVShows.Columns("MPAA").MinimumWidth = 45
                dgvTVShows.Columns("MPAA").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("MPAA").ReadOnly = True
                dgvTVShows.Columns("MPAA").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("MPAA").Visible = Not DataGridView_CheckColumnHide_TVShow("MPAA")
                dgvTVShows.Columns("MPAA").ToolTipText = Master.eLang.GetString(401, "MPAA")
                dgvTVShows.Columns("MPAA").HeaderText = Master.eLang.GetString(401, "MPAA")
                dgvTVShows.Columns("NfoPath").Width = 20
                dgvTVShows.Columns("NfoPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("NfoPath").ReadOnly = True
                dgvTVShows.Columns("NfoPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("NfoPath").Visible = Not DataGridView_CheckColumnHide_TVShow("NfoPath")
                dgvTVShows.Columns("NfoPath").ToolTipText = Master.eLang.GetString(150, "Nfo")
                dgvTVShows.Columns("PosterPath").Width = 20
                dgvTVShows.Columns("PosterPath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("PosterPath").ReadOnly = True
                dgvTVShows.Columns("PosterPath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_TVShow("PosterPath")
                dgvTVShows.Columns("PosterPath").ToolTipText = Master.eLang.GetString(148, "Poster")
                dgvTVShows.Columns("Premiered").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvTVShows.Columns("Premiered").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Premiered").ReadOnly = True
                dgvTVShows.Columns("Premiered").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Premiered").Visible = Not DataGridView_CheckColumnHide_TVShow("Premiered")
                dgvTVShows.Columns("Premiered").ToolTipText = Master.eLang.GetString(724, "Premiered")
                dgvTVShows.Columns("Premiered").HeaderText = Master.eLang.GetString(724, "Premiered")
                'dgvTVShows.Columns("Rating").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCellsExceptHeader
                'dgvTVShows.Columns("Rating").MinimumWidth = 30
                'dgvTVShows.Columns("Rating").Resizable = DataGridViewTriState.False
                'dgvTVShows.Columns("Rating").ReadOnly = True
                'dgvTVShows.Columns("Rating").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvTVShows.Columns("Rating").Visible = Not DataGridView_CheckColumnHide_TVShow("Rating")
                'dgvTVShows.Columns("Rating").ToolTipText = Master.eLang.GetString(245, "Rating")
                dgvTVShows.Columns("Runtime").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvTVShows.Columns("Runtime").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Runtime").ReadOnly = True
                dgvTVShows.Columns("Runtime").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Runtime").Visible = Not DataGridView_CheckColumnHide_TVShow("Runtime")
                dgvTVShows.Columns("Runtime").ToolTipText = Master.eLang.GetString(238, "Runtime")
                dgvTVShows.Columns("Runtime").HeaderText = Master.eLang.GetString(238, "Runtime")
                dgvTVShows.Columns("Status").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvTVShows.Columns("Status").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Status").ReadOnly = True
                dgvTVShows.Columns("Status").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Status").Visible = Not DataGridView_CheckColumnHide_TVShow("Status")
                dgvTVShows.Columns("Status").ToolTipText = Master.eLang.GetString(215, "Status")
                dgvTVShows.Columns("Status").HeaderText = Master.eLang.GetString(215, "Status")
                'dgvTVShows.Columns("strIMDB").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvTVShows.Columns("strIMDB").Resizable = DataGridViewTriState.False
                'dgvTVShows.Columns("strIMDB").ReadOnly = True
                'dgvTVShows.Columns("strIMDB").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvTVShows.Columns("strIMDB").Visible = Not DataGridView_CheckColumnHide_TVShow("strIMDB")
                'dgvTVShows.Columns("strIMDB").ToolTipText = "IMDb ID"
                'dgvTVShows.Columns("strIMDB").HeaderText = "IMDb"
                'dgvTVShows.Columns("strOriginalTitle").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvTVShows.Columns("strOriginalTitle").Resizable = DataGridViewTriState.False
                'dgvTVShows.Columns("strOriginalTitle").ReadOnly = True
                'dgvTVShows.Columns("strOriginalTitle").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvTVShows.Columns("strOriginalTitle").Visible = Not DataGridView_CheckColumnHide_TVShow("strOriginalTitle")
                'dgvTVShows.Columns("strOriginalTitle").ToolTipText = Master.eLang.GetString(302, "Original Title")
                'dgvTVShows.Columns("strOriginalTitle").HeaderText = Master.eLang.GetString(302, "Original Title")
                'dgvTVShows.Columns("strTMDB").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvTVShows.Columns("strTMDB").Resizable = DataGridViewTriState.False
                'dgvTVShows.Columns("strTMDB").ReadOnly = True
                'dgvTVShows.Columns("strTMDB").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvTVShows.Columns("strTMDB").Visible = Not DataGridView_CheckColumnHide_TVShow("strTMDB")
                'dgvTVShows.Columns("strTMDB").ToolTipText = "TMDb ID"
                'dgvTVShows.Columns("strTMDB").HeaderText = "TMDb"
                dgvTVShows.Columns("Studio").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                dgvTVShows.Columns("Studio").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("Studio").ReadOnly = True
                dgvTVShows.Columns("Studio").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("Studio").Visible = Not DataGridView_CheckColumnHide_TVShow("Studio")
                dgvTVShows.Columns("Studio").ToolTipText = Master.eLang.GetString(395, "Studio")
                dgvTVShows.Columns("Studio").HeaderText = Master.eLang.GetString(395, "Studio")
                dgvTVShows.Columns("ThemePath").Width = 20
                dgvTVShows.Columns("ThemePath").Resizable = DataGridViewTriState.False
                dgvTVShows.Columns("ThemePath").ReadOnly = True
                dgvTVShows.Columns("ThemePath").SortMode = DataGridViewColumnSortMode.Automatic
                dgvTVShows.Columns("ThemePath").Visible = Not DataGridView_CheckColumnHide_TVShow("ThemePath")
                dgvTVShows.Columns("ThemePath").ToolTipText = Master.eLang.GetString(1118, "Theme")
                'dgvTVShows.Columns("TVDB").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
                'dgvTVShows.Columns("TVDB").Resizable = DataGridViewTriState.False
                'dgvTVShows.Columns("TVDB").ReadOnly = True
                'dgvTVShows.Columns("TVDB").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvTVShows.Columns("TVDB").Visible = Not DataGridView_CheckColumnHide_TVShow("TVDB")
                'dgvTVShows.Columns("TVDB").ToolTipText = "TVDb ID"
                'dgvTVShows.Columns("TVDB").HeaderText = "TVDb"
                'dgvTVShows.Columns("iUserRating").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCellsExceptHeader
                'dgvTVShows.Columns("iUserRating").MinimumWidth = 30
                'dgvTVShows.Columns("iUserRating").Resizable = DataGridViewTriState.False
                'dgvTVShows.Columns("iUserRating").ReadOnly = True
                'dgvTVShows.Columns("iUserRating").SortMode = DataGridViewColumnSortMode.Automatic
                'dgvTVShows.Columns("iUserRating").Visible = Not DataGridView_CheckColumnHide_TVShow("iUserRating")
                'dgvTVShows.Columns("iUserRating").ToolTipText = Master.eLang.GetString(1467, "User Rating")

                dgvTVShows.Columns("idShow").ValueType = GetType(Long)

                dgvTVShows.Columns("ListTitle").AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill

                dgvTVShows.Enabled = True
            End If

            If dgvMovies.RowCount > 0 OrElse dgvMovieSets.RowCount > 0 OrElse dgvTVShows.RowCount > 0 Then
                SetControlsEnabled(True)
            Else
                SetControlsEnabled(False, False, False)
                SetStatus(String.Empty)
                InfoScreen_Clear()
            End If
        End If

        If Not Master.isCL Then
            mnuUpdate.Enabled = True
            cmnuTrayExit.Enabled = True
            cmnuTraySettings.Enabled = True
            mnuMainEdit.Enabled = True
            cmnuTrayUpdate.Enabled = True
            mnuMainHelp.Enabled = True
            tslLoading.Visible = False
            tspbLoading.Visible = False
            tspbLoading.Value = 0
            tcMain.Enabled = True
            DoTitleCheck()
            Filter_Enable_Movie(True)
            Filter_Enable_Movieset(True)
            Filter_Enable_TVShow(True)
            If doMovies Then
                DataGridView_Sorting_Restore_Movie()
            End If
            If doMovieSets Then
                DataGridView_Sorting_Restore_Movieset()
            End If
            If doTVShows Then
                DataGridView_Sorting_Restore_TVShow()
            End If
            If doMovies AndAlso doMovieSets AndAlso doTVShows Then
                MainTab_UpdateAllCounts()
            End If
        End If
    End Sub

    Private Sub DataGridView_FillList_TVEpisode(ByVal ShowID As Long, ByVal Season As Integer)
        RemoveHandler dgvTVEpisodes.SelectionChanged, AddressOf dgvTVEpisodes_SelectionChanged
        Dim sEpisodeSorting As Enums.EpisodeSorting = Master.DB.Get_EpisodeSorting_TVShow(ShowID)
        Dim bIsAllSeasons As Boolean = Season = -1

        bsTVEpisodes.DataSource = Nothing
        dgvTVEpisodes.DataSource = Nothing

        dgvTVEpisodes.Enabled = False

        If bIsAllSeasons Then
            Master.DB.FillDataTable_TVEpisode(dtTVEpisodes, String.Concat("SELECT * FROM episodelist WHERE idShow = ", ShowID, If(Master.eSettings.TVDisplayMissingEpisodes, String.Empty, " AND Missing = 0"), " ORDER BY Season, Episode;"))
        Else
            Master.DB.FillDataTable_TVEpisode(dtTVEpisodes, String.Concat("SELECT * FROM episodelist WHERE idShow = ", ShowID, " AND Season = ", Season, If(Master.eSettings.TVDisplayMissingEpisodes, String.Empty, " AND Missing = 0"), " ORDER BY Episode;"))
        End If

        bsTVEpisodes.DataSource = dtTVEpisodes
        dgvTVEpisodes.DataSource = bsTVEpisodes

        Try
            If Master.eSettings.TVGeneralEpisodeListSorting.Count > 0 Then
                For Each mColumn In Master.eSettings.TVGeneralEpisodeListSorting
                    dgvTVEpisodes.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                Next
            End If
        Catch ex As Exception
            logger.Warn("default list for episode list sorting has been loaded")
            Master.eSettings.SetDefaultsForLists(Enums.DefaultType.ListSorting_TVEpisode, True)
            If Master.eSettings.TVGeneralEpisodeListSorting.Count > 0 Then
                For Each mColumn In Master.eSettings.TVGeneralEpisodeListSorting
                    dgvTVEpisodes.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                Next
            End If
        End Try

        dgvTVEpisodes.Columns("Season").DisplayIndex = 0
        dgvTVEpisodes.Columns("Episode").DisplayIndex = 1
        If sEpisodeSorting = Enums.EpisodeSorting.Aired Then dgvTVEpisodes.Columns("Aired").DisplayIndex = 2

        For i As Integer = 0 To dgvTVEpisodes.Columns.Count - 1
            dgvTVEpisodes.Columns(i).Visible = False
        Next

        dgvTVEpisodes.Columns("Aired").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Aired").Width = 80
        dgvTVEpisodes.Columns("Aired").ReadOnly = True
        dgvTVEpisodes.Columns("Aired").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Aired").Visible = (sEpisodeSorting = Enums.EpisodeSorting.Aired) OrElse (Not sEpisodeSorting = Enums.EpisodeSorting.Aired AndAlso Not DataGridView_CheckColumnHide_TVEpisode("Aired"))
        dgvTVEpisodes.Columns("Aired").ToolTipText = Master.eLang.GetString(728, "Aired")
        dgvTVEpisodes.Columns("Aired").HeaderText = Master.eLang.GetString(728, "Aired")
        dgvTVEpisodes.Columns("Credits").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
        dgvTVEpisodes.Columns("Credits").MinimumWidth = 30
        dgvTVEpisodes.Columns("Credits").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Credits").ReadOnly = True
        dgvTVEpisodes.Columns("Credits").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Credits").Visible = Not DataGridView_CheckColumnHide_TVEpisode("Credits")
        dgvTVEpisodes.Columns("Credits").ToolTipText = Master.eLang.GetString(729, "Credits")
        dgvTVEpisodes.Columns("Director").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
        dgvTVEpisodes.Columns("Director").MinimumWidth = 30
        dgvTVEpisodes.Columns("Director").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Director").ReadOnly = True
        dgvTVEpisodes.Columns("Director").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Director").Visible = Not DataGridView_CheckColumnHide_TVEpisode("Director")
        dgvTVEpisodes.Columns("Director").ToolTipText = Master.eLang.GetString(62, "Director")
        dgvTVEpisodes.Columns("Episode").AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader
        dgvTVEpisodes.Columns("Episode").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Episode").ReadOnly = True
        dgvTVEpisodes.Columns("Episode").MinimumWidth = If(bIsAllSeasons, 41, 82)
        dgvTVEpisodes.Columns("Episode").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Episode").Visible = Not sEpisodeSorting = Enums.EpisodeSorting.Aired
        dgvTVEpisodes.Columns("Episode").ToolTipText = Master.eLang.GetString(755, "Episode #")
        dgvTVEpisodes.Columns("Episode").HeaderText = "#"
        dgvTVEpisodes.Columns("Episode").DefaultCellStyle.Format = "00"
        dgvTVEpisodes.Columns("FanartPath").Width = 20
        dgvTVEpisodes.Columns("FanartPath").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("FanartPath").ReadOnly = True
        dgvTVEpisodes.Columns("FanartPath").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_TVEpisode("FanartPath")
        dgvTVEpisodes.Columns("FanartPath").ToolTipText = Master.eLang.GetString(149, "Fanart")
        dgvTVEpisodes.Columns("HasSub").Width = 20
        dgvTVEpisodes.Columns("HasSub").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("HasSub").ReadOnly = True
        dgvTVEpisodes.Columns("HasSub").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("HasSub").Visible = Not DataGridView_CheckColumnHide_TVEpisode("HasSub")
        dgvTVEpisodes.Columns("HasSub").ToolTipText = Master.eLang.GetString(152, "Subtitles")
        dgvTVEpisodes.Columns("NfoPath").Width = 20
        dgvTVEpisodes.Columns("NfoPath").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("NfoPath").ReadOnly = True
        dgvTVEpisodes.Columns("NfoPath").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("NfoPath").Visible = Not DataGridView_CheckColumnHide_TVEpisode("NfoPath")
        dgvTVEpisodes.Columns("NfoPath").ToolTipText = Master.eLang.GetString(150, "Nfo")
        dgvTVEpisodes.Columns("Playcount").Width = 20
        dgvTVEpisodes.Columns("Playcount").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Playcount").ReadOnly = True
        dgvTVEpisodes.Columns("Playcount").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Playcount").Visible = Not DataGridView_CheckColumnHide_TVEpisode("Playcount")
        dgvTVEpisodes.Columns("Playcount").ToolTipText = Master.eLang.GetString(981, "Watched")
        dgvTVEpisodes.Columns("PosterPath").Width = 20
        dgvTVEpisodes.Columns("PosterPath").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("PosterPath").ReadOnly = True
        dgvTVEpisodes.Columns("PosterPath").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_TVEpisode("PosterPath")
        dgvTVEpisodes.Columns("PosterPath").ToolTipText = Master.eLang.GetString(148, "Poster")
        dgvTVEpisodes.Columns("Rating").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCellsExceptHeader
        dgvTVEpisodes.Columns("Rating").MinimumWidth = 30
        dgvTVEpisodes.Columns("Rating").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Rating").ReadOnly = True
        dgvTVEpisodes.Columns("Rating").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Rating").Visible = Not DataGridView_CheckColumnHide_TVEpisode("Rating")
        dgvTVEpisodes.Columns("Rating").ToolTipText = Master.eLang.GetString(245, "Rating")
        dgvTVEpisodes.Columns("Runtime").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
        dgvTVEpisodes.Columns("Runtime").MinimumWidth = 45
        dgvTVEpisodes.Columns("Runtime").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Runtime").ReadOnly = True
        dgvTVEpisodes.Columns("Runtime").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Runtime").Visible = Not DataGridView_CheckColumnHide_TVEpisode("Runtime")
        dgvTVEpisodes.Columns("Runtime").ToolTipText = Master.eLang.GetString(238, "Runtime")
        dgvTVEpisodes.Columns("Runtime").HeaderText = Master.eLang.GetString(238, "Runtime")
        dgvTVEpisodes.Columns("Season").AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader
        dgvTVEpisodes.Columns("Season").MinimumWidth = 41
        dgvTVEpisodes.Columns("Season").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Season").ReadOnly = True
        dgvTVEpisodes.Columns("Season").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Season").Visible = bIsAllSeasons
        dgvTVEpisodes.Columns("Season").ToolTipText = Master.eLang.GetString(659, "Season #")
        dgvTVEpisodes.Columns("Season").HeaderText = "#"
        dgvTVEpisodes.Columns("Season").DefaultCellStyle.Format = "00"
        dgvTVEpisodes.Columns("Title").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("Title").ReadOnly = True
        dgvTVEpisodes.Columns("Title").MinimumWidth = 83
        dgvTVEpisodes.Columns("Title").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("Title").Visible = True
        dgvTVEpisodes.Columns("Title").ToolTipText = Master.eLang.GetString(21, "Title")
        dgvTVEpisodes.Columns("Title").HeaderText = Master.eLang.GetString(21, "Title")
        dgvTVEpisodes.Columns("iUserRating").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCellsExceptHeader
        dgvTVEpisodes.Columns("iUserRating").MinimumWidth = 30
        dgvTVEpisodes.Columns("iUserRating").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("iUserRating").ReadOnly = True
        dgvTVEpisodes.Columns("iUserRating").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("iUserRating").Visible = Not DataGridView_CheckColumnHide_TVEpisode("iUserRating")
        dgvTVEpisodes.Columns("iUserRating").ToolTipText = Master.eLang.GetString(1467, "User Rating")
        dgvTVEpisodes.Columns("VideoSource").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
        dgvTVEpisodes.Columns("VideoSource").MinimumWidth = 30
        dgvTVEpisodes.Columns("VideoSource").Resizable = DataGridViewTriState.False
        dgvTVEpisodes.Columns("VideoSource").ReadOnly = True
        dgvTVEpisodes.Columns("VideoSource").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVEpisodes.Columns("VideoSource").Visible = Not DataGridView_CheckColumnHide_TVEpisode("VideoSource")
        dgvTVEpisodes.Columns("VideoSource").ToolTipText = Master.eLang.GetString(824, "Video Source")
        dgvTVEpisodes.Columns("VideoSource").HeaderText = Master.eLang.GetString(824, "Video Source")

        dgvTVEpisodes.Columns("idEpisode").ValueType = GetType(Long)
        dgvTVEpisodes.Columns("idShow").ValueType = GetType(Long)
        dgvTVEpisodes.Columns("Episode").ValueType = GetType(Integer)
        dgvTVEpisodes.Columns("Season").ValueType = GetType(Integer)

        dgvTVEpisodes.Columns("Title").AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill

        dgvTVEpisodes.CurrentCell = Nothing
        dgvTVEpisodes.ClearSelection()

        If Not Master.isCL Then DataGridView_Sorting_Restore_TVEpisode(bIsAllSeasons)

        dgvTVEpisodes.Enabled = True

        AddHandler dgvTVEpisodes.SelectionChanged, AddressOf dgvTVEpisodes_SelectionChanged
    End Sub

    Private Sub DataGridView_FillList_TVSeason(ByVal ShowID As Long)
        RemoveHandler dgvTVSeasons.SelectionChanged, AddressOf dgvTVSeasons_SelectionChanged
        bsTVSeasons.DataSource = Nothing
        dgvTVSeasons.DataSource = Nothing
        bsTVEpisodes.DataSource = Nothing
        dgvTVEpisodes.DataSource = Nothing

        If Master.eSettings.TVDisplayMissingEpisodes Then
            Master.DB.FillDataTable_TVSeason(dtTVSeasons, String.Concat("SELECT * FROM seasonslist WHERE idShow = ", ShowID, " ORDER BY Season;"))
        Else
            Master.DB.FillDataTable_TVSeason(dtTVSeasons, String.Concat("SELECT DISTINCT seasonslist.* ",
                                                                        "FROM seasonslist ",
                                                                        "LEFT OUTER JOIN episodelist ON (seasonslist.idShow = episodelist.idShow) AND (seasonslist.Season = episodelist.Season) ",
                                                                        "WHERE seasonslist.idShow = ", ShowID, " AND (episodelist.Missing = 0 OR seasonslist.Season = -1) ",
                                                                        "ORDER BY seasonslist.Season;"))
        End If

        bsTVSeasons.DataSource = dtTVSeasons
        dgvTVSeasons.DataSource = bsTVSeasons

        If dgvTVSeasons.Columns.Count > 0 Then
            Try
                If Master.eSettings.TVGeneralSeasonListSorting.Count > 0 Then
                    For Each mColumn In Master.eSettings.TVGeneralSeasonListSorting
                        dgvTVSeasons.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                    Next
                End If
            Catch ex As Exception
                logger.Warn("default list for season list sorting has been loaded")
                Master.eSettings.SetDefaultsForLists(Enums.DefaultType.ListSorting_TVSeason, True)
                If Master.eSettings.TVGeneralSeasonListSorting.Count > 0 Then
                    For Each mColumn In Master.eSettings.TVGeneralSeasonListSorting
                        dgvTVSeasons.Columns(mColumn.Column.ToString).DisplayIndex = mColumn.DisplayIndex
                    Next
                End If
            End Try
        End If

        dgvTVSeasons.Columns("Season").DisplayIndex = 0

        For i As Integer = 0 To dgvTVSeasons.Columns.Count - 1
            dgvTVSeasons.Columns(i).Visible = False
        Next

        dgvTVSeasons.Columns("BannerPath").Width = 20
        dgvTVSeasons.Columns("BannerPath").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("BannerPath").ReadOnly = True
        dgvTVSeasons.Columns("BannerPath").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("BannerPath").Visible = Not DataGridView_CheckColumnHide_TVSeason("BannerPath")
        dgvTVSeasons.Columns("BannerPath").ToolTipText = Master.eLang.GetString(838, "Banner")
        dgvTVSeasons.Columns("Episodes").AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader
        dgvTVSeasons.Columns("Episodes").MinimumWidth = 30
        dgvTVSeasons.Columns("Episodes").DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight
        dgvTVSeasons.Columns("Episodes").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("Episodes").ReadOnly = True
        dgvTVSeasons.Columns("Episodes").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("Episodes").Visible = Not DataGridView_CheckColumnHide_TVSeason("Episodes")
        dgvTVSeasons.Columns("Episodes").ToolTipText = Master.eLang.GetString(682, "Episodes")
        dgvTVSeasons.Columns("Episodes").HeaderText = String.Empty
        dgvTVSeasons.Columns("FanartPath").Width = 20
        dgvTVSeasons.Columns("FanartPath").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("FanartPath").ReadOnly = True
        dgvTVSeasons.Columns("FanartPath").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_TVSeason("FanartPath")
        dgvTVSeasons.Columns("FanartPath").ToolTipText = Master.eLang.GetString(149, "Fanart")
        dgvTVSeasons.Columns("HasWatched").Width = 20
        dgvTVSeasons.Columns("HasWatched").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("HasWatched").ReadOnly = True
        dgvTVSeasons.Columns("HasWatched").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("HasWatched").Visible = Not DataGridView_CheckColumnHide_TVSeason("HasWatched")
        dgvTVSeasons.Columns("HasWatched").ToolTipText = Master.eLang.GetString(981, "Watched")
        dgvTVSeasons.Columns("LandscapePath").Width = 20
        dgvTVSeasons.Columns("LandscapePath").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("LandscapePath").ReadOnly = True
        dgvTVSeasons.Columns("LandscapePath").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("LandscapePath").Visible = Not DataGridView_CheckColumnHide_TVSeason("LandscapePath")
        dgvTVSeasons.Columns("LandscapePath").ToolTipText = Master.eLang.GetString(1035, "Landscape")
        dgvTVSeasons.Columns("PosterPath").Width = 20
        dgvTVSeasons.Columns("PosterPath").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("PosterPath").ReadOnly = True
        dgvTVSeasons.Columns("PosterPath").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_TVSeason("PosterPath")
        dgvTVSeasons.Columns("PosterPath").ToolTipText = Master.eLang.GetString(148, "Poster")
        dgvTVSeasons.Columns("Season").AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader
        dgvTVSeasons.Columns("Season").MinimumWidth = 41
        dgvTVSeasons.Columns("Season").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("Season").ReadOnly = True
        dgvTVSeasons.Columns("Season").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("Season").Visible = True
        dgvTVSeasons.Columns("Season").ToolTipText = Master.eLang.GetString(659, "Season #")
        dgvTVSeasons.Columns("Season").HeaderText = "#"
        dgvTVSeasons.Columns("Season").DefaultCellStyle.Format = "00"
        dgvTVSeasons.Columns("Title").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("Title").ReadOnly = True
        dgvTVSeasons.Columns("Title").MinimumWidth = 83
        dgvTVSeasons.Columns("Title").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("Title").Visible = True
        dgvTVSeasons.Columns("Title").ToolTipText = Master.eLang.GetString(865, "Season Title")
        dgvTVSeasons.Columns("Title").HeaderText = Master.eLang.GetString(865, "Season Title")
        dgvTVSeasons.Columns("strAired").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
        dgvTVSeasons.Columns("strAired").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("strAired").ReadOnly = True
        dgvTVSeasons.Columns("strAired").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("strAired").Visible = Not DataGridView_CheckColumnHide_TVSeason("strAired")
        dgvTVSeasons.Columns("strAired").ToolTipText = Master.eLang.GetString(728, "Aired")
        dgvTVSeasons.Columns("strAired").HeaderText = Master.eLang.GetString(728, "Aired")
        dgvTVSeasons.Columns("strTMDB").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
        dgvTVSeasons.Columns("strTMDB").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("strTMDB").ReadOnly = True
        dgvTVSeasons.Columns("strTMDB").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("strTMDB").Visible = Not DataGridView_CheckColumnHide_TVSeason("strTMDB")
        dgvTVSeasons.Columns("strTMDB").ToolTipText = "TMDb ID"
        dgvTVSeasons.Columns("strTMDB").HeaderText = "TMDb"
        dgvTVSeasons.Columns("strTVDB").AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells
        dgvTVSeasons.Columns("strTVDB").Resizable = DataGridViewTriState.False
        dgvTVSeasons.Columns("strTVDB").ReadOnly = True
        dgvTVSeasons.Columns("strTVDB").SortMode = DataGridViewColumnSortMode.Automatic
        dgvTVSeasons.Columns("strTVDB").Visible = Not DataGridView_CheckColumnHide_TVSeason("strTVDB")
        dgvTVSeasons.Columns("strTVDB").ToolTipText = "TVDb ID"
        dgvTVSeasons.Columns("strTVDB").HeaderText = "TVDb"

        dgvTVSeasons.Columns("idSeason").ValueType = GetType(Long)
        dgvTVSeasons.Columns("idShow").ValueType = GetType(Long)
        dgvTVSeasons.Columns("Season").ValueType = GetType(Integer)

        dgvTVSeasons.Columns("Title").AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill

        If Not Master.isCL Then DataGridView_Sorting_Restore_TVSeason()

        If dgvTVSeasons.RowCount > 0 Then
            DataGridView_FillList_TVEpisode(ShowID, Convert.ToInt32(dgvTVSeasons.Item("Season", 0).Value))
        End If

        AddHandler dgvTVSeasons.SelectionChanged, AddressOf dgvTVSeasons_SelectionChanged
    End Sub
    ''' <summary>
    ''' Adds a new single Movie row with informations from DB
    ''' </summary>
    ''' <param name="id"></param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Add_Movie(ByVal id As Long)
        If id = -1 Then Return

        Dim myDelegate As New Delegate_dtListAddRow(AddressOf DataGridView_Datatable_Row_Add)
        Dim newRow As DataRow = Nothing
        Dim newTable As New DataTable

        Master.DB.FillDataTable_Movie(newTable, String.Format("SELECT * FROM movielist WHERE idMovie={0}", id))
        If newTable.Rows.Count = 1 Then
            newRow = newTable.Rows.Item(0)
        End If

        Dim dRow = dtMovies.NewRow()
        dRow.ItemArray = newRow.ItemArray

        If newRow IsNot Nothing Then
            RemoveHandler dgvMovies.CellEnter, AddressOf dgvMovies_CellEnter
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {dtMovies, dRow})
            Else
                dtMovies.Rows.Add(dRow)
            End If
            AddHandler dgvMovies.CellEnter, AddressOf dgvMovies_CellEnter
            currRow_Movie = -1
        End If
    End Sub
    ''' <summary>
    ''' Adds a new single Movieset row with informations from DB
    ''' </summary>
    ''' <param name="id">Movieset ID</param>
    ''' <remarks></remarks>
    Private Function DataGridView_Row_Add_Movieset(ByVal id As Long) As Integer
        If id = -1 Then Return -1

        Dim myDelegate As New Delegate_dtListAddRow(AddressOf DataGridView_Datatable_Row_Add)
        Dim newRow As DataRow = Nothing
        Dim newTable As New DataTable

        Master.DB.FillDataTable_Movieset(newTable, String.Format("SELECT * FROM moviesetlist WHERE idSet={0}", id))
        If newTable.Rows.Count = 1 Then
            newRow = newTable.Rows.Item(0)
        End If

        Dim dRow = dtMovieSets.NewRow()
        dRow.ItemArray = newRow.ItemArray

        If newRow IsNot Nothing Then
            RemoveHandler dgvMovieSets.CellEnter, AddressOf dgvMovieSets_CellEnter
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {dtMovieSets, dRow})
            Else
                dtMovieSets.Rows.Add(dRow)
            End If
            AddHandler dgvMovieSets.CellEnter, AddressOf dgvMovieSets_CellEnter
            currRow_MovieSet = -1
        End If

        Return bsMovieSets.Find("idSet", id)
    End Function
    ''' <summary>
    ''' Adds a new single TV Show row with informations from DB
    ''' </summary>
    ''' <param name="id">TVShow ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Add_TVShow(ByVal id As Long)
        If id = -1 Then Return

        Dim myDelegate As New Delegate_dtListAddRow(AddressOf DataGridView_Datatable_Row_Add)
        Dim newRow As DataRow = Nothing
        Dim newTable As New DataTable

        Master.DB.FillDataTable_TVShow(newTable, String.Format("SELECT * FROM tvshowlist WHERE idShow={0}", id))
        If newTable.Rows.Count = 1 Then
            newRow = newTable.Rows.Item(0)
        End If

        Dim dRow = dtTVShows.NewRow()
        dRow.ItemArray = newRow.ItemArray

        If newRow IsNot Nothing Then
            RemoveHandler dgvTVShows.CellEnter, AddressOf dgvTVShows_CellEnter
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {dtTVShows, dRow})
            Else
                dtTVShows.Rows.Add(dRow)
            End If
            AddHandler dgvTVShows.CellEnter, AddressOf dgvTVShows_CellEnter
            currRow_TVShow = -1
        End If
    End Sub
    ''' <summary>
    ''' Removes a single Movie row from list
    ''' </summary>
    ''' <param name="id">Movie ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Remove_Movie(ByVal id As Long)
        Dim myDelegate As New Delegate_dtListRemoveRow(AddressOf DataGridView_Datatable_Row_Remove)

        Dim dRow = From drvRow In dtMovies.Rows Where Convert.ToInt64(DirectCast(drvRow, DataRow).Item("idMovie")) = id Select drvRow

        If dRow(0) IsNot Nothing Then
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {dtMovies, dRow(0)})
            Else
                dtMovies.Rows.Remove(DirectCast(dRow(0), DataRow))
            End If
        End If
        currRow_Movie = -1
        prevRow_Movie = -2
    End Sub
    ''' <summary>
    ''' Removes a single Movieset row from list
    ''' </summary>
    ''' <param name="id">MovieSet ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Remove_Movieset(ByVal id As Long)
        Dim myDelegate As New Delegate_dtListRemoveRow(AddressOf DataGridView_Datatable_Row_Remove)

        Dim dRow = From drvRow In dtMovieSets.Rows Where Convert.ToInt64(DirectCast(drvRow, DataRow).Item("idSet")) = id Select drvRow

        If dRow(0) IsNot Nothing Then
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {dtMovieSets, dRow(0)})
            Else
                dtMovieSets.Rows.Remove(DirectCast(dRow(0), DataRow))
            End If
        End If
        currRow_MovieSet = -1
        prevRow_MovieSet = -2
    End Sub
    ''' <summary>
    ''' Removes a single TVEpisode row from list
    ''' </summary>
    ''' <param name="id">TVEpisode ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Remove_TVEpisode(ByVal id As Long)
        Dim myDelegate As New Delegate_dtListRemoveRow(AddressOf DataGridView_Datatable_Row_Remove)

        Dim dRow = From drvRow In dtTVEpisodes.Rows Where Convert.ToInt64(DirectCast(drvRow, DataRow).Item("idEpisode")) = id Select drvRow

        If dRow(0) IsNot Nothing Then
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {dtTVEpisodes, dRow(0)})
            Else
                dtTVEpisodes.Rows.Remove(DirectCast(dRow(0), DataRow))
            End If
        End If
        currRow_TVEpisode = -1
        prevRow_TVEpisode = -2
    End Sub
    ''' <summary>
    ''' Removes a single TVSeason row from list
    ''' </summary>
    ''' <param name="id">TVSeason ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Remove_TVSeason(ByVal id As Long)
        Dim myDelegate As New Delegate_dtListRemoveRow(AddressOf DataGridView_Datatable_Row_Remove)

        Dim dRow = From drvRow In dtTVSeasons.Rows Where Convert.ToInt64(DirectCast(drvRow, DataRow).Item("idSeason")) = id Select drvRow

        If dRow(0) IsNot Nothing Then
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {dtTVSeasons, dRow(0)})
            Else
                dtTVSeasons.Rows.Remove(DirectCast(dRow(0), DataRow))
            End If
        End If
        currRow_TVSeason = -1
        prevRow_TVSeason = -2
    End Sub
    ''' <summary>
    ''' Removes a single TVShow row from list
    ''' </summary>
    ''' <param name="id">TVShow ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Remove_TVShow(ByVal id As Long)
        Dim myDelegate As New Delegate_dtListRemoveRow(AddressOf DataGridView_Datatable_Row_Remove)

        Dim dRow = From drvRow In dtTVShows.Rows Where Convert.ToInt64(DirectCast(drvRow, DataRow).Item("idShow")) = id Select drvRow

        If dRow(0) IsNot Nothing Then
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {dtTVShows, dRow(0)})
            Else
                dtTVShows.Rows.Remove(DirectCast(dRow(0), DataRow))
            End If
        End If
        currRow_TVShow = -1
        prevRow_TVShow = -2
    End Sub
    ''' <summary>
    ''' Updates the media info panels (right side of disiplay) when the movie selector changes (left side of display)
    ''' </summary>
    ''' <param name="row"><c>Integer</c> row which is currently selected</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Select_Movie(ByVal row As Integer)
        While tmrKeyBuffer.Enabled
            Application.DoEvents()
        End While

        InfoScreen_Clear()

        If dgvMovies.Rows.Count > row Then
            If Not DataGridView_ColumnAnyInfoValue(dgvMovies, row) Then
                InfoScreen_Show_NoInformation(True, Enums.ContentType.Movie)
                currMovie = Master.DB.Load_Movie(Convert.ToInt64(dgvMovies.Item("idMovie", row).Value))
                InfoScreen_Show_Data_Movie()
            Else
                InfoScreen_Load_Movie(Convert.ToInt64(dgvMovies.Item("idMovie", row).Value))
            End If

            If Not bwMovieScraper.IsBusy AndAlso Not bwMovieSetScraper.IsBusy AndAlso Not fScanner.IsBusy AndAlso Not bwReload_Movies.IsBusy AndAlso Not bwReload_MovieSets.IsBusy AndAlso Not bwReload_TVShows.IsBusy AndAlso Not bwCleanDB.IsBusy Then
                cmnuMovie.Enabled = True
            End If
        End If
    End Sub
    ''' <summary>
    ''' Updates the media info panels (right side of disiplay) when the movie selector changes (left side of display)
    ''' </summary>
    ''' <param name="row"><c>Integer</c> row which is currently selected</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Select_Movieset(ByVal row As Integer)
        While tmrKeyBuffer.Enabled
            Application.DoEvents()
        End While

        InfoScreen_Clear()

        If dgvMovieSets.Rows.Count > row Then
            If Not DataGridView_ColumnAnyInfoValue(dgvMovieSets, row) Then
                InfoScreen_Show_NoInformation(True, Enums.ContentType.Movieset)
                currMovieset = Master.DB.Load_Movieset(Convert.ToInt64(dgvMovieSets.Item("idSet", row).Value))
                InfoScreen_Show_Data_Movieset()
            Else
                InfoScreen_Load_Movieset(Convert.ToInt64(dgvMovieSets.Item("idSet", row).Value))
            End If

            If Not bwMovieScraper.IsBusy AndAlso Not bwMovieSetScraper.IsBusy AndAlso Not fScanner.IsBusy AndAlso
                Not bwReload_Movies.IsBusy AndAlso Not bwReload_MovieSets.IsBusy AndAlso Not bwReload_TVShows.IsBusy AndAlso Not bwCleanDB.IsBusy Then
                cmnuMovieSet.Enabled = True
            End If
        End If
    End Sub

    Private Sub DataGridView_Row_Select_TVEpisode(ByVal row As Integer)
        While tmrKeyBuffer.Enabled
            Application.DoEvents()
        End While

        InfoScreen_Clear()

        If dgvTVEpisodes.Rows.Count > row Then
            If Not Convert.ToInt64(dgvTVEpisodes.Item("idFile", row).Value) = -1 AndAlso Not DataGridView_ColumnAnyInfoValue(dgvTVEpisodes, row) Then
                InfoScreen_Show_NoInformation(True, Enums.ContentType.TVEpisode)
                currTV = Master.DB.Load_TVEpisode(Convert.ToInt64(dgvTVEpisodes.Item("idEpisode", row).Value), True)
                InfoScreen_Show_Data_TVEpisode()
            Else
                InfoScreen_Load_TVEpisode(Convert.ToInt64(dgvTVEpisodes.Item("idEpisode", row).Value))
            End If

            If Not Convert.ToInt64(dgvTVEpisodes.Item("idFile", row).Value) = -1 AndAlso Not bwMovieScraper.IsBusy AndAlso Not bwMovieSetScraper.IsBusy AndAlso Not fScanner.IsBusy AndAlso
                Not bwReload_Movies.IsBusy AndAlso Not bwReload_MovieSets.IsBusy AndAlso Not bwReload_TVShows.IsBusy AndAlso Not bwCleanDB.IsBusy Then
                cmnuEpisode.Enabled = True
            End If
        End If
    End Sub
    ''' <summary>
    ''' Updates the media info panels (right side of disiplay) when the TV Season selector changes (left side of display)
    ''' </summary>
    ''' <param name="row"></param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Select_TVSeason(ByVal row As Integer)
        While tmrKeyBuffer.Enabled
            Application.DoEvents()
        End While

        InfoScreen_Clear()

        If dgvTVSeasons.Rows.Count > row Then
            If Not Convert.ToBoolean(dgvTVSeasons.Item("Missing", row).Value) AndAlso Not DataGridView_ColumnAnyInfoValue(dgvTVSeasons, row) Then
                If Not currThemeType = Enums.ContentType.TVSeason Then Theme_Apply(Enums.ContentType.TVSeason)
                InfoScreen_Show_NoInformation(True, Enums.ContentType.TVSeason)
                currTV = Master.DB.Load_TVSeason(Convert.ToInt64(dgvTVSeasons.Item("idSeason", row).Value), True, False)
                DataGridView_FillList_TVEpisode(Convert.ToInt64(dgvTVSeasons.Item("idShow", row).Value), Convert.ToInt32(dgvTVSeasons.Item("Season", row).Value))
            Else
                InfoScreen_Load_TVSeason(Convert.ToInt64(dgvTVSeasons.Item("idSeason", row).Value))
                DataGridView_FillList_TVEpisode(Convert.ToInt64(dgvTVSeasons.Item("idShow", row).Value), Convert.ToInt32(dgvTVSeasons.Item("Season", row).Value))
            End If

            If Not bwMovieScraper.IsBusy AndAlso Not bwMovieSetScraper.IsBusy AndAlso Not fScanner.IsBusy AndAlso
                Not bwReload_Movies.IsBusy AndAlso Not bwReload_MovieSets.IsBusy AndAlso Not bwReload_TVShows.IsBusy AndAlso Not bwCleanDB.IsBusy Then
                cmnuSeason.Enabled = True
            End If
        End If
    End Sub
    ''' <summary>
    ''' Updates the media info panels (right side of disiplay) when the TV Show selector changes (left side of display)
    ''' </summary>
    ''' <param name="row"></param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Select_TVShow(ByVal row As Integer)
        While tmrKeyBuffer.Enabled
            Application.DoEvents()
        End While

        InfoScreen_Clear()

        If dgvTVShows.Rows.Count > row Then
            If Not DataGridView_ColumnAnyInfoValue(dgvTVShows, row) Then
                InfoScreen_Show_NoInformation(True, Enums.ContentType.TVShow)
                currTV = Master.DB.Load_TVShow(Convert.ToInt64(dgvTVShows.Item("idShow", row).Value), False, False)
                DataGridView_FillList_TVSeason(Convert.ToInt64(dgvTVShows.Item("idShow", row).Value))
            Else
                InfoScreen_Load_TVShow(Convert.ToInt64(dgvTVShows.Item("idShow", row).Value))
            End If

            If Not bwMovieScraper.IsBusy AndAlso Not bwMovieSetScraper.IsBusy AndAlso Not fScanner.IsBusy AndAlso
                Not bwReload_Movies.IsBusy AndAlso Not bwReload_MovieSets.IsBusy AndAlso Not bwReload_TVShows.IsBusy AndAlso Not bwCleanDB.IsBusy Then
                cmnuShow.Enabled = True
            End If
        End If
    End Sub
    ''' <summary>
    ''' Refresh a single Movie row with informations from DB
    ''' </summary>
    ''' <param name="id"></param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Update_Movie(ByVal id As Long)
        Dim myDelegate As New Delegate_dtListUpdateRow(AddressOf DataGridView_Datatable_Row_Update)
        Dim newDRow As DataRow = Nothing
        Dim newTable As New DataTable

        Master.DB.FillDataTable_Movie(newTable, String.Format("SELECT * FROM movielist WHERE idMovie={0}", id))
        If newTable.Rows.Count > 0 Then
            newDRow = newTable.Rows.Item(0)
        End If

        Dim oldDRow As DataRow = dtMovies.Select(String.Format("idMovie = {0}", id.ToString)).FirstOrDefault()

        If oldDRow IsNot Nothing AndAlso newDRow IsNot Nothing Then
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {oldDRow, newDRow})
            Else
                oldDRow.ItemArray = newDRow.ItemArray
            End If
        End If

        If dgvMovies.Visible AndAlso dgvMovies.SelectedRows.Count > 0 AndAlso CInt(dgvMovies.SelectedRows(0).Cells("idMovie").Value) = id Then
            DataGridView_Row_Select_Movie(dgvMovies.SelectedRows(0).Index)
        End If

        dgvMovies.Invalidate()
    End Sub
    ''' <summary>
    ''' Refresh a single Movieset row with informations from DB
    ''' </summary>
    ''' <param name="id">Movieset ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Update_Movieset(ByVal id As Long)
        Dim myDelegate As New Delegate_dtListUpdateRow(AddressOf DataGridView_Datatable_Row_Update)
        Dim newDRow As DataRow = Nothing
        Dim newTable As New DataTable

        Master.DB.FillDataTable_Movieset(newTable, String.Format("SELECT * FROM moviesetlist WHERE idSet={0}", id))
        If newTable.Rows.Count > 0 Then
            newDRow = newTable.Rows.Item(0)
        End If

        Dim oldDRow As DataRow = dtMovieSets.Select(String.Format("idSet = {0}", id.ToString)).FirstOrDefault()

        If oldDRow IsNot Nothing AndAlso newDRow IsNot Nothing Then
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {oldDRow, newDRow})
            Else
                oldDRow.ItemArray = newDRow.ItemArray
            End If
        End If

        If dgvMovieSets.Visible AndAlso dgvMovieSets.SelectedRows.Count > 0 AndAlso CInt(dgvMovieSets.SelectedRows(0).Cells("idSet").Value) = id Then
            DataGridView_Row_Select_Movieset(dgvMovieSets.SelectedRows(0).Index)
        End If

        dgvMovieSets.Invalidate()
    End Sub
    ''' <summary>
    ''' Refresh a single TVEpsiode row with informations from DB
    ''' </summary>
    ''' <param name="id">TVEpisode ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Update_TVEpisode(ByVal id As Long)
        If dtTVEpisodes.Rows.Count > 0 Then
            Dim myDelegate As New Delegate_dtListUpdateRow(AddressOf DataGridView_Datatable_Row_Update)
            Dim newDRow As DataRow = Nothing
            Dim newTable As New DataTable

            Master.DB.FillDataTable_TVEpisode(newTable, String.Format("SELECT * FROM episodelist WHERE idEpisode={0}", id))
            If newTable.Rows.Count > 0 Then
                newDRow = newTable.Rows.Item(0)
            End If

            Dim oldDRow As DataRow = dtTVEpisodes.Select(String.Format("idEpisode = {0}", id.ToString)).FirstOrDefault()

            If oldDRow IsNot Nothing AndAlso newDRow IsNot Nothing Then
                Try
                    If InvokeRequired Then
                        Invoke(myDelegate, New Object() {oldDRow, newDRow})
                    Else
                        oldDRow.ItemArray = newDRow.ItemArray
                    End If
                Catch ex As Exception
                    'catch the situation in which the tvshow row has been removed at the same time we try to refresh the episode row (it's nothing to do)
                End Try
            End If

            If dgvTVEpisodes.Visible AndAlso dgvTVEpisodes.SelectedRows.Count > 0 AndAlso CInt(dgvTVEpisodes.SelectedRows(0).Cells("idEpisode").Value) = id AndAlso currList = 2 Then
                DataGridView_Row_Select_TVEpisode(dgvTVEpisodes.SelectedRows(0).Index)
            End If

            dgvTVEpisodes.Invalidate()
        End If
    End Sub
    ''' <summary>
    ''' Refresh a single TVSeason row with informations from DB
    ''' </summary>
    ''' <param name="id">TVSeason ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Update_TVSeason(ByVal id As Long)
        If dtTVSeasons.Rows.Count > 0 Then
            Dim myDelegate As New Delegate_dtListUpdateRow(AddressOf DataGridView_Datatable_Row_Update)
            Dim newDRow As DataRow = Nothing
            Dim newTable As New DataTable

            Master.DB.FillDataTable_TVSeason(newTable, String.Format("SELECT * FROM seasonslist WHERE idSeason={0}", id))
            If newTable.Rows.Count > 0 Then
                newDRow = newTable.Rows.Item(0)
            End If

            Dim oldDRow As DataRow = dtTVSeasons.Select(String.Format("idSeason = {0}", id.ToString)).FirstOrDefault()

            If oldDRow IsNot Nothing AndAlso newDRow IsNot Nothing Then
                Try
                    If InvokeRequired Then
                        Invoke(myDelegate, New Object() {oldDRow, newDRow})
                    Else
                        oldDRow.ItemArray = newDRow.ItemArray
                    End If
                Catch ex As Exception
                    'catch the situation in which the tvshow row has been removed at the same time we try to refresh the season row (it's nothing to do)
                End Try
            End If

            If dgvTVSeasons.Visible AndAlso dgvTVSeasons.SelectedRows.Count > 0 AndAlso CInt(dgvTVSeasons.SelectedRows(0).Cells("idSeason").Value) = id AndAlso currList = 1 Then
                DataGridView_Row_Select_TVSeason(dgvTVSeasons.SelectedRows(0).Index)
            End If

            dgvTVSeasons.Invalidate()
        End If
    End Sub
    ''' <summary>
    ''' Refresh a single TVSeason row with informations from DB
    ''' </summary>
    ''' <param name="tvshowId">TV Show ID</param>
    ''' <param name="seasonNumber">Season number</param>
    Private Sub DataGridView_Row_Update_TVSeason(ByVal tvshowId As Long, ByVal seasonNumber As Integer)
        Using SQLNewcommand As SQLite.SQLiteCommand = Master.DB.MyVideosDBConn.CreateCommand()
            SQLNewcommand.CommandText = String.Concat("SELECT idSeason FROM seasons WHERE idShow = ", tvshowId, " AND Season = ", seasonNumber, ";")
            Using SQLreader As SQLite.SQLiteDataReader = SQLNewcommand.ExecuteReader()
                SQLreader.Read()
                If SQLreader.HasRows Then
                    DataGridView_Row_Update_TVSeason(Convert.ToInt64(SQLreader("idSeason")))
                End If
            End Using
        End Using
    End Sub
    ''' <summary>
    ''' Refresh a single TVShow row with informations from DB
    ''' </summary>
    ''' <param name="id">TVShow ID</param>
    ''' <remarks></remarks>
    Private Sub DataGridView_Row_Update_TVShow(ByVal id As Long, Optional ByVal force As Boolean = False)
        Dim myDelegate As New Delegate_dtListUpdateRow(AddressOf DataGridView_Datatable_Row_Update)
        Dim newDRow As DataRow = Nothing
        Dim newTable As New DataTable

        Master.DB.FillDataTable_TVShow(newTable, String.Format("SELECT * FROM tvshowlist WHERE idShow={0}", id))
        If newTable.Rows.Count > 0 Then
            newDRow = newTable.Rows.Item(0)
        End If

        Dim oldDRow As DataRow = dtTVShows.Select(String.Format("idShow = {0}", id.ToString)).FirstOrDefault()

        If oldDRow IsNot Nothing AndAlso newDRow IsNot Nothing Then
            If InvokeRequired Then
                Invoke(myDelegate, New Object() {oldDRow, newDRow})
            Else
                oldDRow.ItemArray = newDRow.ItemArray
            End If
        End If

        If dgvTVShows.Visible AndAlso dgvTVShows.SelectedRows.Count > 0 AndAlso CInt(dgvTVShows.SelectedRows(0).Cells("idShow").Value) = id AndAlso (currList = 0 OrElse force) Then
            DataGridView_Row_Select_TVShow(dgvTVShows.SelectedRows(0).Index)
        End If

        dgvTVShows.Invalidate()
    End Sub

    Private Sub DataGridView_Sorting_Restore_Movie()
        With Master.eSettings
            If .GeneralMainFilterSortColumn_Movies = 0 AndAlso .GeneralMainFilterSortOrder_Movies = 0 Then
                .GeneralMainFilterSortColumn_Movies = 4         'ListTitle in movielist
                .GeneralMainFilterSortOrder_Movies = 0          'ASC
            End If

            If dgvMovies.DataSource IsNot Nothing Then
                Try
                    dgvMovies.Sort(dgvMovies.Columns(.GeneralMainFilterSortColumn_Movies), CType(.GeneralMainFilterSortOrder_Movies, ComponentModel.ListSortDirection))
                Catch ex As Exception
                    dgvMovies.Sort(dgvMovies.Columns(3), CType(.GeneralMainFilterSortOrder_Movies, ComponentModel.ListSortDirection))
                End Try
            End If
        End With
    End Sub

    Private Sub DataGridView_Sorting_Restore_Movieset()
        With Master.eSettings
            If .GeneralMainFilterSortColumn_MovieSets = 0 AndAlso .GeneralMainFilterSortOrder_Movies = 0 Then
                .GeneralMainFilterSortColumn_MovieSets = 1         'ListTitle in movielist
                .GeneralMainFilterSortOrder_MovieSets = 0          'ASC
            End If

            If dgvMovieSets.DataSource IsNot Nothing Then
                Try
                    dgvMovieSets.Sort(dgvMovieSets.Columns(.GeneralMainFilterSortColumn_MovieSets), CType(.GeneralMainFilterSortOrder_MovieSets, ComponentModel.ListSortDirection))
                Catch ex As Exception
                    dgvMovieSets.Sort(dgvMovieSets.Columns(1), CType(.GeneralMainFilterSortOrder_MovieSets, ComponentModel.ListSortDirection))
                End Try
            End If
        End With
    End Sub

    Private Sub DataGridView_Sorting_Restore_TVEpisode(ByVal isAllSeasons As Boolean)
        With Master.eSettings
            If .GeneralMainFilterSortColumn_Episodes = 0 AndAlso .GeneralMainFilterSortOrder_Episodes = 0 Then
                .GeneralMainFilterSortColumn_Episodes = 4         'Episode # in episodelist
                .GeneralMainFilterSortOrder_Episodes = 0          'ASC
            End If

            If dgvTVEpisodes.DataSource IsNot Nothing Then
                If isAllSeasons Then
                    dgvTVEpisodes.Sort(dgvTVEpisodes.Columns("Season"), CType(.GeneralMainFilterSortOrder_Episodes, ComponentModel.ListSortDirection))
                Else
                    dgvTVEpisodes.Sort(dgvTVEpisodes.Columns(.GeneralMainFilterSortColumn_Episodes), CType(.GeneralMainFilterSortOrder_Episodes, ComponentModel.ListSortDirection))
                End If
            End If
        End With
    End Sub

    Private Sub DataGridView_Sorting_Restore_TVSeason()
        With Master.eSettings
            If .GeneralMainFilterSortColumn_Seasons = 0 AndAlso .GeneralMainFilterSortOrder_Seasons = 0 Then
                .GeneralMainFilterSortColumn_Seasons = 2         'Season # in seasonlist
                .GeneralMainFilterSortOrder_Seasons = 0          'ASC
            End If

            If dgvTVSeasons.DataSource IsNot Nothing Then
                dgvTVSeasons.Sort(dgvTVSeasons.Columns(.GeneralMainFilterSortColumn_Seasons), CType(.GeneralMainFilterSortOrder_Seasons, ComponentModel.ListSortDirection))
            End If
        End With
    End Sub

    Private Sub DataGridView_Sorting_Restore_TVShow()
        With Master.eSettings
            If .GeneralMainFilterSortColumn_Shows = 0 AndAlso .GeneralMainFilterSortOrder_Shows = 0 Then
                .GeneralMainFilterSortColumn_Shows = 2        'ListTitle in tvshowlist
                .GeneralMainFilterSortOrder_Shows = 0          'ASC
            End If

            If dgvTVShows.DataSource IsNot Nothing Then
                Try
                    dgvTVShows.Sort(dgvTVShows.Columns(.GeneralMainFilterSortColumn_Shows), CType(.GeneralMainFilterSortOrder_Shows, ComponentModel.ListSortDirection))
                Catch ex As Exception
                    dgvTVShows.Sort(dgvTVShows.Columns(1), CType(.GeneralMainFilterSortOrder_Shows, ComponentModel.ListSortDirection))
                End Try
            End If
        End With
    End Sub

    Private Sub DataGridView_Sorting_Save_Movie()
        Dim Order As Integer
        If dgvMovies.SortOrder = SortOrder.None Then Order = 0 'ComponentModel.ListSortDirection has only ASC and DESC. So set [None] to ASC
        If dgvMovies.SortOrder = SortOrder.Ascending Then Order = 0
        If dgvMovies.SortOrder = SortOrder.Descending Then Order = 1

        Master.eSettings.GeneralMainFilterSortColumn_Movies = dgvMovies.SortedColumn.Index
        Master.eSettings.GeneralMainFilterSortOrder_Movies = Order
    End Sub

    Private Sub DataGridView_Sorting_Save_Movieset()
        Dim Order As Integer
        If dgvMovieSets.SortOrder = SortOrder.None Then Order = 0 'ComponentModel.ListSortDirection has only ASC and DESC. So set [None] to ASC
        If dgvMovieSets.SortOrder = SortOrder.Ascending Then Order = 0
        If dgvMovieSets.SortOrder = SortOrder.Descending Then Order = 1

        Master.eSettings.GeneralMainFilterSortColumn_MovieSets = dgvMovieSets.SortedColumn.Index
        Master.eSettings.GeneralMainFilterSortOrder_MovieSets = Order
    End Sub

    Private Sub DataGridView_Sorting_Save_TVEpisode()
        Dim Order As Integer
        If dgvTVEpisodes.SortOrder = SortOrder.None Then Order = 0 'ComponentModel.ListSortDirection has only ASC and DESC. So set [None] to ASC
        If dgvTVEpisodes.SortOrder = SortOrder.Ascending Then Order = 0
        If dgvTVEpisodes.SortOrder = SortOrder.Descending Then Order = 1

        Master.eSettings.GeneralMainFilterSortColumn_Episodes = dgvTVEpisodes.SortedColumn.Index
        Master.eSettings.GeneralMainFilterSortOrder_Episodes = Order
    End Sub

    Private Sub DataGridView_Sorting_Save_TVSeason()
        Dim Order As Integer
        If dgvTVSeasons.SortOrder = SortOrder.None Then Order = 0 'ComponentModel.ListSortDirection has only ASC and DESC. So set [None] to ASC
        If dgvTVSeasons.SortOrder = SortOrder.Ascending Then Order = 0
        If dgvTVSeasons.SortOrder = SortOrder.Descending Then Order = 1

        Master.eSettings.GeneralMainFilterSortColumn_Seasons = dgvTVSeasons.SortedColumn.Index
        Master.eSettings.GeneralMainFilterSortOrder_Seasons = Order
    End Sub

    Private Sub DataGridView_Sorting_Save_TVShow()
        Dim Order As Integer
        If dgvTVShows.SortOrder = SortOrder.None Then Order = 0 'ComponentModel.ListSortDirection has only ASC and DESC. So set [None] to ASC
        If dgvTVShows.SortOrder = SortOrder.Ascending Then Order = 0
        If dgvTVShows.SortOrder = SortOrder.Descending Then Order = 1

        Master.eSettings.GeneralMainFilterSortColumn_Shows = dgvTVShows.SortedColumn.Index
        Master.eSettings.GeneralMainFilterSortOrder_Shows = Order
    End Sub

    Private Sub DataGridView_Timer_Load_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles tmrLoad_Movie.Tick
        tmrWait_Movie.Stop()
        tmrLoad_Movie.Stop()

        If dgvMovies.SelectedRows.Count > 0 Then DataGridView_Row_Select_Movie(dgvMovies.SelectedRows(0).Index)
    End Sub

    Private Sub DataGridView_Timer_Load_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles tmrLoad_MovieSet.Tick
        tmrWait_MovieSet.Stop()
        tmrLoad_MovieSet.Stop()

        If dgvMovieSets.SelectedRows.Count > 0 Then DataGridView_Row_Select_Movieset(dgvMovieSets.SelectedRows(0).Index)
    End Sub

    Private Sub DataGridView_Timer_Load_TVEpisode(ByVal sender As Object, ByVal e As EventArgs) Handles tmrLoad_TVEpisode.Tick
        tmrWait_TVEpisode.Stop()
        tmrLoad_TVEpisode.Stop()

        If dgvTVEpisodes.SelectedRows.Count > 0 Then DataGridView_Row_Select_TVEpisode(dgvTVEpisodes.SelectedRows(0).Index)
    End Sub

    Private Sub DataGridView_Timer_Load_TVSeason(ByVal sender As Object, ByVal e As EventArgs) Handles tmrLoad_TVSeason.Tick
        tmrWait_TVSeason.Stop()
        tmrLoad_TVSeason.Stop()

        If dgvTVSeasons.SelectedRows.Count > 0 Then DataGridView_Row_Select_TVSeason(dgvTVSeasons.SelectedRows(0).Index)
    End Sub

    Private Sub DataGridView_Timer_Load_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles tmrLoad_TVShow.Tick
        tmrWait_TVShow.Stop()
        tmrLoad_TVShow.Stop()

        If dgvTVShows.SelectedRows.Count > 0 Then DataGridView_Row_Select_TVShow(dgvTVShows.SelectedRows(0).Index)
    End Sub

    Private Sub DataGridView_Timer_Wait_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles tmrWait_Movie.Tick
        If Not prevRow_Movie = currRow_Movie Then
            prevRow_Movie = currRow_Movie
            tmrWait_Movie.Stop()
            tmrLoad_Movie.Start()
        Else
            tmrLoad_Movie.Stop()
            tmrWait_Movie.Stop()
        End If
    End Sub

    Private Sub DataGridView_Timer_Wait_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles tmrWait_MovieSet.Tick
        If Not prevRow_MovieSet = currRow_MovieSet Then
            prevRow_MovieSet = currRow_MovieSet
            tmrWait_MovieSet.Stop()
            tmrLoad_MovieSet.Start()
        Else
            tmrLoad_MovieSet.Stop()
            tmrWait_MovieSet.Stop()
        End If
    End Sub

    Private Sub DataGridView_Timer_Wait_TVEpisode(ByVal sender As Object, ByVal e As EventArgs) Handles tmrWait_TVEpisode.Tick
        tmrLoad_TVSeason.Stop()
        tmrLoad_TVShow.Stop()
        tmrWait_TVSeason.Stop()
        tmrWait_TVShow.Stop()

        If Not prevRow_TVEpisode = currRow_TVEpisode Then
            prevRow_TVEpisode = currRow_TVEpisode
            tmrWait_TVEpisode.Stop()
            tmrLoad_TVEpisode.Start()
        Else
            tmrLoad_TVEpisode.Stop()
            tmrWait_TVEpisode.Stop()
        End If
    End Sub

    Private Sub DataGridView_Timer_Wait_TVSeason(ByVal sender As Object, ByVal e As EventArgs) Handles tmrWait_TVSeason.Tick
        tmrLoad_TVShow.Stop()
        tmrLoad_TVEpisode.Stop()
        tmrWait_TVShow.Stop()
        tmrWait_TVEpisode.Stop()

        If Not prevRow_TVSeason = currRow_TVSeason Then
            prevRow_TVSeason = currRow_TVSeason
            tmrWait_TVSeason.Stop()
            tmrLoad_TVSeason.Start()
        Else
            tmrLoad_TVSeason.Stop()
            tmrWait_TVSeason.Stop()
        End If
    End Sub

    Private Sub DataGridView_Timer_Wait_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles tmrWait_TVShow.Tick
        tmrLoad_TVSeason.Stop()
        tmrLoad_TVEpisode.Stop()
        tmrWait_TVSeason.Stop()
        tmrWait_TVEpisode.Stop()

        If Not prevRow_TVShow = currRow_TVShow Then
            prevRow_TVShow = currRow_TVShow
            tmrWait_TVShow.Stop()
            tmrLoad_TVShow.Start()
        Else
            tmrLoad_TVShow.Stop()
            tmrWait_TVShow.Stop()
        End If
    End Sub

    Private Sub dgvMovies_CellClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovies.CellClick
        If e.RowIndex < 0 Then Exit Sub

        Dim colName As String = dgvMovies.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If colName = "iLastPlayed" Then
            TaskManager_CreateTask(Enums.ContentType.Movie,
                       Enums.SelectionType.Selected,
                       TaskManager.TaskItem.TaskType.SetWatchedState,
                       If(String.IsNullOrEmpty(dgvMovies.Rows(e.RowIndex).Cells("iLastPlayed").Value.ToString), True, False),
                       String.Empty)

        ElseIf Master.eSettings.MovieClickScrape AndAlso colName = "HasSet" AndAlso Not bwMovieScraper.IsBusy Then
            Dim objCell As DataGridViewCell = dgvMovies.Rows(e.RowIndex).Cells(e.ColumnIndex)

            dgvMovies.ClearSelection()
            dgvMovies.Rows(objCell.RowIndex).Selected = True
            currRow_Movie = objCell.RowIndex

            Dim scrapeOptions As New Structures.ScrapeOptions With {
                .Collection = True
            }
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainNFO, True)
            Scraper_CreateList(
                Enums.SelectionType.Selected,
                Enums.ScrapeType.Ask,
                scrapeOptions,
                ScrapeModifiers,
                Enums.ContentType.Movie
                )

        ElseIf Master.eSettings.MovieClickScrape AndAlso (
            colName = "BannerPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "DiscArtPath" OrElse
            colName = "EFanartsPath" OrElse
            colName = "EThumbsPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "ThemePath" OrElse
            colName = "TrailerPath"
            ) AndAlso Not bwMovieScraper.IsBusy Then

            Dim objCell As DataGridViewCell = dgvMovies.Rows(e.RowIndex).Cells(e.ColumnIndex)
            dgvMovies.ClearSelection()
            dgvMovies.Rows(objCell.RowIndex).Selected = True
            currRow_Movie = objCell.RowIndex

            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Select Case colName
                Case "BannerPath"
                    If Master.eSettings.MovieBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainBanner) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainBanner, True)
                    End If
                Case "ClearArtPath"
                    If Master.eSettings.MovieClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainClearArt) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainClearArt, True)
                    End If
                Case "ClearLogoPath"
                    If Master.eSettings.MovieClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainClearLogo) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainClearLogo, True)
                    End If
                Case "DiscArtPath"
                    If Master.eSettings.MovieDiscArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainDiscArt) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainDiscArt, True)
                    End If
                Case "EFanartsPath"
                    If Master.eSettings.MovieExtrafanartsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainExtrafanarts) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainExtrafanarts, True)
                    End If
                Case "EThumbsPath"
                    If Master.eSettings.MovieExtrathumbsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainExtrathumbs) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainExtrathumbs, True)
                    End If
                Case "FanartPath"
                    If Master.eSettings.MovieFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainFanart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainFanart, True)
                    End If
                Case "HasSub"
                    'EMM not able to scrape subtitles yet.
                    'So don't set status for it, but leave the option open for the future.
                    'Functions.SetScraperMod(Enums.ModType.Subtitles, True)
                Case "KeyartPath"
                    If Master.eSettings.MovieKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainKeyart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainKeyart, True)
                    End If
                Case "LandscapePath"
                    If Master.eSettings.MovieLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainLandscape) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainLandscape, True)
                    End If
                Case "MetaData" 'Metadata - need to add this column to the view.
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainMetaData, True)
                Case "NfoPath"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainNFO, True)
                Case "PosterPath"
                    If Master.eSettings.MoviePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainPoster) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainPoster, True)
                    End If
                Case "ThemePath"
                    If Master.eSettings.MovieThemeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Theme_Movie() Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainTheme, True)
                    End If
                Case "TrailerPath"
                    If Master.eSettings.MovieTrailerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Trailer_Movie() Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainTrailer, True)
                    End If
            End Select
            If ScrapeModifiers.AnyEnabled Then
                If Master.eSettings.MovieClickScrapeAsk Then
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Ask,
                        Master.DefaultOptions_Movie,
                        ScrapeModifiers,
                        Enums.ContentType.Movie
                        )
                Else
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Auto,
                        Master.DefaultOptions_Movie,
                        ScrapeModifiers,
                        Enums.ContentType.Movie
                        )
                End If
            End If
        End If
    End Sub

    Private Sub dgvMovies_CellDoubleClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovies.CellDoubleClick
        If e.RowIndex < 0 Then Exit Sub

        If fScanner.IsBusy OrElse bwLoadImages_Movie.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwRewriteContent.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwCleanDB.IsBusy Then Return

        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
        Dim tmpDBMovie As Database.DBElement = Master.DB.Load_Movie(ID)
        Edit_Movie(tmpDBMovie)
    End Sub

    Private Sub dgvMovies_CellEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovies.CellEnter
        Dim currMainTabTag = MainTab_GetCurrentTag()
        If Not currMainTabTag.ContentType = Enums.ContentType.Movie Then Return

        tmrWait_TVShow.Stop()
        tmrWait_TVSeason.Stop()
        tmrWait_TVEpisode.Stop()
        tmrWait_MovieSet.Stop()
        tmrWait_Movie.Stop()
        tmrLoad_TVShow.Stop()
        tmrLoad_TVSeason.Stop()
        tmrLoad_TVEpisode.Stop()
        tmrLoad_MovieSet.Stop()
        tmrLoad_Movie.Stop()

        currRow_Movie = e.RowIndex
        tmrWait_Movie.Start()
    End Sub

    Private Sub dgvMovies_CellMouseEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovies.CellMouseEnter
        Dim colName As String = dgvMovies.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        dgvMovies.ShowCellToolTips = True

        If colName = "iLastPlayed" AndAlso e.RowIndex >= 0 Then
            oldStatus = GetStatus()
            Cursor = Cursors.Hand
            SetStatus(Master.eLang.GetString(885, "Change Watched Status"))
        ElseIf (
            colName = "BannerPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "DiscArtPath" OrElse
            colName = "EFanartsPath" OrElse
            colName = "EThumbsPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "ThemePath" OrElse
            colName = "TrailerPath" OrElse
            colName = "HasSet" OrElse
            colName = "HasSub"
            ) AndAlso e.RowIndex >= 0 Then
            dgvMovies.ShowCellToolTips = False

            If Master.eSettings.MovieClickScrape AndAlso Not bwMovieScraper.IsBusy Then
                oldStatus = GetStatus()
                Dim ScrapeFor As String = String.Empty
                Dim ScrapeType As String = String.Empty
                Dim Title As String = dgvMovies.Rows(e.RowIndex).Cells("Title").Value.ToString
                Select Case colName
                    Case "BannerPath"
                        If Master.eSettings.MovieBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainBanner) Then
                            ScrapeFor = Master.eLang.GetString(1060, "Banner Only")
                        End If
                    Case "ClearArtPath"
                        If Master.eSettings.MovieClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainClearArt) Then
                            ScrapeFor = Master.eLang.GetString(1122, "ClearArt Only")
                        End If
                    Case "ClearLogoPath"
                        If Master.eSettings.MovieClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainClearLogo) Then
                            ScrapeFor = Master.eLang.GetString(1123, "ClearLogo Only")
                        End If
                    Case "DiscArtPath"
                        If Master.eSettings.MovieDiscArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainDiscArt) Then
                            ScrapeFor = Master.eLang.GetString(1124, "DiscArt Only")
                        End If
                    Case "EFanartsPath"
                        If Master.eSettings.MovieExtrafanartsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainExtrafanarts) Then
                            ScrapeFor = Master.eLang.GetString(975, "Extrafanarts Only")
                        End If
                    Case "EThumbsPath"
                        If Master.eSettings.MovieExtrathumbsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainExtrathumbs) Then
                            ScrapeFor = Master.eLang.GetString(74, "Extrathumbs Only")
                        End If
                    Case "FanartPath"
                        If Master.eSettings.MovieFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainFanart) Then
                            ScrapeFor = Master.eLang.GetString(73, "Fanart Only")
                        End If
                    Case "HasSet"
                        ScrapeFor = Master.eLang.GetString(1354, "MovieSet Informations Only")
                    Case "HasSub"
                        'EMM not able to scrape subtitles yet.
                        'So don't set status for it, but leave the option open for the future.
                        'ScrapeFor = Master.eLang.GetString(1355, "Subtitles Only")
                    Case "KeyartPath"
                        If Master.eSettings.MovieKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainKeyart) Then
                            ScrapeFor = Master.eLang.GetString(1238, "Keyart Only")
                        End If
                    Case "LandscapePath"
                        If Master.eSettings.MovieLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainLandscape) Then
                            ScrapeFor = Master.eLang.GetString(1061, "Landscape Only")
                        End If
                    Case "MetaData"
                        ScrapeFor = Master.eLang.GetString(76, "Meta Data Only")
                    Case "NfoPath"
                        ScrapeFor = Master.eLang.GetString(71, "NFO Only")
                    Case "PosterPath"
                        If Master.eSettings.MoviePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainPoster) Then
                            ScrapeFor = Master.eLang.GetString(72, "Poster Only")
                        End If
                    Case "ThemePath"
                        If Master.eSettings.MovieThemeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Theme_Movie() Then
                            ScrapeFor = Master.eLang.GetString(1125, "Theme Only")
                        End If
                    Case "TrailerPath"
                        If Master.eSettings.MovieTrailerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Trailer_Movie() Then
                            ScrapeFor = Master.eLang.GetString(75, "Trailer Only")
                        End If
                End Select

                If Not String.IsNullOrEmpty(ScrapeFor) Then
                    If Master.eSettings.MovieClickScrapeAsk Then
                        ScrapeType = Master.eLang.GetString(77, "Ask (Require Input If No Exact Match)")
                    Else
                        ScrapeType = Master.eLang.GetString(69, "Automatic (Force Best Match)")
                    End If
                    Cursor = Cursors.Hand
                    SetStatus(String.Format("Scrape ""{0}"" for {1} - {2}", Title, ScrapeFor, ScrapeType))
                Else
                    oldStatus = String.Empty
                End If
            Else
                oldStatus = String.Empty
            End If
        Else
            oldStatus = String.Empty
        End If
    End Sub

    Private Sub dgvMovies_CellMouseLeave(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovies.CellMouseLeave
        Cursor = Cursors.Default
        If Not String.IsNullOrEmpty(oldStatus) Then SetStatus(oldStatus)
    End Sub

    Private Sub dgvMovies_CellPainting(ByVal sender As Object, ByVal e As DataGridViewCellPaintingEventArgs) Handles dgvMovies.CellPainting
        Dim colName As String = dgvMovies.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If e.RowIndex >= 0 AndAlso Not dgvMovies.Item(e.ColumnIndex, e.RowIndex).Displayed Then
            e.Handled = True
            Return
        End If

        'icons for column header
        If (
            colName = "BannerPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "DiscArtPath" OrElse
            colName = "EFanartsPath" OrElse
            colName = "EThumbsPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "ThemePath" OrElse
            colName = "TrailerPath" OrElse
            colName = "HasSet" OrElse
            colName = "HasSub" OrElse
            colName = "iLastPlayed" OrElse
            colName = "Rating" OrElse
            colName = "iUserRating"
            ) AndAlso e.RowIndex = -1 Then
            e.PaintBackground(e.ClipBounds, False)

            Dim pt As Point = e.CellBounds.Location
            Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

            pt.X += offset
            pt.Y = 3

            If colName = "BannerPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 2)
            ElseIf colName = "ClearArtPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 4)
            ElseIf colName = "ClearLogoPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 5)
            ElseIf colName = "DiscArtPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 6)
            ElseIf colName = "EFanartsPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 7)
            ElseIf colName = "EThumbsPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 8)
            ElseIf colName = "FanartPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 9)
            ElseIf colName = "KeyartPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 20)
            ElseIf colName = "LandscapePath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 10)
            ElseIf colName = "NfoPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 11)
            ElseIf colName = "PosterPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 12)
            ElseIf colName = "ThemePath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 15)
            ElseIf colName = "TrailerPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 16)
            ElseIf colName = "HasSet" Then
                ilColumnIcons.Draw(e.Graphics, pt, 13)
            ElseIf colName = "HasSub" Then
                ilColumnIcons.Draw(e.Graphics, pt, 14)
            ElseIf colName = "iLastPlayed" Then
                ilColumnIcons.Draw(e.Graphics, pt, 17)
            ElseIf colName = "Rating" Then
                ilColumnIcons.Draw(e.Graphics, pt, 18)
            ElseIf colName = "iUserRating" Then
                ilColumnIcons.Draw(e.Graphics, pt, 19)
            End If

            e.Handled = True

        End If

        'text fields
        If (
            colName = "Certification" OrElse
            colName = "Credits" OrElse
            colName = "Country" OrElse
            colName = "Director" OrElse
            colName = "Genre" OrElse
            colName = "Imdb" OrElse
            colName = "iUserRating" OrElse
            colName = "Language" OrElse
            colName = "ListTitle" OrElse
            colName = "MPAA" OrElse
            colName = "OriginalTitle" OrElse
            colName = "Rating" OrElse
            colName = "premiered" OrElse
            colName = "Runtime" OrElse
            colName = "Studio" OrElse
            colName = "TMDB" OrElse
            colName = "Top250" OrElse
            colName = "VideoSource" OrElse
            colName = "Year"
            ) AndAlso e.RowIndex >= 0 Then
            If Convert.ToBoolean(dgvMovies.Item("Marked", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = MediaListColors.Marked.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.Marked.SelectionForeColor
            ElseIf Convert.ToBoolean(dgvMovies.Item("New", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = MediaListColors.New.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.New.SelectionForeColor
            ElseIf Convert.ToBoolean(dgvMovies.Item("MarkCustom1", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker1Color)
                e.CellStyle.SelectionForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker1Color)
            ElseIf Convert.ToBoolean(dgvMovies.Item("MarkCustom2", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker2Color)
                e.CellStyle.SelectionForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker2Color)
            ElseIf Convert.ToBoolean(dgvMovies.Item("MarkCustom3", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker3Color)
                e.CellStyle.SelectionForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker3Color)
            ElseIf Convert.ToBoolean(dgvMovies.Item("MarkCustom4", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker4Color)
                e.CellStyle.SelectionForeColor = Color.FromArgb(Master.eSettings.MovieGeneralCustomMarker4Color)
            Else
                e.CellStyle.ForeColor = MediaListColors.Default.ForeColor
                e.CellStyle.Font = New Font("Segoe UI", 8.25, FontStyle.Regular)
                e.CellStyle.SelectionForeColor = MediaListColors.Default.SelectionForeColor
            End If
        End If

        If e.ColumnIndex >= 2 AndAlso e.RowIndex >= 0 Then

            'background
            If Convert.ToBoolean(dgvMovies.Item("Locked", e.RowIndex).Value) Then
                e.CellStyle.BackColor = MediaListColors.Locked.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Locked.SelectionBackColor
            ElseIf Convert.ToBoolean(dgvMovies.Item("OutOfTolerance", e.RowIndex).Value) Then
                e.CellStyle.BackColor = MediaListColors.OutOfTolerance.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.OutOfTolerance.SelectionBackColor
            Else
                e.CellStyle.BackColor = MediaListColors.Default.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Default.SelectionBackColor
            End If

            'path fields
            If (
                colName = "BannerPath" OrElse
                colName = "ClearArtPath" OrElse
                colName = "ClearLogoPath" OrElse
                colName = "DiscArtPath" OrElse
                colName = "EFanartsPath" OrElse
                colName = "EThumbsPath" OrElse
                colName = "FanartPath" OrElse
                colName = "KeyartPath" OrElse
                colName = "LandscapePath" OrElse
                colName = "NfoPath" OrElse
                colName = "PosterPath" OrElse
                colName = "ThemePath" OrElse
                colName = "TrailerPath"
                ) Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Not String.IsNullOrEmpty(e.Value.ToString), 0, 1))
                e.Handled = True
            End If

            'LastPlayed field
            If colName = "iLastPlayed" Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Not String.IsNullOrEmpty(e.Value.ToString), 0, 1))
                e.Handled = True
            End If

            'boolean fields
            If colName = "HasSet" OrElse colName = "HasSub" Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Convert.ToBoolean(e.Value), 0, 1))
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub dgvMovies_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles dgvMovies.KeyDown
        'stop enter key from selecting next list item
        e.Handled = (e.KeyCode = Keys.Enter)
        If e.Modifiers = Keys.Control AndAlso e.KeyCode = Keys.F Then txtSearchMovies.Focus()
    End Sub

    Private Sub dgvMovies_KeyPress(ByVal sender As Object, ByVal e As KeyPressEventArgs) Handles dgvMovies.KeyPress
        Try
            If StringUtils.AlphaNumericOnly(e.KeyChar) OrElse e.KeyChar = Convert.ToChar(Keys.Space) Then
                KeyBuffer = String.Concat(KeyBuffer, e.KeyChar.ToString.ToLower)
                tmrKeyBuffer.Start()
                For Each drvRow As DataGridViewRow In dgvMovies.Rows
                    If drvRow.Cells("ListTitle").Value.ToString.ToLower.StartsWith(KeyBuffer) Then
                        drvRow.Selected = True
                        dgvMovies.CurrentCell = drvRow.Cells("ListTitle")
                        Exit For
                    End If
                Next
            ElseIf e.KeyChar = Convert.ToChar(Keys.Enter) Then
                If fScanner.IsBusy OrElse bwLoadImages_Movie.IsBusy OrElse
                bwDownloadPic.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwReload_Movies.IsBusy _
                OrElse bwCleanDB.IsBusy OrElse bwRewriteContent.IsBusy Then Return

                SetStatus(currMovie.Filename)

                If dgvMovies.SelectedRows.Count > 1 Then Return

                Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                Dim tmpDBMovie As Database.DBElement = Master.DB.Load_Movie(ID)
                Edit_Movie(tmpDBMovie)
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Private Sub dgvMovies_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles dgvMovies.MouseDown
        If e.Button = MouseButtons.Right And dgvMovies.RowCount > 0 Then
            If bwCleanDB.IsBusy OrElse bwMovieScraper.IsBusy Then
                cmnuMovieTitle.Text = Master.eLang.GetString(845, ">> No Item Selected <<")
                Return
            End If

            cmnuMovie.Enabled = False

            Dim dgvHTI As DataGridView.HitTestInfo = dgvMovies.HitTest(e.X, e.Y)

            If dgvHTI.Type = DataGridViewHitTestType.Cell Then
                If dgvMovies.SelectedRows.Count > 1 AndAlso dgvMovies.Rows(dgvHTI.RowIndex).Selected Then
                    Dim bShowMark As Boolean = False
                    Dim bShowUnmark As Boolean = False
                    Dim bShowLock As Boolean = False
                    Dim bShowUnlock As Boolean = False
                    Dim bShowUnwatched As Boolean = False
                    Dim bShowWatched As Boolean = False

                    cmnuMovie.Enabled = True
                    cmnuMovieChange.Visible = False
                    cmnuMovieChangeAuto.Visible = False
                    cmnuMovieEdit.Visible = False
                    cmnuMovieEditMetaData.Visible = False
                    cmnuMovieScrape.Visible = False

                    For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                        'if any one item is set as unmarked, show menu "Mark"
                        'if any one item is set as marked, show menu "Unmark"
                        If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
                            bShowMark = True
                            If bShowUnmark AndAlso bShowLock AndAlso bShowUnlock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnmark = True
                            If bShowMark AndAlso bShowLock AndAlso bShowUnlock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        End If
                        'if any one item is set as unlocked, show menu "Lock"
                        'if any one item is set as locked, show menu "Unlock"
                        If Not Convert.ToBoolean(sRow.Cells("Lock").Value) Then
                            bShowLock = True
                            If bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnlock = True
                            If bShowLock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowLock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        End If
                        'if any one item is set as unwatched, show menu "Mark as Watched"
                        'if any one item is set as watched, show menu "Mark as Unwatched"
                        If String.IsNullOrEmpty(sRow.Cells("Playcount").Value.ToString) OrElse sRow.Cells("Playcount").Value.ToString = "0" Then
                            bShowWatched = True
                            If bShowLock AndAlso bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnwatched = True
                            If bShowLock AndAlso bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched Then Exit For
                        End If
                    Next

                    cmnuMovieTitle.Text = Master.eLang.GetString(106, ">> Multiple <<")

                    'Genre submenu
                    mnuGenresGenre.Tag = String.Empty
                    If Not mnuGenresGenre.Items.Contains(String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")) Then
                        mnuGenresGenre.Items.Insert(0, String.Concat(Master.eLang.GetString(27, "Select Genre"), "..."))
                    End If
                    mnuGenresGenre.SelectedItem = String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")
                    mnuGenresAdd.Enabled = False
                    mnuGenresNew.Text = String.Empty
                    mnuGenresRemove.Enabled = False
                    mnuGenresSet.Enabled = False

                    'Language submenu
                    mnuLanguagesLanguage.Tag = String.Empty
                    If Not mnuLanguagesLanguage.Items.Contains(String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")) Then
                        mnuLanguagesLanguage.Items.Insert(0, String.Concat(Master.eLang.GetString(1199, "Select Language"), "..."))
                    End If
                    mnuLanguagesLanguage.SelectedItem = String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")
                    mnuLanguagesSet.Enabled = False

                    'Lock / Unlock menu
                    cmnuMovieLock.Visible = bShowLock
                    cmnuMovieUnlock.Visible = bShowUnlock

                    'Mark / Unmark menu
                    cmnuMovieMark.Visible = bShowMark
                    cmnuMovieUnmark.Visible = bShowUnmark

                    'Tag submenu
                    mnuTagsTag.Tag = String.Empty
                    If Not mnuTagsTag.Items.Contains(String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")) Then
                        mnuTagsTag.Items.Insert(0, String.Concat(Master.eLang.GetString(1021, "Select Tag"), "..."))
                    End If
                    mnuTagsTag.SelectedItem = String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")
                    mnuTagsAdd.Enabled = False
                    mnuTagsNew.Text = String.Empty
                    mnuTagsRemove.Enabled = False
                    mnuTagsSet.Enabled = False

                    'Watched / Unwatched menu
                    cmnuMovieWatched.Visible = bShowWatched
                    cmnuMovieUnwatched.Visible = bShowUnwatched
                Else
                    cmnuMovieChange.Visible = True
                    cmnuMovieChangeAuto.Visible = True
                    cmnuMovieEdit.Visible = True
                    cmnuMovieEditMetaData.Visible = True
                    cmnuMovieScrape.Visible = True

                    cmnuMovieTitle.Text = String.Concat(">> ", dgvMovies.Item("Title", dgvHTI.RowIndex).Value, " <<")

                    If Not dgvMovies.Rows(dgvHTI.RowIndex).Selected Then
                        prevRow_Movie = -1
                        dgvMovies.CurrentCell = Nothing
                        dgvMovies.ClearSelection()
                        dgvMovies.Rows(dgvHTI.RowIndex).Selected = True
                        dgvMovies.CurrentCell = dgvMovies.Item("ListTitle", dgvHTI.RowIndex)
                        'cmnuMovie.Enabled = True
                    Else
                        cmnuMovie.Enabled = True
                    End If

                    'Genre submenu
                    mnuGenresGenre.Tag = dgvMovies.Item("Genre", dgvHTI.RowIndex).Value
                    If Not mnuGenresGenre.Items.Contains(String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")) Then
                        mnuGenresGenre.Items.Insert(0, String.Concat(Master.eLang.GetString(27, "Select Genre"), "..."))
                    End If
                    mnuGenresGenre.SelectedItem = String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")
                    mnuGenresAdd.Enabled = False
                    mnuGenresNew.Text = String.Empty
                    mnuGenresRemove.Enabled = False
                    mnuGenresSet.Enabled = False

                    'Language submenu
                    Dim strLang As String = dgvMovies.Item("Language", dgvHTI.RowIndex).Value.ToString
                    Dim Language = APIXML.ScraperLanguages.Languages.FirstOrDefault(Function(l) l.Abbreviation = strLang)
                    If Language IsNot Nothing AndAlso Not String.IsNullOrEmpty(Language.Description) Then
                        mnuLanguagesLanguage.SelectedItem = Language.Description
                    Else
                        If Not mnuLanguagesLanguage.Items.Contains(String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")) Then
                            mnuLanguagesLanguage.Items.Insert(0, String.Concat(Master.eLang.GetString(1199, "Select Language"), "..."))
                        End If
                        mnuLanguagesLanguage.SelectedItem = String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")
                    End If
                    mnuLanguagesSet.Enabled = False

                    'Lock / Unlock menu
                    Dim bIsLocked As Boolean = Convert.ToBoolean(dgvMovies.Item("Lock", dgvHTI.RowIndex).Value)
                    cmnuMovieLock.Visible = Not bIsLocked
                    cmnuMovieUnlock.Visible = bIsLocked

                    'Mark / Unmark menu
                    Dim bIsMarked As Boolean = Convert.ToBoolean(dgvMovies.Item("Mark", dgvHTI.RowIndex).Value)
                    cmnuMovieMark.Visible = Not bIsMarked
                    cmnuMovieUnmark.Visible = bIsMarked

                    'Tag submenu
                    mnuTagsTag.Tag = dgvMovies.Item("Tag", dgvHTI.RowIndex).Value
                    If Not mnuTagsTag.Items.Contains(String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")) Then
                        mnuTagsTag.Items.Insert(0, String.Concat(Master.eLang.GetString(1021, "Select Tag"), "..."))
                    End If
                    mnuTagsTag.SelectedItem = String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")
                    mnuTagsAdd.Enabled = False
                    mnuTagsNew.Text = String.Empty
                    mnuTagsRemove.Enabled = False
                    mnuTagsSet.Enabled = False

                    'Watched / Unwatched menu
                    Dim bIsWatched As Boolean = Not String.IsNullOrEmpty(dgvMovies.Item("iLastPlayed", dgvHTI.RowIndex).Value.ToString)
                    cmnuMovieWatched.Visible = Not bIsWatched
                    cmnuMovieUnwatched.Visible = bIsWatched
                End If
            Else
                cmnuMovie.Enabled = False
                cmnuMovieTitle.Text = Master.eLang.GetString(845, ">> No Item Selected <<")
            End If
        End If
    End Sub

    Private Sub dgvMovies_RowsRemoved(sender As Object, e As DataGridViewRowsRemovedEventArgs) Handles dgvMovies.RowsRemoved
        MainTab_SetCount_Movie()
    End Sub

    Private Sub dgvMovies_RowsAdded(sender As Object, e As DataGridViewRowsAddedEventArgs) Handles dgvMovies.RowsAdded
        MainTab_SetCount_Movie()
    End Sub

    Private Sub dgvMovies_SelectionChanged(sender As Object, e As EventArgs) Handles dgvMovies.SelectionChanged
        If dgvMovies.SelectedRows.Count > 0 Then
            If dgvMovies.SelectedRows.Count > 1 Then
                SetStatus(String.Format(Master.eLang.GetString(627, "Selected Items: {0}"), dgvMovies.SelectedRows.Count))
            ElseIf dgvMovies.SelectedRows.Count = 1 Then
                'SetStatus(dgvMovies.SelectedRows(0).Cells("MoviePath").Value.ToString) TODO investigate if we should bring this back
                SetStatus(dgvMovies.SelectedRows(0).Cells("ListTitle").Value.ToString)
            End If
            currRow_Movie = dgvMovies.SelectedRows(0).Index
        Else
            currRow_Movie = -3
        End If
    End Sub

    Private Sub dgvMovies_Sorted(ByVal sender As Object, ByVal e As EventArgs) Handles dgvMovies.Sorted
        prevRow_Movie = -1
        If dgvMovies.RowCount > 0 Then
            dgvMovies.CurrentCell = Nothing
            dgvMovies.ClearSelection()
            dgvMovies.Rows(0).Selected = True
            dgvMovies.CurrentCell = dgvMovies.Rows(0).Cells("ListTitle")
        End If

        If dgvMovies.SortedColumn.HeaderCell.Value.ToString = "DateAdded" AndAlso dgvMovies.SortOrder = 1 Then
            btnFilterSortDateAdded_Movies.Tag = "ASC"
            btnFilterSortDateAdded_Movies.Image = My.Resources.asc
        ElseIf dgvMovies.SortedColumn.HeaderCell.Value.ToString = "DateAdded" AndAlso dgvMovies.SortOrder = 2 Then
            btnFilterSortDateAdded_Movies.Tag = "DESC"
            btnFilterSortDateAdded_Movies.Image = My.Resources.desc
        Else
            btnFilterSortDateAdded_Movies.Tag = String.Empty
            btnFilterSortDateAdded_Movies.Image = Nothing
        End If

        If dgvMovies.SortedColumn.HeaderCell.Value.ToString = "DateModified" AndAlso dgvMovies.SortOrder = 1 Then
            btnFilterSortDateModified_Movies.Tag = "ASC"
            btnFilterSortDateModified_Movies.Image = My.Resources.asc
        ElseIf dgvMovies.SortedColumn.HeaderCell.Value.ToString = "DateModified" AndAlso dgvMovies.SortOrder = 2 Then
            btnFilterSortDateModified_Movies.Tag = "DESC"
            btnFilterSortDateModified_Movies.Image = My.Resources.desc
        Else
            btnFilterSortDateModified_Movies.Tag = String.Empty
            btnFilterSortDateModified_Movies.Image = Nothing
        End If

        If dgvMovies.SortedColumn.HeaderCell.Value.ToString = "Rating" AndAlso dgvMovies.SortOrder = 1 Then
            btnFilterSortRating_Movies.Tag = "ASC"
            btnFilterSortRating_Movies.Image = My.Resources.asc
        ElseIf dgvMovies.SortedColumn.HeaderCell.Value.ToString = "Rating" AndAlso dgvMovies.SortOrder = 2 Then
            btnFilterSortRating_Movies.Tag = "DESC"
            btnFilterSortRating_Movies.Image = My.Resources.desc
        Else
            btnFilterSortRating_Movies.Tag = String.Empty
            btnFilterSortRating_Movies.Image = Nothing
        End If

        If dgvMovies.SortedColumn.HeaderCell.Value.ToString = "premiered" AndAlso dgvMovies.SortOrder = 1 Then
            btnFilterSortPremiered_Movies.Tag = "ASC"
            btnFilterSortPremiered_Movies.Image = My.Resources.asc
        ElseIf dgvMovies.SortedColumn.HeaderCell.Value.ToString = "premiered" AndAlso dgvMovies.SortOrder = 2 Then
            btnFilterSortPremiered_Movies.Tag = "DESC"
            btnFilterSortPremiered_Movies.Image = My.Resources.desc
        Else
            btnFilterSortPremiered_Movies.Tag = String.Empty
            btnFilterSortPremiered_Movies.Image = Nothing
        End If

        If dgvMovies.SortedColumn.HeaderCell.Value.ToString = "SortedTitle" AndAlso dgvMovies.SortOrder = 1 Then
            btnFilterSortTitle_Movies.Tag = "ASC"
            btnFilterSortTitle_Movies.Image = My.Resources.asc
        ElseIf dgvMovies.SortedColumn.HeaderCell.Value.ToString = "SortedTitle" AndAlso dgvMovies.SortOrder = 2 Then
            btnFilterSortTitle_Movies.Tag = "DESC"
            btnFilterSortTitle_Movies.Image = My.Resources.desc
        Else
            btnFilterSortTitle_Movies.Tag = String.Empty
            btnFilterSortTitle_Movies.Image = Nothing
        End If

        If dgvMovies.SortedColumn.HeaderCell.Value.ToString = "Year" AndAlso dgvMovies.SortOrder = 1 Then
            btnFilterSortYear_Movies.Tag = "ASC"
            btnFilterSortYear_Movies.Image = My.Resources.asc
        ElseIf dgvMovies.SortedColumn.HeaderCell.Value.ToString = "Year" AndAlso dgvMovies.SortOrder = 2 Then
            btnFilterSortYear_Movies.Tag = "DESC"
            btnFilterSortYear_Movies.Image = My.Resources.desc
        Else
            btnFilterSortYear_Movies.Tag = String.Empty
            btnFilterSortYear_Movies.Image = Nothing
        End If

        DataGridView_Sorting_Save_Movie()
    End Sub

    Private Sub dgvMovieSets_CellClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovieSets.CellClick
        If e.RowIndex < 0 Then Exit Sub

        Dim colName As String = dgvMovieSets.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If Master.eSettings.MovieSetClickScrape AndAlso (
            colName = "BannerPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "DiscArtPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath"
            ) AndAlso Not bwMovieSetScraper.IsBusy Then

            Dim objCell As DataGridViewCell = dgvMovieSets.Rows(e.RowIndex).Cells(e.ColumnIndex)
            dgvMovieSets.ClearSelection()
            dgvMovieSets.Rows(objCell.RowIndex).Selected = True
            currRow_MovieSet = objCell.RowIndex

            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Select Case colName
                Case "BannerPath"
                    If Master.eSettings.MovieSetBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainBanner) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainBanner, True)
                    End If
                Case "ClearArtPath"
                    If Master.eSettings.MovieSetClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainClearArt) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainClearArt, True)
                    End If
                Case "ClearLogoPath"
                    If Master.eSettings.MovieSetClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainClearLogo) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainClearLogo, True)
                    End If
                Case "DiscArtPath"
                    If Master.eSettings.MovieSetDiscArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainDiscArt) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainDiscArt, True)
                    End If
                Case "FanartPath"
                    If Master.eSettings.MovieSetFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainFanart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainFanart, True)
                    End If
                Case "KeyartPath"
                    If Master.eSettings.MovieSetKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainKeyart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainKeyart, True)
                    End If
                Case "LandscapePath"
                    If Master.eSettings.MovieSetLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainLandscape) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainLandscape, True)
                    End If
                Case "NfoPath"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainNFO, True)
                Case "PosterPath"
                    If Master.eSettings.MovieSetPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainPoster) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainPoster, True)
                    End If
            End Select
            If ScrapeModifiers.AnyEnabled Then
                If Master.eSettings.MovieSetClickScrapeAsk Then
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Ask,
                        Master.DefaultOptions_Movieset,
                        ScrapeModifiers,
                        Enums.ContentType.Movieset
                        )
                Else
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Auto,
                        Master.DefaultOptions_Movieset,
                        ScrapeModifiers,
                        Enums.ContentType.Movieset
                        )
                End If
            End If
        End If
    End Sub

    Private Sub dgvMovieSets_CellDoubleClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovieSets.CellDoubleClick
        If e.RowIndex < 0 Then Exit Sub

        If fScanner.IsBusy OrElse bwLoadImages_Movieset.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwCleanDB.IsBusy Then Return

        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
        Dim tmpDBMovieSet As Database.DBElement = Master.DB.Load_Movieset(ID)
        Edit_MovieSet(tmpDBMovieSet)
    End Sub

    Private Sub dgvMovieSets_CellEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovieSets.CellEnter
        Dim currMainTabTag = MainTab_GetCurrentTag()
        If Not currMainTabTag.ContentType = Enums.ContentType.Movieset Then Return

        tmrWait_TVShow.Stop()
        tmrWait_TVSeason.Stop()
        tmrWait_TVEpisode.Stop()
        tmrWait_Movie.Stop()
        tmrWait_MovieSet.Stop()
        tmrLoad_TVShow.Stop()
        tmrLoad_TVSeason.Stop()
        tmrLoad_TVEpisode.Stop()
        tmrLoad_Movie.Stop()
        tmrLoad_MovieSet.Stop()

        currRow_MovieSet = e.RowIndex
        tmrWait_MovieSet.Start()
    End Sub

    Private Sub dgvMovieSets_CellMouseEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovieSets.CellMouseEnter
        Dim colName As String = dgvMovieSets.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        dgvMovieSets.ShowCellToolTips = True

        If (
            colName = "BannerPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "DiscArtPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath"
            ) AndAlso e.RowIndex >= 0 Then
            dgvMovieSets.ShowCellToolTips = False

            If Master.eSettings.MovieSetClickScrape AndAlso Not bwMovieSetScraper.IsBusy Then
                oldStatus = GetStatus()
                Dim ScrapeFor As String = String.Empty
                Dim ScrapeType As String = String.Empty
                Dim Title As String = dgvMovieSets.Rows(e.RowIndex).Cells("Title").Value.ToString
                Select Case colName
                    Case "BannerPath"
                        If Master.eSettings.MovieSetBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainBanner) Then
                            ScrapeFor = Master.eLang.GetString(1060, "Banner Only")
                        End If
                    Case "ClearArtPath"
                        If Master.eSettings.MovieSetClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainClearArt) Then
                            ScrapeFor = Master.eLang.GetString(1122, "ClearArt Only")
                        End If
                    Case "ClearLogoPath"
                        If Master.eSettings.MovieSetClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainClearLogo) Then
                            ScrapeFor = Master.eLang.GetString(1123, "ClearLogo Only")
                        End If
                    Case "DiscArtPath"
                        If Master.eSettings.MovieSetDiscArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainDiscArt) Then
                            ScrapeFor = Master.eLang.GetString(1124, "DiscArt Only")
                        End If
                    Case "FanartPath"
                        If Master.eSettings.MovieSetFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainFanart) Then
                            ScrapeFor = Master.eLang.GetString(73, "Fanart Only")
                        End If
                    Case "KeyartPath"
                        If Master.eSettings.MovieSetKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainKeyart) Then
                            ScrapeFor = Master.eLang.GetString(1238, "Keyart Only")
                        End If
                    Case "LandscapePath"
                        If Master.eSettings.MovieSetLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainLandscape) Then
                            ScrapeFor = Master.eLang.GetString(1061, "Landscape Only")
                        End If
                    Case "NfoPath"
                        ScrapeFor = Master.eLang.GetString(71, "NFO Only")
                    Case "PosterPath"
                        If Master.eSettings.MovieSetPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainPoster) Then
                            ScrapeFor = Master.eLang.GetString(72, "Poster Only")
                        End If
                End Select

                If Not String.IsNullOrEmpty(ScrapeFor) Then
                    If Master.eSettings.MovieSetClickScrapeAsk Then
                        ScrapeType = Master.eLang.GetString(77, "Ask (Require Input If No Exact Match)")
                    Else
                        ScrapeType = Master.eLang.GetString(69, "Automatic (Force Best Match)")
                    End If
                    Cursor = Cursors.Hand
                    SetStatus(String.Format("Scrape ""{0}"" for {1} - {2}", Title, ScrapeFor, ScrapeType))
                Else
                    oldStatus = String.Empty
                End If
            Else
                oldStatus = String.Empty
            End If
        Else
            oldStatus = String.Empty
        End If
    End Sub

    Private Sub dgvMovieSets_CellMouseLeave(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvMovieSets.CellMouseLeave
        Cursor = Cursors.Default
        If Not String.IsNullOrEmpty(oldStatus) Then SetStatus(oldStatus)
    End Sub

    Private Sub dgvMovieSets_CellPainting(ByVal sender As Object, ByVal e As DataGridViewCellPaintingEventArgs) Handles dgvMovieSets.CellPainting
        Dim colName As String = dgvMovieSets.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If e.RowIndex >= 0 AndAlso Not dgvMovieSets.Item(e.ColumnIndex, e.RowIndex).Displayed Then
            e.Handled = True
            Return
        End If

        'icons for column header
        If (
            colName = "BannerPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "DiscArtPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath"
            ) AndAlso e.RowIndex = -1 Then
            e.PaintBackground(e.ClipBounds, False)

            Dim pt As Point = e.CellBounds.Location
            Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

            pt.X += offset
            pt.Y = 3

            If colName = "BannerPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 2)
            ElseIf colName = "ClearArtPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 4)
            ElseIf colName = "ClearLogoPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 5)
            ElseIf colName = "DiscArtPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 6)
            ElseIf colName = "FanartPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 9)
            ElseIf colName = "KeyartPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 20)
            ElseIf colName = "LandscapePath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 10)
            ElseIf colName = "NfoPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 11)
            ElseIf colName = "PosterPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 12)
            End If

            e.Handled = True

        End If

        'text fields
        If (
            colName = "Language" OrElse
            colName = "ListTitle" OrElse
            colName = "TMDBColID"
            ) AndAlso e.RowIndex >= 0 Then
            If Convert.ToBoolean(dgvMovieSets.Item("Mark", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = MediaListColors.Marked.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.Marked.SelectionForeColor
            ElseIf Convert.ToBoolean(dgvMovieSets.Item("New", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = MediaListColors.New.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.New.SelectionForeColor
            Else
                e.CellStyle.ForeColor = MediaListColors.Default.ForeColor
                e.CellStyle.Font = New Font("Segoe UI", 8.25, FontStyle.Regular)
                e.CellStyle.SelectionForeColor = MediaListColors.Default.SelectionForeColor
            End If
        End If

        If e.ColumnIndex >= 1 AndAlso e.RowIndex >= 0 Then

            'background
            If Convert.ToBoolean(dgvMovieSets.Item("Lock", e.RowIndex).Value) Then
                e.CellStyle.BackColor = MediaListColors.Locked.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Locked.SelectionBackColor
            Else
                e.CellStyle.BackColor = MediaListColors.Default.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Default.SelectionBackColor
            End If

            'path fields
            If (
            colName = "BannerPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "DiscArtPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath"
            ) Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Not String.IsNullOrEmpty(e.Value.ToString), 0, 1))
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub dgvMovieSets_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles dgvMovieSets.KeyDown
        'stop enter key from selecting next list item
        e.Handled = (e.KeyCode = Keys.Enter)
        If e.Modifiers = Keys.Control AndAlso e.KeyCode = Keys.F Then txtSearchMovieSets.Focus()
    End Sub

    Private Sub dgvMovieSets_KeyPress(ByVal sender As Object, ByVal e As KeyPressEventArgs) Handles dgvMovieSets.KeyPress
        If StringUtils.AlphaNumericOnly(e.KeyChar) OrElse e.KeyChar = Convert.ToChar(Keys.Space) Then
            KeyBuffer = String.Concat(KeyBuffer, e.KeyChar.ToString.ToLower)
            tmrKeyBuffer.Start()
            For Each drvRow As DataGridViewRow In dgvMovieSets.Rows
                If drvRow.Cells("ListTitle").Value.ToString.ToLower.StartsWith(KeyBuffer) Then
                    drvRow.Selected = True
                    dgvMovieSets.CurrentCell = drvRow.Cells("ListTitle")
                    Exit For
                End If
            Next
        ElseIf e.KeyChar = Convert.ToChar(Keys.Enter) Then
            If fScanner.IsBusy OrElse bwLoadImages_Movieset.IsBusy OrElse
            bwLoadImages_MoviesetMoviePosters.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse
            bwCleanDB.IsBusy Then Return

            Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
            Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
            currMovieset = Master.DB.Load_Movieset(ID)
            SetStatus(currMovieset.MainDetails.Title)
            Dim tmpDBMovieSet As Database.DBElement = Master.DB.Load_Movieset(ID)
            Edit_MovieSet(tmpDBMovieSet)
        End If
    End Sub

    Private Sub dgvMovieSets_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles dgvMovieSets.MouseDown
        If e.Button = MouseButtons.Right And dgvMovieSets.RowCount > 0 Then
            If bwCleanDB.IsBusy OrElse bwMovieSetScraper.IsBusy Then
                cmnuMovieSetTitle.Text = Master.eLang.GetString(845, ">> No Item Selected <<")
                Return
            End If

            cmnuMovieSet.Enabled = False

            Dim dgvHTI As DataGridView.HitTestInfo = dgvMovieSets.HitTest(e.X, e.Y)

            If dgvHTI.Type = DataGridViewHitTestType.Cell Then
                If dgvMovieSets.SelectedRows.Count > 1 AndAlso dgvMovieSets.Rows(dgvHTI.RowIndex).Selected Then
                    Dim bShowMark As Boolean = False
                    Dim bShowUnmark As Boolean = False
                    Dim bShowLock As Boolean = False
                    Dim bShowUnlock As Boolean = False

                    cmnuMovieSet.Enabled = True
                    cmnuMovieSetBrowseTMDB.Visible = True
                    cmnuMovieSetDatabaseSeparator.Visible = True
                    cmnuMovieSetEdit.Visible = False
                    cmnuMovieSetEditSeparator.Visible = True
                    cmnuMovieSetEditSortMethod.Visible = True
                    cmnuMovieSetLanguage.Visible = True
                    cmnuMovieSetLock.Visible = True
                    cmnuMovieSetMark.Visible = True
                    cmnuMovieSetNew.Visible = True
                    cmnuMovieSetNewSeparator.Visible = True
                    cmnuMovieSetReload.Visible = True
                    cmnuMovieSetRemove.Visible = True
                    cmnuMovieSetRemoveSeparator.Visible = True
                    cmnuMovieSetScrape.Visible = False
                    cmnuMovieSetScrapeSelected.Visible = True
                    cmnuMovieSetScrapeSeparator.Visible = True
                    cmnuMovieSetScrapeSingleDataField.Visible = True
                    cmnuMovieSetSep3.Visible = True
                    cmnuMovieSetTitle.Visible = True

                    For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
                        'if any one item is set as unmarked, show menu "Mark"
                        'if any one item is set as marked, show menu "Unmark"
                        If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
                            bShowMark = True
                            If bShowUnmark AndAlso bShowLock AndAlso bShowUnlock Then Exit For
                        Else
                            bShowUnmark = True
                            If bShowMark AndAlso bShowLock AndAlso bShowUnlock Then Exit For
                        End If
                        'if any one item is set as unlocked, show menu "Lock"
                        'if any one item is set as locked, show menu "Unlock"
                        If Not Convert.ToBoolean(sRow.Cells("Lock").Value) Then
                            bShowLock = True
                            If bShowUnlock AndAlso bShowMark AndAlso bShowUnmark Then Exit For
                        Else
                            bShowUnlock = True
                            If bShowLock AndAlso bShowMark AndAlso bShowUnmark Then Exit For
                        End If
                    Next

                    cmnuMovieSetTitle.Text = Master.eLang.GetString(106, ">> Multiple <<")

                    cmnuMovieSetEditSortMethodMethods.SelectedIndex = -1
                    cmnuMovieSetEditSortMethodSet.Enabled = False

                    'Language submenu
                    mnuLanguagesLanguage.Tag = String.Empty
                    If Not mnuLanguagesLanguage.Items.Contains(String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")) Then
                        mnuLanguagesLanguage.Items.Insert(0, String.Concat(Master.eLang.GetString(1199, "Select Language"), "..."))
                    End If
                    mnuLanguagesLanguage.SelectedItem = String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")
                    mnuLanguagesSet.Enabled = False

                    'Lock / Unlock menu
                    cmnuMovieSetLock.Visible = bShowLock
                    cmnuMovieSetUnlock.Visible = bShowUnlock

                    'Mark / Unmark menu
                    cmnuMovieSetMark.Visible = bShowMark
                    cmnuMovieSetUnmark.Visible = bShowUnmark
                Else
                    cmnuMovieSetBrowseTMDB.Visible = True
                    cmnuMovieSetDatabaseSeparator.Visible = True
                    cmnuMovieSetEdit.Visible = True
                    cmnuMovieSetEditSeparator.Visible = True
                    cmnuMovieSetEditSortMethod.Visible = True
                    cmnuMovieSetLanguage.Visible = True
                    cmnuMovieSetLock.Visible = True
                    cmnuMovieSetMark.Visible = True
                    cmnuMovieSetNew.Visible = True
                    cmnuMovieSetNewSeparator.Visible = True
                    cmnuMovieSetReload.Visible = True
                    cmnuMovieSetRemove.Visible = True
                    cmnuMovieSetRemoveSeparator.Visible = True
                    cmnuMovieSetScrape.Visible = True
                    cmnuMovieSetScrapeSelected.Visible = True
                    cmnuMovieSetScrapeSeparator.Visible = True
                    cmnuMovieSetScrapeSingleDataField.Visible = True
                    cmnuMovieSetSep3.Visible = True
                    cmnuMovieSetTitle.Visible = True

                    cmnuMovieSetTitle.Text = String.Concat(">> ", dgvMovieSets.Item("Title", dgvHTI.RowIndex).Value, " <<")

                    If Not dgvMovieSets.Rows(dgvHTI.RowIndex).Selected Then
                        prevRow_MovieSet = -1
                        dgvMovieSets.CurrentCell = Nothing
                        dgvMovieSets.ClearSelection()
                        dgvMovieSets.Rows(dgvHTI.RowIndex).Selected = True
                        dgvMovieSets.CurrentCell = dgvMovieSets.Item("ListTitle", dgvHTI.RowIndex)
                        'cmnuMovieSet.Enabled = True
                    Else
                        cmnuMovieSet.Enabled = True
                    End If

                    'SortMethod submenu
                    Dim SortMethod As Integer = CInt(dgvMovieSets.Item("SortMethod", dgvHTI.RowIndex).Value)
                    cmnuMovieSetEditSortMethodMethods.Text = DirectCast(CInt(dgvMovieSets.Item("SortMethod", dgvHTI.RowIndex).Value), Enums.SortMethod_MovieSet).ToString
                    cmnuMovieSetEditSortMethodSet.Enabled = False

                    'Language submenu
                    Dim strLang As String = dgvMovieSets.Item("Language", dgvHTI.RowIndex).Value.ToString
                    Dim Language = APIXML.ScraperLanguages.Languages.FirstOrDefault(Function(l) l.Abbreviation = strLang)
                    If Language IsNot Nothing AndAlso Not String.IsNullOrEmpty(Language.Description) Then
                        mnuLanguagesLanguage.SelectedItem = Language.Description
                    Else
                        If Not mnuLanguagesLanguage.Items.Contains(String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")) Then
                            mnuLanguagesLanguage.Items.Insert(0, String.Concat(Master.eLang.GetString(1199, "Select Language"), "..."))
                        End If
                        mnuLanguagesLanguage.SelectedItem = String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")
                    End If
                    mnuLanguagesSet.Enabled = False

                    'Lock / Unlock menu
                    Dim bIsLocked As Boolean = Convert.ToBoolean(dgvMovieSets.Item("Lock", dgvHTI.RowIndex).Value)
                    cmnuMovieSetLock.Visible = Not bIsLocked
                    cmnuMovieSetUnlock.Visible = bIsLocked

                    'Mark / Unmark menu
                    Dim bIsMarked As Boolean = Convert.ToBoolean(dgvMovieSets.Item("Mark", dgvHTI.RowIndex).Value)
                    cmnuMovieSetMark.Visible = Not bIsMarked
                    cmnuMovieSetUnmark.Visible = bIsMarked
                End If
            Else
                cmnuMovieSet.Enabled = True
                cmnuMovieSetBrowseTMDB.Visible = False
                cmnuMovieSetDatabaseSeparator.Visible = False
                cmnuMovieSetEdit.Visible = False
                cmnuMovieSetEditSeparator.Visible = False
                cmnuMovieSetEditSortMethod.Visible = False
                cmnuMovieSetLanguage.Visible = False
                cmnuMovieSetLock.Visible = False
                cmnuMovieSetMark.Visible = False
                cmnuMovieSetNew.Visible = True
                cmnuMovieSetNewSeparator.Visible = False
                cmnuMovieSetReload.Visible = False
                cmnuMovieSetRemove.Visible = False
                cmnuMovieSetRemoveSeparator.Visible = False
                cmnuMovieSetScrape.Visible = False
                cmnuMovieSetScrapeSelected.Visible = False
                cmnuMovieSetScrapeSeparator.Visible = False
                cmnuMovieSetScrapeSingleDataField.Visible = False
                cmnuMovieSetSep3.Visible = False
                cmnuMovieSetTitle.Visible = False
            End If
        End If
    End Sub

    Private Sub dgvMovieSets_RowsRemoved(sender As Object, e As DataGridViewRowsRemovedEventArgs) Handles dgvMovieSets.RowsRemoved
        MainTab_SetCount_Movieset()
    End Sub

    Private Sub dgvMovieSets_RowsAdded(sender As Object, e As DataGridViewRowsAddedEventArgs) Handles dgvMovieSets.RowsAdded
        MainTab_SetCount_Movieset()
    End Sub

    Private Sub dgvMovieSets_SelectionChanged(sender As Object, e As EventArgs) Handles dgvMovieSets.SelectionChanged
        If dgvMovieSets.SelectedRows.Count > 0 Then
            If dgvMovieSets.SelectedRows.Count > 1 Then
                SetStatus(String.Format(Master.eLang.GetString(627, "Selected Items: {0}"), dgvMovieSets.SelectedRows.Count))
            ElseIf dgvMovieSets.SelectedRows.Count = 1 Then
                SetStatus(dgvMovieSets.SelectedRows(0).Cells("Title").Value.ToString)
            End If
            currRow_MovieSet = dgvMovieSets.SelectedRows(0).Index
        Else
            currRow_MovieSet = -3
        End If
    End Sub

    Private Sub dgvMovieSets_Sorted(ByVal sender As Object, ByVal e As EventArgs) Handles dgvMovieSets.Sorted
        prevRow_MovieSet = -1
        If dgvMovieSets.RowCount > 0 Then
            dgvMovieSets.CurrentCell = Nothing
            dgvMovieSets.ClearSelection()
            dgvMovieSets.Rows(0).Selected = True
            dgvMovieSets.CurrentCell = dgvMovieSets.Rows(0).Cells("ListTitle")
        End If

        DataGridView_Sorting_Save_Movieset()
    End Sub

    Private Sub dgvTVEpisodes_CellClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVEpisodes.CellClick
        If e.RowIndex < 0 Then Exit Sub

        Dim colName As String = dgvTVEpisodes.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If colName = "Playcount" Then
            TaskManager_CreateTask(Enums.ContentType.TVEpisode, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetWatchedState, If(Not String.IsNullOrEmpty(dgvTVEpisodes.Rows(e.RowIndex).Cells("Playcount").Value.ToString) AndAlso
                                      Not dgvTVEpisodes.Rows(e.RowIndex).Cells("Playcount").Value.ToString = "0", False, True), String.Empty)

        ElseIf Master.eSettings.TVGeneralClickScrape AndAlso (
            colName = "FanartPath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath"
            ) AndAlso Not bwTVEpisodeScraper.IsBusy Then

            Dim objCell As DataGridViewCell = dgvTVEpisodes.Rows(e.RowIndex).Cells(e.ColumnIndex)
            dgvTVEpisodes.ClearSelection()
            dgvTVEpisodes.Rows(objCell.RowIndex).Selected = True
            currRow_TVEpisode = objCell.RowIndex

            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Select Case colName
                Case "FanartPath"
                    If Master.eSettings.TVEpisodeFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodeFanart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeFanart, True)
                    End If
                Case "HasSub"
                    'EMM not able to scrape subtitles yet.
                    'So don't set status for it, but leave the option open for the future.
                    'Functions.SetScraperMod(Enums.ModType.Subtitles, True)
                Case "MetaData" 'Metadata - need to add this column to the view.
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeMeta, True)
                Case "NfoPath"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeNFO, True)
                Case "PosterPath"
                    If Master.eSettings.TVEpisodePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodePoster) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodePoster, True)
                    End If
            End Select
            If ScrapeModifiers.AnyEnabled Then
                If Master.eSettings.TVGeneralClickScrapeAsk Then
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Ask,
                        Master.DefaultOptions_TV,
                        ScrapeModifiers,
                        Enums.ContentType.TVEpisode
                        )
                Else
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Auto,
                        Master.DefaultOptions_TV,
                        ScrapeModifiers,
                        Enums.ContentType.TVEpisode
                        )
                End If
            End If
        End If
    End Sub

    Private Sub dgvTVEpisodes_CellDoubleClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVEpisodes.CellDoubleClick
        If e.RowIndex < 0 Then Exit Sub

        If fScanner.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwLoadImages_TVEpisode.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwReload_MovieSets.IsBusy _
            OrElse bwRewriteContent.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwCleanDB.IsBusy Then Return

        Dim indX As Integer = dgvTVEpisodes.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvTVEpisodes.Item("idEpisode", indX).Value)
        Dim tmpDBTVEpisode As Database.DBElement = Master.DB.Load_TVEpisode(ID, True)
        Edit_TVEpisode(tmpDBTVEpisode)
    End Sub

    Private Sub dgvTVEpisodes_CellEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVEpisodes.CellEnter
        Dim currMainTabTag = MainTab_GetCurrentTag()
        If Not currMainTabTag.ContentType = Enums.ContentType.TV OrElse Not currList = 2 Then Return

        tmrWait_TVShow.Stop()
        tmrWait_TVSeason.Stop()
        tmrWait_Movie.Stop()
        tmrWait_MovieSet.Stop()
        tmrWait_TVEpisode.Stop()
        tmrLoad_TVShow.Stop()
        tmrLoad_TVSeason.Stop()
        tmrLoad_Movie.Stop()
        tmrLoad_MovieSet.Stop()
        tmrLoad_TVEpisode.Stop()

        currRow_TVEpisode = e.RowIndex
        tmrWait_TVEpisode.Start()
    End Sub

    Private Sub dgvTVEpisodes_CellMouseEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVEpisodes.CellMouseEnter
        Dim colName As String = dgvTVEpisodes.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        dgvTVEpisodes.ShowCellToolTips = True

        If colName = "Playcount" AndAlso e.RowIndex >= 0 Then
            oldStatus = GetStatus()
            Cursor = Cursors.Hand
            SetStatus(Master.eLang.GetString(885, "Change Watched Status"))
        ElseIf (
            colName = "FanartPath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "HasSub"
            ) AndAlso e.RowIndex >= 0 Then
            dgvTVEpisodes.ShowCellToolTips = False

            If Master.eSettings.TVGeneralClickScrape AndAlso Not bwTVEpisodeScraper.IsBusy Then
                oldStatus = GetStatus()
                Dim ScrapeFor As String = String.Empty
                Dim ScrapeType As String = String.Empty
                Dim Title As String = dgvTVEpisodes.Rows(e.RowIndex).Cells("Title").Value.ToString
                Select Case colName
                    Case "FanartPath"
                        If Master.eSettings.TVEpisodeFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodeFanart) Then
                            ScrapeFor = Master.eLang.GetString(73, "Fanart Only")
                        End If
                    Case "HasSub"
                        'EMM not able to scrape subtitles yet.
                        'So don't set status for it, but leave the option open for the future.
                        'ScrapeFor = Master.eLang.GetString(1355, "Subtitles Only")
                    Case "NfoPath"
                        ScrapeFor = Master.eLang.GetString(71, "NFO Only")
                    Case "MetaData"
                        ScrapeFor = Master.eLang.GetString(76, "Meta Data Only")
                    Case "PosterPath"
                        If Master.eSettings.TVEpisodePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodePoster) Then
                            ScrapeFor = Master.eLang.GetString(72, "Poster Only")
                        End If
                End Select

                If Not String.IsNullOrEmpty(ScrapeFor) Then
                    If Master.eSettings.TVGeneralClickScrapeAsk Then
                        ScrapeType = Master.eLang.GetString(77, "Ask (Require Input If No Exact Match)")
                    Else
                        ScrapeType = Master.eLang.GetString(69, "Automatic (Force Best Match)")
                    End If
                    Cursor = Cursors.Hand
                    SetStatus(String.Format("Scrape ""{0}"" for {1} - {2}", Title, ScrapeFor, ScrapeType))
                Else
                    oldStatus = String.Empty
                End If
            Else
                oldStatus = String.Empty
            End If
        Else
            oldStatus = String.Empty
        End If
    End Sub

    Private Sub dgvTVEpisodes_CellMouseLeave(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVEpisodes.CellMouseLeave
        Cursor = Cursors.Default
        If Not String.IsNullOrEmpty(oldStatus) Then SetStatus(oldStatus)
    End Sub

    Private Sub dgvTVEpisodes_CellPainting(ByVal sender As Object, ByVal e As DataGridViewCellPaintingEventArgs) Handles dgvTVEpisodes.CellPainting
        Dim colName As String = dgvTVEpisodes.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If e.RowIndex >= 0 AndAlso Not dgvTVEpisodes.Item(e.ColumnIndex, e.RowIndex).Displayed Then
            e.Handled = True
            Return
        End If

        'icons for column header
        If (
            colName = "FanartPath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "HasSub" OrElse
            colName = "Playcount" OrElse
            colName = "Rating" OrElse
            colName = "iUserRating"
            ) AndAlso e.RowIndex = -1 Then
            e.PaintBackground(e.ClipBounds, False)

            Dim pt As Point = e.CellBounds.Location
            Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

            pt.X += offset
            pt.Y = 3

            If colName = "FanartPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 9)
            ElseIf colName = "NfoPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 11)
            ElseIf colName = "PosterPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 12)
            ElseIf colName = "HasSub" Then
                ilColumnIcons.Draw(e.Graphics, pt, 14)
            ElseIf colName = "Playcount" Then
                ilColumnIcons.Draw(e.Graphics, pt, 17)
            ElseIf colName = "Rating" Then
                ilColumnIcons.Draw(e.Graphics, pt, 18)
            ElseIf colName = "iUserRating" Then
                ilColumnIcons.Draw(e.Graphics, pt, 19)
            End If

            e.Handled = True

        End If

        'text fields
        If (
            colName = "Aired" OrElse
            colName = "Credits" OrElse
            colName = "Director" OrElse
            colName = "Episode" OrElse
            colName = "iUserRating" OrElse
            colName = "Rating" OrElse
            colName = "Runtime" OrElse
            colName = "Season" OrElse
            colName = "strIMDB" OrElse
            colName = "strTMDB" OrElse
            colName = "strTVDB" OrElse
            colName = "Title" OrElse
            colName = "VideoSource"
            ) AndAlso e.RowIndex >= 0 Then
            If Convert.ToInt64(dgvTVEpisodes.Item("idFile", e.RowIndex).Value) = -1 Then
                e.CellStyle.ForeColor = MediaListColors.Missing.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.Missing.SelectionForeColor
            ElseIf Convert.ToBoolean(dgvTVEpisodes.Item("Mark", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = MediaListColors.Marked.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.Marked.SelectionForeColor
            ElseIf Convert.ToBoolean(dgvTVEpisodes.Item("New", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = MediaListColors.New.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.New.SelectionForeColor
            Else
                e.CellStyle.ForeColor = MediaListColors.Default.ForeColor
                e.CellStyle.Font = New Font("Segoe UI", 8.25, FontStyle.Regular)
                e.CellStyle.SelectionForeColor = MediaListColors.Default.SelectionForeColor
            End If
        End If

        If e.ColumnIndex >= 2 AndAlso e.RowIndex >= 0 Then

            'background
            If Convert.ToInt64(dgvTVEpisodes.Item("idFile", e.RowIndex).Value) = -1 Then
                e.CellStyle.BackColor = MediaListColors.Missing.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Missing.SelectionBackColor
            ElseIf Convert.ToBoolean(dgvTVEpisodes.Item("Lock", e.RowIndex).Value) Then
                e.CellStyle.BackColor = MediaListColors.Locked.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Locked.SelectionBackColor
            Else
                e.CellStyle.BackColor = MediaListColors.Default.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Default.SelectionBackColor
            End If

            'path fields
            If colName = "FanartPath" OrElse colName = "NfoPath" OrElse colName = "PosterPath" Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Not String.IsNullOrEmpty(e.Value.ToString), 0, 1))
                e.Handled = True
            End If

            'playcount field
            If colName = "Playcount" Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Not String.IsNullOrEmpty(e.Value.ToString) AndAlso Not e.Value.ToString = "0", 0, 1))
                e.Handled = True
            End If

            'boolean fields
            If colName = "HasSub" Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Convert.ToBoolean(e.Value), 0, 1))
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub dgvTVEpisodes_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles dgvTVEpisodes.KeyDown
        'stop enter key from selecting next list item
        e.Handled = e.KeyCode = Keys.Enter
    End Sub

    Private Sub dgvTVEpisodes_KeyPress(ByVal sender As Object, ByVal e As KeyPressEventArgs) Handles dgvTVEpisodes.KeyPress
        If StringUtils.AlphaNumericOnly(e.KeyChar) OrElse e.KeyChar = Convert.ToChar(Keys.Space) Then
            KeyBuffer = String.Concat(KeyBuffer, e.KeyChar.ToString.ToLower)
            tmrKeyBuffer.Start()
            For Each drvRow As DataGridViewRow In dgvTVEpisodes.Rows
                If drvRow.Cells("Title").Value.ToString.ToLower.StartsWith(KeyBuffer) Then
                    drvRow.Selected = True
                    dgvTVEpisodes.CurrentCell = drvRow.Cells("Title")
                    Exit For
                End If
            Next
        ElseIf e.KeyChar = Convert.ToChar(Keys.Enter) Then
            If fScanner.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwLoadImages_TVEpisode.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwCleanDB.IsBusy Then Return

            Dim indX As Integer = dgvTVEpisodes.SelectedRows(0).Index
            Dim ID As Long = Convert.ToInt64(dgvTVEpisodes.Item("idEpisode", indX).Value)
            Dim tmpDBTVEpisode As Database.DBElement = Master.DB.Load_TVEpisode(ID, True)
            Edit_TVEpisode(tmpDBTVEpisode)
        End If
    End Sub

    Private Sub dgvTVEpisodes_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles dgvTVEpisodes.MouseDown
        Dim hasMissing As Boolean = False

        If e.Button = MouseButtons.Right And dgvTVEpisodes.RowCount > 0 Then
            cmnuEpisode.Enabled = False

            Dim dgvHTI As DataGridView.HitTestInfo = dgvTVEpisodes.HitTest(e.X, e.Y)

            If dgvHTI.Type = DataGridViewHitTestType.Cell Then
                If dgvTVEpisodes.SelectedRows.Count > 1 AndAlso dgvTVEpisodes.Rows(dgvHTI.RowIndex).Selected Then
                    cmnuEpisode.Enabled = True

                    For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                        If Convert.ToInt64(sRow.Cells("idFile").Value) = -1 Then
                            hasMissing = True
                            Exit For
                        End If
                    Next

                    cmnuEpisodeTitle.Text = Master.eLang.GetString(106, ">> Multiple <<")

                    If hasMissing Then
                        ShowEpisodeMenuItems(False)
                    Else
                        Dim bShowMark As Boolean = False
                        Dim bShowUnmark As Boolean = False
                        Dim bShowLock As Boolean = False
                        Dim bShowUnlock As Boolean = False
                        Dim bShowUnwatched As Boolean = False
                        Dim bShowWatched As Boolean = False

                        ShowEpisodeMenuItems(True)

                        cmnuEpisodeEditSeparator.Visible = True
                        cmnuEpisodeEdit.Visible = False
                        cmnuEpisodeScrapeSeparator.Visible = True
                        cmnuEpisodeScrape.Visible = False
                        cmnuEpisodeChange.Visible = False
                        cmnuEpisodeSep3.Visible = False
                        cmnuEpisodeOpenFolder.Visible = False

                        For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                            'if any one item is set as unmarked, show menu "Mark"
                            'if any one item is set as marked, show menu "Unmark"
                            If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
                                bShowMark = True
                                If bShowUnmark AndAlso bShowLock AndAlso bShowUnlock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                            Else
                                bShowUnmark = True
                                If bShowMark AndAlso bShowLock AndAlso bShowUnlock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                            End If
                            'if any one item is set as unlocked, show menu "Lock"
                            'if any one item is set as locked, show menu "Unlock"
                            If Not Convert.ToBoolean(sRow.Cells("Lock").Value) Then
                                bShowLock = True
                                If bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                            Else
                                bShowUnlock = True
                                If bShowLock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                            End If
                            'if any one item is set as unwatched, show menu "Mark as Watched"
                            'if any one item is set as watched, show menu "Mark as Unwatched"
                            If String.IsNullOrEmpty(sRow.Cells("Playcount").Value.ToString) OrElse sRow.Cells("Playcount").Value.ToString = "0" Then
                                bShowWatched = True
                                If bShowLock AndAlso bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowUnwatched Then Exit For
                            Else
                                bShowUnwatched = True
                                If bShowLock AndAlso bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched Then Exit For
                            End If
                        Next

                        'Lock / Unlock menu
                        cmnuEpisodeLock.Visible = bShowLock
                        cmnuEpisodeUnlock.Visible = bShowUnlock

                        'Mark / Unmark menu
                        cmnuEpisodeMark.Visible = bShowMark
                        cmnuEpisodeUnmark.Visible = bShowUnmark

                        'Watched / Unwatched menu
                        cmnuEpisodeWatched.Visible = bShowWatched
                        cmnuEpisodeUnwatched.Visible = bShowUnwatched
                    End If
                Else
                    cmnuEpisodeTitle.Text = String.Concat(">> ", dgvTVEpisodes.Item("Title", dgvHTI.RowIndex).Value, " <<")

                    If Not dgvTVEpisodes.Rows(dgvHTI.RowIndex).Selected OrElse Not currList = 2 Then
                        prevRow_TVEpisode = -1
                        currList = 2
                        dgvTVEpisodes.CurrentCell = Nothing
                        dgvTVEpisodes.ClearSelection()
                        dgvTVEpisodes.Rows(dgvHTI.RowIndex).Selected = True
                        dgvTVEpisodes.CurrentCell = dgvTVEpisodes.Item("Title", dgvHTI.RowIndex)
                    Else
                        cmnuEpisode.Enabled = True
                    End If

                    If Convert.ToInt64(dgvTVEpisodes.Item("idFile", dgvHTI.RowIndex).Value) = -1 Then hasMissing = True

                    If hasMissing Then
                        ShowEpisodeMenuItems(False)
                    Else
                        ShowEpisodeMenuItems(True)

                        cmnuEpisodeEditSeparator.Visible = True
                        cmnuEpisodeEdit.Visible = True
                        cmnuEpisodeScrapeSeparator.Visible = True
                        cmnuEpisodeScrape.Visible = True
                        cmnuEpisodeChange.Visible = True
                        cmnuEpisodeSep3.Visible = True
                        cmnuEpisodeOpenFolder.Visible = True

                        cmnuEpisodeMark.Text = If(Convert.ToBoolean(dgvTVEpisodes.Item("Mark", dgvHTI.RowIndex).Value), Master.eLang.GetString(107, "Unmark"), Master.eLang.GetString(23, "Mark"))

                        'Lock / Unlock menu
                        Dim bIsLocked As Boolean = Convert.ToBoolean(dgvTVEpisodes.Item("Lock", dgvHTI.RowIndex).Value)
                        cmnuEpisodeLock.Visible = Not bIsLocked
                        cmnuEpisodeUnlock.Visible = bIsLocked

                        'Mark / Unmark menu
                        Dim bIsMarked As Boolean = Convert.ToBoolean(dgvTVEpisodes.Item("Mark", dgvHTI.RowIndex).Value)
                        cmnuEpisodeMark.Visible = Not bIsMarked
                        cmnuEpisodeUnmark.Visible = bIsMarked

                        'Watched / Unwatched menu
                        Dim bIsWatched As Boolean = Not String.IsNullOrEmpty(dgvTVEpisodes.Item("Playcount", dgvHTI.RowIndex).Value.ToString) AndAlso Not dgvTVEpisodes.Item("Playcount", dgvHTI.RowIndex).Value.ToString = "0"
                        cmnuEpisodeWatched.Visible = Not bIsWatched
                        cmnuEpisodeUnwatched.Visible = bIsWatched
                    End If

                End If
            Else
                cmnuEpisode.Enabled = False
                cmnuEpisodeTitle.Text = Master.eLang.GetString(845, ">> No Item Selected <<")
            End If
        End If
    End Sub

    Private Sub dgvTVEpisodes_SelectionChanged(sender As Object, e As EventArgs) Handles dgvTVEpisodes.SelectionChanged
        If dgvTVEpisodes.SelectedRows.Count > 0 Then
            If dgvTVEpisodes.SelectedRows.Count > 1 Then
                SetStatus(String.Format(Master.eLang.GetString(627, "Selected Items: {0}"), dgvTVEpisodes.SelectedRows.Count))
            ElseIf dgvTVEpisodes.SelectedRows.Count = 1 Then
                SetStatus(dgvTVEpisodes.SelectedRows(0).Cells("strFilePath").Value.ToString)
            End If
            currRow_TVEpisode = dgvTVEpisodes.SelectedRows(0).Index
            If Not currList = 2 Then
                currList = 2
                prevRow_TVEpisode = -1
                DataGridView_Row_Select_TVEpisode(dgvTVEpisodes.SelectedRows(0).Index)
            End If
        Else
            currRow_TVEpisode = -3
        End If
    End Sub

    Private Sub dgvTVEpisodes_Sorted(ByVal sender As Object, ByVal e As EventArgs) Handles dgvTVEpisodes.Sorted
        prevRow_TVEpisode = -1
        If dgvTVEpisodes.RowCount > 0 Then
            dgvTVEpisodes.CurrentCell = Nothing
            dgvTVEpisodes.ClearSelection()
            'dgvTVEpisodes.Rows(0).Selected = True
            'dgvTVEpisodes.CurrentCell = dgvTVEpisodes.Rows(0).Cells("Title")
        End If

        DataGridView_Sorting_Save_TVEpisode()
    End Sub

    Private Sub dgvTVSeasons_CellClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVSeasons.CellClick
        If e.RowIndex < 0 Then Exit Sub

        Dim colName As String = dgvTVSeasons.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If colName = "HasWatched" Then
            If Not CInt(dgvTVSeasons.Rows(e.RowIndex).Cells("Season").Value) = -1 Then
                TaskManager_CreateTask(Enums.ContentType.TVSeason,
                           Enums.SelectionType.Selected,
                           TaskManager.TaskItem.TaskType.SetWatchedState,
                           If(CBool(dgvTVSeasons.Rows(e.RowIndex).Cells("HasWatched").Value), False, True),
                           String.Empty)
            End If

        ElseIf Master.eSettings.TVGeneralClickScrape AndAlso (
            colName = "BannerPath" OrElse
            colName = "FanartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "PosterPath"
            ) AndAlso Not bwTVSeasonScraper.IsBusy Then

            Dim objCell As DataGridViewCell = dgvTVSeasons.Rows(e.RowIndex).Cells(e.ColumnIndex)
            dgvTVSeasons.ClearSelection()
            dgvTVSeasons.Rows(objCell.RowIndex).Selected = True
            currRow_TVSeason = objCell.RowIndex

            Dim IsAllSeasons = CInt(dgvTVSeasons.Rows(e.RowIndex).Cells("Season").Value) = -1
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Select Case colName
                Case "BannerPath"
                    If Not IsAllSeasons AndAlso Master.eSettings.TVSeasonBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonBanner) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.SeasonBanner, True)
                    ElseIf IsAllSeasons AndAlso Master.eSettings.TVAllSeasonsBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsBanner) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.AllSeasonsBanner, True)
                    End If
                Case "FanartPath"
                    If Not IsAllSeasons AndAlso Master.eSettings.TVSeasonFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonFanart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.SeasonFanart, True)
                    ElseIf IsAllSeasons AndAlso Master.eSettings.TVAllSeasonsFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsFanart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.AllSeasonsFanart, True)
                    End If
                Case "LandscapePath"
                    If Not IsAllSeasons AndAlso Master.eSettings.TVSeasonLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonLandscape) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.SeasonLandscape, True)
                    ElseIf IsAllSeasons AndAlso Master.eSettings.TVAllSeasonsLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsLandscape) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.AllSeasonsLandscape, True)
                    End If
                Case "PosterPath"
                    If Not IsAllSeasons AndAlso Master.eSettings.TVSeasonPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonPoster) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.SeasonPoster, True)
                    ElseIf IsAllSeasons AndAlso Master.eSettings.TVAllSeasonsPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsPoster) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.AllSeasonsPoster, True)
                    End If
            End Select
            If ScrapeModifiers.AnyEnabled Then
                If Master.eSettings.TVGeneralClickScrapeAsk Then
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Ask,
                        Master.DefaultOptions_TV,
                        ScrapeModifiers,
                        Enums.ContentType.TVSeason
                        )
                Else
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Auto,
                        Master.DefaultOptions_TV,
                        ScrapeModifiers,
                        Enums.ContentType.TVSeason
                        )
                End If
            End If
        End If
    End Sub

    Private Sub dgvTVSeasons_CellDoubleClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVSeasons.CellDoubleClick
        If e.RowIndex < 0 Then Exit Sub

        If fScanner.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVEpisode.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwCleanDB.IsBusy Then Return

        Dim indX As Integer = dgvTVSeasons.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvTVSeasons.Item("idSeason", indX).Value)
        Dim tmpDBTVSeason As Database.DBElement = Master.DB.Load_TVSeason(ID, True, False)
        Edit_TVSeason(tmpDBTVSeason)
    End Sub

    Private Sub dgvTVSeasons_CellEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVSeasons.CellEnter
        Dim currMainTabTag = MainTab_GetCurrentTag()
        If Not currMainTabTag.ContentType = Enums.ContentType.TV OrElse Not currList = 1 Then Return

        tmrWait_TVShow.Stop()
        tmrWait_Movie.Stop()
        tmrWait_MovieSet.Stop()
        tmrWait_TVEpisode.Stop()
        tmrWait_TVSeason.Stop()
        tmrLoad_TVShow.Stop()
        tmrLoad_Movie.Stop()
        tmrLoad_MovieSet.Stop()
        tmrLoad_TVEpisode.Stop()
        tmrLoad_TVSeason.Stop()

        currRow_TVSeason = e.RowIndex
        tmrWait_TVSeason.Start()
    End Sub

    Private Sub dgvTVSeasons_CellMouseEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVSeasons.CellMouseEnter
        Dim colName As String = dgvTVSeasons.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        dgvTVSeasons.ShowCellToolTips = True

        If colName = "HasWatched" AndAlso e.RowIndex >= 0 AndAlso Not CInt(dgvTVSeasons.Rows(e.RowIndex).Cells("Season").Value) = -1 Then
            oldStatus = GetStatus()
            Cursor = Cursors.Hand
            SetStatus(Master.eLang.GetString(885, "Change Watched Status"))
        ElseIf (
            colName = "BannerPath" OrElse
            colName = "FanartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "PosterPath"
            ) AndAlso e.RowIndex >= 0 Then
            dgvTVSeasons.ShowCellToolTips = False

            If Master.eSettings.TVGeneralClickScrape AndAlso Not bwTVSeasonScraper.IsBusy Then
                oldStatus = GetStatus()
                Dim IsAllSeasons = CInt(dgvTVSeasons.Rows(e.RowIndex).Cells("Season").Value) = -1
                Dim ScrapeFor As String = String.Empty
                Dim ScrapeType As String = String.Empty
                Dim Title As String = dgvTVSeasons.Rows(e.RowIndex).Cells("Title").Value.ToString
                Select Case colName
                    Case "BannerPath"
                        If Not IsAllSeasons AndAlso Master.eSettings.TVSeasonBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonBanner) OrElse
                            IsAllSeasons AndAlso Master.eSettings.TVAllSeasonsBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsBanner) Then
                            ScrapeFor = Master.eLang.GetString(1060, "Banner Only")
                        End If
                    Case "FanartPath"
                        If Not IsAllSeasons AndAlso Master.eSettings.TVSeasonFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonFanart) OrElse
                            IsAllSeasons AndAlso Master.eSettings.TVAllSeasonsFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsFanart) Then
                            ScrapeFor = Master.eLang.GetString(73, "Fanart Only")
                        End If
                    Case "LandscapePath"
                        If Not IsAllSeasons AndAlso Master.eSettings.TVSeasonLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonLandscape) OrElse
                            IsAllSeasons AndAlso Master.eSettings.TVAllSeasonsLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsLandscape) Then
                            ScrapeFor = Master.eLang.GetString(1061, "Landscape Only")
                        End If
                    Case "PosterPath"
                        If Not IsAllSeasons AndAlso Master.eSettings.TVSeasonPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonPoster) OrElse
                            IsAllSeasons AndAlso Master.eSettings.TVAllSeasonsPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsPoster) Then
                            ScrapeFor = Master.eLang.GetString(72, "Poster Only")
                        End If
                End Select

                If Not String.IsNullOrEmpty(ScrapeFor) Then
                    If Master.eSettings.TVGeneralClickScrapeAsk Then
                        ScrapeType = Master.eLang.GetString(77, "Ask (Require Input If No Exact Match)")
                    Else
                        ScrapeType = Master.eLang.GetString(69, "Automatic (Force Best Match)")
                    End If
                    Cursor = Cursors.Hand
                    SetStatus(String.Format("Scrape ""{0}"" for {1} - {2}", Title, ScrapeFor, ScrapeType))
                Else
                    oldStatus = String.Empty
                End If
            Else
                oldStatus = String.Empty
            End If
        Else
            oldStatus = String.Empty
        End If
    End Sub

    Private Sub dgvTVSeasons_CellMouseLeave(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVSeasons.CellMouseLeave
        Cursor = Cursors.Default
        If Not String.IsNullOrEmpty(oldStatus) Then SetStatus(oldStatus)
    End Sub

    Private Sub dgvTVSeasons_CellPainting(ByVal sender As Object, ByVal e As DataGridViewCellPaintingEventArgs) Handles dgvTVSeasons.CellPainting
        Dim colName As String = dgvTVSeasons.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If e.RowIndex >= 0 AndAlso Not dgvTVSeasons.Item(e.ColumnIndex, e.RowIndex).Displayed Then
            e.Handled = True
            Return
        End If

        'icons for column header
        If (
            colName = "BannerPath" OrElse
            colName = "FanartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "PosterPath" OrElse
            colName = "HasWatched"
            ) AndAlso e.RowIndex = -1 Then
            e.PaintBackground(e.ClipBounds, False)

            Dim pt As Point = e.CellBounds.Location
            Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

            pt.X += offset
            pt.Y = 3

            If colName = "BannerPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 2)
            ElseIf colName = "FanartPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 9)
            ElseIf colName = "LandscapePath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 10)
            ElseIf colName = "PosterPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 12)
            ElseIf colName = "HasWatched" Then
                ilColumnIcons.Draw(e.Graphics, pt, 17)
            End If

            e.Handled = True

        End If

        'text fields
        If (
            colName = "Episodes" OrElse
            colName = "Season" OrElse
            colName = "Title" OrElse
            colName = "strAired" OrElse
            colName = "strTMDB" OrElse
            colName = "strTVDB"
            ) AndAlso e.RowIndex >= 0 Then
            If Convert.ToBoolean(dgvTVSeasons.Item("Missing", e.RowIndex).Value) AndAlso Not CInt(dgvTVSeasons.Item("Season", e.RowIndex).Value) = -1 Then
                e.CellStyle.ForeColor = MediaListColors.Missing.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.Missing.SelectionForeColor
            ElseIf Convert.ToBoolean(dgvTVSeasons.Item("Mark", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = MediaListColors.Marked.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.Marked.SelectionForeColor
            ElseIf Convert.ToBoolean(dgvTVSeasons.Item("New", e.RowIndex).Value) OrElse
                Not String.IsNullOrEmpty(dgvTVSeasons.Item("NewEpisodes", e.RowIndex).Value.ToString) AndAlso CInt(dgvTVSeasons.Item("NewEpisodes", e.RowIndex).Value) > 0 Then
                e.CellStyle.ForeColor = MediaListColors.New.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.New.SelectionForeColor
            Else
                e.CellStyle.ForeColor = MediaListColors.Default.ForeColor
                e.CellStyle.Font = New Font("Segoe UI", 8.25, FontStyle.Regular)
                e.CellStyle.SelectionForeColor = MediaListColors.Default.SelectionForeColor
            End If
        End If

        If e.ColumnIndex >= 2 AndAlso e.RowIndex >= 0 Then

            'background
            If Convert.ToBoolean(dgvTVSeasons.Item("Lock", e.RowIndex).Value) Then
                e.CellStyle.BackColor = MediaListColors.Locked.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Locked.SelectionBackColor
            Else
                e.CellStyle.BackColor = MediaListColors.Default.BackColor
                e.CellStyle.SelectionBackColor = MediaListColors.Default.SelectionBackColor
            End If

            'path fields
            If (
                colName = "BannerPath" OrElse
                colName = "FanartPath" OrElse
                colName = "LandscapePath" OrElse
                colName = "NfoPath" OrElse
                colName = "PosterPath"
                ) Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Not String.IsNullOrEmpty(e.Value.ToString), 0, 1))
                e.Handled = True
            End If

            'boolean fields
            If colName = "HasWatched" AndAlso Not CInt(dgvTVSeasons.Item("Season", e.RowIndex).Value) = -1 Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Convert.ToBoolean(e.Value), 0, 1))
                e.Handled = True
            End If
        End If

        'set the *All Seasons season number to "invisible"
        If e.RowIndex >= 0 AndAlso colName = "Season" AndAlso CInt(dgvTVSeasons.Item("Season", e.RowIndex).Value) = -1 Then
            e.CellStyle.ForeColor = e.CellStyle.BackColor
            e.CellStyle.SelectionForeColor = e.CellStyle.SelectionBackColor
        End If
    End Sub

    Private Sub dgvTVSeasons_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles dgvTVSeasons.KeyDown
        'stop enter key from selecting next list item
        e.Handled = e.KeyCode = Keys.Enter
    End Sub

    Private Sub dgvTVSeasons_KeyPress(ByVal sender As Object, ByVal e As KeyPressEventArgs) Handles dgvTVSeasons.KeyPress
        If StringUtils.AlphaNumericOnly(e.KeyChar) OrElse e.KeyChar = Convert.ToChar(Keys.Space) Then
            KeyBuffer = String.Concat(KeyBuffer, e.KeyChar.ToString.ToLower)
            tmrKeyBuffer.Start()
            For Each drvRow As DataGridViewRow In dgvTVSeasons.Rows
                If drvRow.Cells("Title").Value.ToString.StartsWith(KeyBuffer) Then
                    drvRow.Selected = True
                    dgvTVSeasons.CurrentCell = drvRow.Cells("Title")
                    Exit For
                End If
            Next
        ElseIf e.KeyChar = Convert.ToChar(Keys.Enter) Then
            If fScanner.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVEpisode.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwCleanDB.IsBusy Then Return

            Dim indX As Integer = dgvTVSeasons.SelectedRows(0).Index
            Dim ID As Long = Convert.ToInt64(dgvTVSeasons.Item("idSeason", indX).Value)
            Dim tmpDBTVSeason As Database.DBElement = Master.DB.Load_TVSeason(ID, True, False)
            Edit_TVSeason(tmpDBTVSeason)
        End If
    End Sub

    Private Sub dgvTVSeasons_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles dgvTVSeasons.MouseDown
        If e.Button = MouseButtons.Right And dgvTVSeasons.RowCount > 0 Then

            cmnuSeason.Enabled = False

            Dim dgvHTI As DataGridView.HitTestInfo = dgvTVSeasons.HitTest(e.X, e.Y)
            If dgvHTI.Type = DataGridViewHitTestType.Cell Then

                If dgvTVSeasons.SelectedRows.Count > 1 AndAlso dgvTVSeasons.Rows(dgvHTI.RowIndex).Selected Then
                    Dim bShowMark As Boolean = False
                    Dim bShowUnmark As Boolean = False
                    Dim bShowLock As Boolean = False
                    Dim bShowUnlock As Boolean = False
                    Dim bShowUnwatched As Boolean = False
                    Dim bShowWatched As Boolean = False

                    cmnuSeason.Enabled = True
                    cmnuSeasonEdit.Visible = False
                    cmnuSeasonEditSeparator.Visible = False
                    cmnuSeasonScrape.Visible = False

                    For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                        'if any one item is set as unmarked, show menu "Mark"
                        'if any one item is set as marked, show menu "Unmark"
                        If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
                            bShowMark = True
                            If bShowUnmark AndAlso bShowLock AndAlso bShowUnlock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnmark = True
                            If bShowMark AndAlso bShowLock AndAlso bShowUnlock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        End If
                        'if any one item is set as unlocked, show menu "Lock"
                        'if any one item is set as locked, show menu "Unlock"
                        If Not Convert.ToBoolean(sRow.Cells("Lock").Value) Then
                            bShowLock = True
                            If bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnlock = True
                            If bShowLock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        End If
                        'if any one item is set as unlocked, show menu "Lock"
                        'if any one item is set as locked, show menu "Unlock"
                        If Not CInt(sRow.Cells("Season").Value) = -1 AndAlso Not Convert.ToBoolean(sRow.Cells("HasWatched").Value) Then
                            bShowWatched = True
                            If bShowLock AndAlso bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnwatched = True
                            If bShowLock AndAlso bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched Then Exit For
                        End If
                    Next

                    cmnuSeasonTitle.Text = Master.eLang.GetString(106, ">> Multiple <<")

                    'Lock / Unlock menu
                    cmnuSeasonLock.Visible = bShowLock
                    cmnuSeasonUnlock.Visible = bShowUnlock

                    'Mark / Unmark menu
                    cmnuSeasonMark.Visible = bShowMark
                    cmnuSeasonUnmark.Visible = bShowUnmark

                    'Watched / Unwatched menu
                    cmnuSeasonWatched.Visible = bShowWatched
                    cmnuSeasonUnwatched.Visible = bShowUnwatched

                Else
                    cmnuSeasonEdit.Visible = True
                    cmnuSeasonEditSeparator.Visible = True
                    cmnuSeasonScrape.Visible = True

                    cmnuSeasonTitle.Text = String.Concat(">> ", dgvTVSeasons.Item("Title", dgvHTI.RowIndex).Value, " <<")
                    cmnuSeasonEdit.Enabled = Convert.ToInt32(dgvTVSeasons.Item("Season", dgvHTI.RowIndex).Value) >= 0

                    If Not dgvTVSeasons.Rows(dgvHTI.RowIndex).Selected OrElse Not currList = 1 Then
                        prevRow_TVSeason = -1
                        currList = 1
                        dgvTVSeasons.CurrentCell = Nothing
                        dgvTVSeasons.ClearSelection()
                        dgvTVSeasons.Rows(dgvHTI.RowIndex).Selected = True
                        dgvTVSeasons.CurrentCell = dgvTVSeasons.Item("Title", dgvHTI.RowIndex)
                    Else
                        cmnuSeason.Enabled = True
                    End If

                    'Lock / Unlock menu
                    Dim bIsLocked As Boolean = Convert.ToBoolean(dgvTVSeasons.Item("Lock", dgvHTI.RowIndex).Value)
                    cmnuSeasonLock.Visible = Not bIsLocked
                    cmnuSeasonUnlock.Visible = bIsLocked

                    'Mark / Unmark menu
                    Dim bIsMarked As Boolean = Convert.ToBoolean(dgvTVSeasons.Item("Mark", dgvHTI.RowIndex).Value)
                    cmnuSeasonMark.Visible = Not bIsMarked
                    cmnuSeasonUnmark.Visible = bIsMarked

                    'Watched / Unwatched menu
                    Dim bIsWatched As Boolean = False
                    Dim bIsAllSeasons As Boolean = CInt(dgvTVSeasons.Item("Season", dgvHTI.RowIndex).Value) = -1
                    If Not bIsAllSeasons Then
                        bIsWatched = Convert.ToBoolean(dgvTVSeasons.Item("HasWatched", dgvHTI.RowIndex).Value)
                    End If
                    cmnuSeasonWatched.Visible = Not bIsWatched AndAlso Not bIsAllSeasons
                    cmnuSeasonUnwatched.Visible = bIsWatched AndAlso Not bIsAllSeasons
                End If
            Else
                cmnuSeason.Enabled = False
                cmnuSeasonTitle.Text = Master.eLang.GetString(845, ">> No Item Selected <<")
            End If
        End If
    End Sub

    Private Sub dgvTVSeasons_SelectionChanged(sender As Object, e As EventArgs) Handles dgvTVSeasons.SelectionChanged
        If dgvTVSeasons.SelectedRows.Count > 0 Then
            If dgvTVSeasons.SelectedRows.Count > 1 Then
                SetStatus(String.Format(Master.eLang.GetString(627, "Selected Items: {0}"), dgvTVSeasons.SelectedRows.Count))
            ElseIf dgvTVSeasons.SelectedRows.Count = 1 Then
                SetStatus(dgvTVSeasons.SelectedRows(0).Cells("Title").Value.ToString)
            End If
            currRow_TVSeason = dgvTVSeasons.SelectedRows(0).Index
            If Not currList = 1 Then
                currList = 1
                prevRow_TVSeason = -1
                DataGridView_Row_Select_TVSeason(dgvTVSeasons.SelectedRows(0).Index)
            End If
        Else
            currRow_TVSeason = -3
        End If
    End Sub

    Private Sub dgvTVSeasons_Sorted(ByVal sender As Object, ByVal e As EventArgs) Handles dgvTVSeasons.Sorted
        prevRow_TVSeason = -1
        If dgvTVSeasons.RowCount > 0 Then
            dgvTVSeasons.CurrentCell = Nothing
            dgvTVSeasons.ClearSelection()
            'dgvTVSeasons.Rows(0).Selected = True
            'dgvTVSeasons.CurrentCell = dgvTVSeasons.Rows(0).Cells("Title")
        End If

        DataGridView_Sorting_Save_TVSeason()
    End Sub

    Private Sub dgvTVShows_CellClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVShows.CellClick
        If e.RowIndex < 0 Then Exit Sub

        Dim colName As String = dgvTVShows.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If colName = "HasWatched" Then
            TaskManager_CreateTask(Enums.ContentType.TVShow,
                       Enums.SelectionType.Selected,
                       TaskManager.TaskItem.TaskType.SetWatchedState,
                       If(CBool(dgvTVShows.Rows(e.RowIndex).Cells("HasWatched").Value), False, True),
                       String.Empty)

        ElseIf Master.eSettings.TVGeneralClickScrape AndAlso (
            colName = "BannerPath" OrElse
            colName = "CharacterArtPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "EFanartsPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "ThemePath"
            ) AndAlso Not bwTVScraper.IsBusy Then

            Dim objCell As DataGridViewCell = dgvTVShows.Rows(e.RowIndex).Cells(e.ColumnIndex)
            dgvTVShows.ClearSelection()
            dgvTVShows.Rows(objCell.RowIndex).Selected = True
            currRow_TVShow = objCell.RowIndex

            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Select Case colName
                Case "BannerPath"
                    If Master.eSettings.TVShowBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainBanner) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainBanner, True)
                    End If
                Case "CharacterArtPath"
                    If Master.eSettings.TVShowCharacterArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainCharacterArt) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainCharacterArt, True)
                    End If
                Case "ClearArtPath"
                    If Master.eSettings.TVShowClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainClearArt) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainClearArt, True)
                    End If
                Case "ClearLogoPath"
                    If Master.eSettings.TVShowClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainClearLogo) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainClearLogo, True)
                    End If
                Case "EFanartsPath"
                    If Master.eSettings.TVShowExtrafanartsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainExtrafanarts) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainExtrafanarts, True)
                    End If
                Case "FanartPath"
                    If Master.eSettings.TVShowFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainFanart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainFanart, True)
                    End If
                Case "KeyartPath"
                    If Master.eSettings.TVShowKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainKeyart) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainKeyart, True)
                    End If
                Case "LandscapePath"
                    If Master.eSettings.TVShowLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainLandscape) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainLandscape, True)
                    End If
                Case "NfoPath"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainNFO, True)
                Case "PosterPath"
                    If Master.eSettings.MoviePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainPoster) Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainPoster, True)
                    End If
                Case "ThemePath"
                    If Master.eSettings.MovieThemeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Theme_TV() Then
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainTheme, True)
                    End If
            End Select
            If ScrapeModifiers.AnyEnabled Then
                If Master.eSettings.TVGeneralClickScrapeAsk Then
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Ask,
                        Master.DefaultOptions_TV,
                        ScrapeModifiers,
                        Enums.ContentType.TVShow
                        )
                Else
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Auto,
                        Master.DefaultOptions_TV,
                        ScrapeModifiers,
                        Enums.ContentType.TVShow
                        )
                End If
            End If
        End If
    End Sub

    Private Sub dgvTVShows_CellDoubleClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVShows.CellDoubleClick
        If e.RowIndex < 0 Then Exit Sub

        If fScanner.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVEpisode.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwCleanDB.IsBusy Then Return

        Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
        Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
        Dim tmpDBTVShow As Database.DBElement = Master.DB.Load_TVShow(ID, True, False)
        Edit_TVShow(tmpDBTVShow)
    End Sub

    Private Sub dgvTVShows_CellEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVShows.CellEnter
        Dim currMainTabTag = MainTab_GetCurrentTag()
        If Not currMainTabTag.ContentType = Enums.ContentType.TV OrElse Not currList = 0 Then Return

        tmrWait_Movie.Stop()
        tmrWait_MovieSet.Stop()
        tmrWait_TVSeason.Stop()
        tmrWait_TVEpisode.Stop()
        tmrWait_TVShow.Stop()
        tmrLoad_Movie.Stop()
        tmrLoad_MovieSet.Stop()
        tmrLoad_TVSeason.Stop()
        tmrLoad_TVEpisode.Stop()
        tmrLoad_TVShow.Stop()

        currRow_TVShow = e.RowIndex
        tmrWait_TVShow.Start()
    End Sub

    Private Sub dgvTVShows_CellMouseEnter(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVShows.CellMouseEnter
        Dim colName As String = dgvTVShows.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        dgvTVShows.ShowCellToolTips = True

        If colName = "HasWatched" AndAlso e.RowIndex >= 0 Then
            oldStatus = GetStatus()
            Cursor = Cursors.Hand
            SetStatus(Master.eLang.GetString(885, "Change Watched Status"))
        ElseIf (
            colName = "BannerPath" OrElse
            colName = "CharacterArtPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "EFanartsPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "ThemePath"
            ) AndAlso e.RowIndex >= 0 Then
            dgvTVShows.ShowCellToolTips = False

            If Master.eSettings.TVGeneralClickScrape AndAlso Not bwTVScraper.IsBusy Then
                oldStatus = GetStatus()
                Dim ScrapeFor As String = String.Empty
                Dim ScrapeType As String = String.Empty
                Dim Title As String = dgvTVShows.Rows(e.RowIndex).Cells("Title").Value.ToString
                Select Case colName
                    Case "BannerPath"
                        If Master.eSettings.TVShowBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainBanner) Then
                            ScrapeFor = Master.eLang.GetString(1060, "Banner Only")
                        End If
                    Case "CharacterArtPath"
                        If Master.eSettings.TVShowCharacterArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainCharacterArt) Then
                            ScrapeFor = Master.eLang.GetString(1121, "CharacterArt Only")
                        End If
                    Case "ClearArtPath"
                        If Master.eSettings.TVShowClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainClearArt) Then
                            ScrapeFor = Master.eLang.GetString(1122, "ClearArt Only")
                        End If
                    Case "ClearLogoPath"
                        If Master.eSettings.TVShowClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainClearLogo) Then
                            ScrapeFor = Master.eLang.GetString(1123, "ClearLogo Only")
                        End If
                    Case "EFanartsPath"
                        If Master.eSettings.TVShowExtrafanartsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainExtrafanarts) Then
                            ScrapeFor = Master.eLang.GetString(975, "Extrafanarts Only")
                        End If
                    Case "FanartPath"
                        If Master.eSettings.TVShowFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainFanart) Then
                            ScrapeFor = Master.eLang.GetString(73, "Fanart Only")
                        End If
                    Case "KeyartPath"
                        If Master.eSettings.TVShowKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainKeyart) Then
                            ScrapeFor = Master.eLang.GetString(1238, "Keyart Only")
                        End If
                    Case "LandscapePath"
                        If Master.eSettings.TVShowLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainLandscape) Then
                            ScrapeFor = Master.eLang.GetString(1061, "Landscape Only")
                        End If
                    Case "NfoPath"
                        ScrapeFor = Master.eLang.GetString(71, "NFO Only")
                    Case "PosterPath"
                        If Master.eSettings.TVShowPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainPoster) Then
                            ScrapeFor = Master.eLang.GetString(72, "Poster Only")
                        End If
                    Case "ThemePath"
                        If Master.eSettings.TvShowThemeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Theme_TV() Then
                            ScrapeFor = Master.eLang.GetString(1125, "Theme Only")
                        End If
                End Select

                If Not String.IsNullOrEmpty(ScrapeFor) Then
                    If Master.eSettings.TVGeneralClickScrapeAsk Then
                        ScrapeType = Master.eLang.GetString(77, "Ask (Require Input If No Exact Match)")
                    Else
                        ScrapeType = Master.eLang.GetString(69, "Automatic (Force Best Match)")
                    End If
                    Cursor = Cursors.Hand
                    SetStatus(String.Format("Scrape ""{0}"" for {1} - {2}", Title, ScrapeFor, ScrapeType))
                Else
                    oldStatus = String.Empty
                End If
            Else
                oldStatus = String.Empty
            End If
        Else
            oldStatus = String.Empty
        End If
    End Sub

    Private Sub dgvTVShows_CellMouseLeave(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvTVShows.CellMouseLeave
        Cursor = Cursors.Default
        If Not String.IsNullOrEmpty(oldStatus) Then SetStatus(oldStatus)
    End Sub

    Private Sub dgvTVShows_CellPainting(ByVal sender As Object, ByVal e As DataGridViewCellPaintingEventArgs) Handles dgvTVShows.CellPainting
        Dim colName As String = dgvTVShows.Columns(e.ColumnIndex).Name
        If String.IsNullOrEmpty(colName) Then
            Return
        End If

        If e.RowIndex >= 0 AndAlso Not dgvTVShows.Item(e.ColumnIndex, e.RowIndex).Displayed Then
            e.Handled = True
            Return
        End If

        'icons for column header
        If (
            colName = "BannerPath" OrElse
            colName = "CharacterArtPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "EFanartsPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "ThemePath" OrElse
            colName = "HasWatched" OrElse
            colName = "Rating" OrElse
            colName = "iUserRating"
            ) AndAlso e.RowIndex = -1 Then
            e.PaintBackground(e.ClipBounds, False)

            Dim pt As Point = e.CellBounds.Location
            Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

            pt.X += offset
            pt.Y = 3

            If colName = "BannerPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 2)
            ElseIf colName = "CharacterArtPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 3)
            ElseIf colName = "ClearArtPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 4)
            ElseIf colName = "ClearLogoPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 5)
            ElseIf colName = "EFanartsPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 7)
            ElseIf colName = "FanartPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 9)
            ElseIf colName = "KeyartPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 20)
            ElseIf colName = "LandscapePath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 10)
            ElseIf colName = "NfoPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 11)
            ElseIf colName = "PosterPath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 12)
            ElseIf colName = "ThemePath" Then
                ilColumnIcons.Draw(e.Graphics, pt, 15)
            ElseIf colName = "HasWatched" Then
                ilColumnIcons.Draw(e.Graphics, pt, 17)
            ElseIf colName = "Rating" Then
                ilColumnIcons.Draw(e.Graphics, pt, 18)
            ElseIf colName = "iUserRating" Then
                ilColumnIcons.Draw(e.Graphics, pt, 19)
            End If

            e.Handled = True

        End If

        'text fields
        If (
            colName = "Country" OrElse
            colName = "Creator" OrElse
            colName = "Director" OrElse
            colName = "Episodes" OrElse
            colName = "Genre" OrElse
            colName = "Language" OrElse
            colName = "ListTitle" OrElse
            colName = "MPAA" OrElse
            colName = "Premiered" OrElse
            colName = "Rating" OrElse
            colName = "Runtime" OrElse
            colName = "Status" OrElse
            colName = "strIMDB" OrElse
            colName = "strOriginalTitle" OrElse
            colName = "strTMDB" OrElse
            colName = "Studio" OrElse
            colName = "TVDB" OrElse
            colName = "iUserRating"
            ) AndAlso e.RowIndex >= 0 Then
            If Convert.ToBoolean(dgvTVShows.Item("Mark", e.RowIndex).Value) Then
                e.CellStyle.ForeColor = MediaListColors.Marked.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.Marked.SelectionForeColor
            ElseIf Convert.ToBoolean(dgvTVShows.Item("New", e.RowIndex).Value) OrElse
                Not String.IsNullOrEmpty(dgvTVShows.Item("NewEpisodes", e.RowIndex).Value.ToString) AndAlso CInt(dgvTVShows.Item("NewEpisodes", e.RowIndex).Value) > 0 Then
                e.CellStyle.ForeColor = MediaListColors.New.ForeColor
                e.CellStyle.SelectionForeColor = MediaListColors.New.SelectionForeColor
            Else
                e.CellStyle.ForeColor = MediaListColors.Default.ForeColor
                e.CellStyle.Font = New Font("Segoe UI", 8.25, FontStyle.Regular)
                e.CellStyle.SelectionForeColor = MediaListColors.Default.SelectionForeColor
            End If
        End If

        If e.ColumnIndex >= 1 AndAlso e.RowIndex >= 0 Then

            'background
            If Convert.ToBoolean(dgvTVShows.Item("Lock", e.RowIndex).Value) Then
                e.CellStyle.BackColor = Color.LightSteelBlue
                e.CellStyle.SelectionBackColor = Color.DarkTurquoise
            Else
                e.CellStyle.BackColor = Color.White
                e.CellStyle.SelectionBackColor = Color.FromKnownColor(KnownColor.Highlight)
            End If

            'path fields
            If (
            colName = "BannerPath" OrElse
            colName = "CharacterArtPath" OrElse
            colName = "ClearArtPath" OrElse
            colName = "ClearLogoPath" OrElse
            colName = "EFanartsPath" OrElse
            colName = "FanartPath" OrElse
            colName = "KeyartPath" OrElse
            colName = "LandscapePath" OrElse
            colName = "NfoPath" OrElse
            colName = "PosterPath" OrElse
            colName = "ThemePath"
            ) Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Not String.IsNullOrEmpty(e.Value.ToString), 0, 1))
                e.Handled = True
            End If

            'boolean fields
            If colName = "HasWatched" Then
                e.PaintBackground(e.ClipBounds, True)

                Dim pt As Point = e.CellBounds.Location
                Dim offset As Integer = Convert.ToInt32((e.CellBounds.Width - ilColumnIcons.ImageSize.Width) / 2)

                pt.X += offset
                pt.Y = e.CellBounds.Top + 3
                ilColumnIcons.Draw(e.Graphics, pt, If(Convert.ToBoolean(e.Value), 0, 1))
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub dgvTVShows_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles dgvTVShows.KeyDown
        'stop enter key from selecting next list item
        e.Handled = (e.KeyCode = Keys.Enter)
        If e.Modifiers = Keys.Control AndAlso e.KeyCode = Keys.F Then txtSearchShows.Focus()
    End Sub

    Private Sub dgvTVShows_KeyPress(ByVal sender As Object, ByVal e As KeyPressEventArgs) Handles dgvTVShows.KeyPress
        If StringUtils.AlphaNumericOnly(e.KeyChar) OrElse e.KeyChar = Convert.ToChar(Keys.Space) Then
            KeyBuffer = String.Concat(KeyBuffer, e.KeyChar.ToString.ToLower)
            tmrKeyBuffer.Start()
            For Each drvRow As DataGridViewRow In dgvTVShows.Rows
                If drvRow.Cells("ListTitle").Value.ToString.ToLower.StartsWith(KeyBuffer) Then
                    drvRow.Selected = True
                    dgvTVShows.CurrentCell = drvRow.Cells("ListTitle")
                    Exit For
                End If
            Next
        ElseIf e.KeyChar = Convert.ToChar(Keys.Enter) Then
            If fScanner.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVEpisode.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwCleanDB.IsBusy Then Return

            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
            Dim tmpDBTVShow As Database.DBElement = Master.DB.Load_TVShow(ID, True, False)
            Edit_TVShow(tmpDBTVShow)
        End If
    End Sub

    Private Sub dgvTVShows_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles dgvTVShows.MouseDown
        If e.Button = MouseButtons.Right And dgvTVShows.RowCount > 0 Then

            cmnuShow.Enabled = False

            Dim dgvHTI As DataGridView.HitTestInfo = dgvTVShows.HitTest(e.X, e.Y)

            If dgvHTI.Type = DataGridViewHitTestType.Cell Then
                If dgvTVShows.SelectedRows.Count > 1 AndAlso dgvTVShows.Rows(dgvHTI.RowIndex).Selected Then
                    Dim bShowMark As Boolean = False
                    Dim bShowUnmark As Boolean = False
                    Dim bShowLock As Boolean = False
                    Dim bShowUnlock As Boolean = False
                    Dim bShowUnwatched As Boolean = False
                    Dim bShowWatched As Boolean = False

                    cmnuShow.Enabled = True
                    cmnuShowChange.Visible = False
                    cmnuShowEdit.Visible = False
                    cmnuShowScrape.Visible = False

                    For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                        'if any one item is set as unmarked, show menu "Mark"
                        'if any one item is set as marked, show menu "Unmark"
                        If Not Convert.ToBoolean(sRow.Cells("Mark").Value) Then
                            bShowMark = True
                            If bShowUnmark AndAlso bShowLock AndAlso bShowUnlock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnmark = True
                            If bShowMark AndAlso bShowLock AndAlso bShowUnlock AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        End If
                        'if any one item is set as unlocked, show menu "Lock"
                        'if any one item is set as locked, show menu "Unlock"
                        If Not Convert.ToBoolean(sRow.Cells("Lock").Value) Then
                            bShowLock = True
                            If bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnlock = True
                            If bShowLock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched AndAlso bShowUnwatched Then Exit For
                        End If
                        'if any one item is set as unwatched, show menu "Mark as Watched"
                        'if any one item is set as watched, show menu "Mark as Unwatched"
                        If Not Convert.ToBoolean(sRow.Cells("HasWatched").Value) Then
                            bShowWatched = True
                            If bShowLock AndAlso bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowUnwatched Then Exit For
                        Else
                            bShowUnwatched = True
                            If bShowLock AndAlso bShowUnlock AndAlso bShowMark AndAlso bShowUnmark AndAlso bShowWatched Then Exit For
                        End If
                    Next

                    cmnuShowTitle.Text = Master.eLang.GetString(106, ">> Multiple <<")

                    'Genre submenu
                    mnuGenresGenre.Tag = String.Empty
                    If Not mnuGenresGenre.Items.Contains(String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")) Then
                        mnuGenresGenre.Items.Insert(0, String.Concat(Master.eLang.GetString(27, "Select Genre"), "..."))
                    End If
                    mnuGenresGenre.SelectedItem = String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")
                    mnuGenresAdd.Enabled = False
                    mnuGenresNew.Text = String.Empty
                    mnuGenresRemove.Enabled = False
                    mnuGenresSet.Enabled = False

                    'Language submenu
                    mnuLanguagesLanguage.Tag = String.Empty
                    If Not mnuLanguagesLanguage.Items.Contains(String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")) Then
                        mnuLanguagesLanguage.Items.Insert(0, String.Concat(Master.eLang.GetString(1199, "Select Language"), "..."))
                    End If
                    mnuLanguagesLanguage.SelectedItem = String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")
                    mnuLanguagesSet.Enabled = False

                    'Lock / Unlock menu
                    cmnuShowLock.Visible = bShowLock
                    cmnuShowUnlock.Visible = bShowUnlock

                    'Mark / Unmark menu
                    cmnuShowMark.Visible = bShowMark
                    cmnuShowUnmark.Visible = bShowUnmark

                    'Tag submenu
                    mnuTagsTag.Tag = String.Empty
                    If Not mnuTagsTag.Items.Contains(String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")) Then
                        mnuTagsTag.Items.Insert(0, String.Concat(Master.eLang.GetString(1021, "Select Tag"), "..."))
                    End If
                    mnuTagsTag.SelectedItem = String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")
                    mnuTagsAdd.Enabled = False
                    mnuTagsNew.Text = String.Empty
                    mnuTagsRemove.Enabled = False
                    mnuTagsSet.Enabled = False

                    'Watched / Unwatched menu
                    cmnuShowWatched.Visible = bShowWatched
                    cmnuShowUnwatched.Visible = bShowUnwatched
                Else
                    cmnuShowChange.Visible = True
                    cmnuShowEdit.Visible = True
                    cmnuShowScrape.Visible = True

                    cmnuShowTitle.Text = String.Concat(">> ", dgvTVShows.Item("Title", dgvHTI.RowIndex).Value, " <<")

                    If Not dgvTVShows.Rows(dgvHTI.RowIndex).Selected OrElse Not currList = 0 Then
                        prevRow_TVShow = -1
                        currList = 0
                        dgvTVShows.CurrentCell = Nothing
                        dgvTVShows.ClearSelection()
                        dgvTVShows.Rows(dgvHTI.RowIndex).Selected = True
                        dgvTVShows.CurrentCell = dgvTVShows.Item("ListTitle", dgvHTI.RowIndex)
                        'cmnuShow.Enabled = True
                    Else
                        cmnuShow.Enabled = True
                    End If

                    'Genre submenu
                    mnuGenresGenre.Tag = dgvTVShows.Item("Genre", dgvHTI.RowIndex).Value
                    If Not mnuGenresGenre.Items.Contains(String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")) Then
                        mnuGenresGenre.Items.Insert(0, String.Concat(Master.eLang.GetString(27, "Select Genre"), "..."))
                    End If
                    mnuGenresGenre.SelectedItem = String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")
                    mnuGenresAdd.Enabled = False
                    mnuGenresNew.Text = String.Empty
                    mnuGenresRemove.Enabled = False
                    mnuGenresSet.Enabled = False

                    'Language submenu
                    Dim strLang As String = dgvTVShows.Item("Language", dgvHTI.RowIndex).Value.ToString
                    Dim Language = APIXML.ScraperLanguages.Languages.FirstOrDefault(Function(l) l.Abbreviation = strLang)
                    If Language IsNot Nothing AndAlso Not String.IsNullOrEmpty(Language.Description) Then
                        mnuLanguagesLanguage.SelectedItem = Language.Description
                    Else
                        If Not mnuLanguagesLanguage.Items.Contains(String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")) Then
                            mnuLanguagesLanguage.Items.Insert(0, String.Concat(Master.eLang.GetString(1199, "Select Language"), "..."))
                        End If
                        mnuLanguagesLanguage.SelectedItem = String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")
                    End If
                    mnuLanguagesSet.Enabled = False

                    'Lock / Unlock menu
                    Dim bIsLocked As Boolean = Convert.ToBoolean(dgvTVShows.Item("Lock", dgvHTI.RowIndex).Value)
                    cmnuShowLock.Visible = Not bIsLocked
                    cmnuShowUnlock.Visible = bIsLocked

                    'Mark / Unmark menu
                    Dim bIsMarked As Boolean = Convert.ToBoolean(dgvTVShows.Item("Mark", dgvHTI.RowIndex).Value)
                    cmnuShowMark.Visible = Not bIsMarked
                    cmnuShowUnmark.Visible = bIsMarked

                    'Tag submenu
                    mnuTagsTag.Tag = dgvTVShows.Item("Tag", dgvHTI.RowIndex).Value
                    If Not mnuTagsTag.Items.Contains(String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")) Then
                        mnuTagsTag.Items.Insert(0, String.Concat(Master.eLang.GetString(1021, "Select Tag"), "..."))
                    End If
                    mnuTagsTag.SelectedItem = String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")
                    mnuTagsAdd.Enabled = False
                    mnuTagsNew.Text = String.Empty
                    mnuTagsRemove.Enabled = False
                    mnuTagsSet.Enabled = False

                    'Watched / Unwatched menu
                    Dim bIsWatched As Boolean = Convert.ToBoolean(dgvTVShows.Item("HasWatched", dgvHTI.RowIndex).Value)
                    cmnuShowWatched.Visible = Not bIsWatched
                    cmnuShowUnwatched.Visible = bIsWatched
                End If
            Else
                cmnuShow.Enabled = False
                cmnuShowTitle.Text = Master.eLang.GetString(845, ">> No Item Selected <<")
            End If
        End If
    End Sub

    Private Sub dgvTVShows_RowsRemoved(sender As Object, e As DataGridViewRowsRemovedEventArgs) Handles dgvTVShows.RowsRemoved
        If dgvTVShows.RowCount = 0 OrElse dgvTVShows.SelectedRows.Count = 0 Then
            bsTVSeasons.DataSource = Nothing
            dgvTVSeasons.DataSource = Nothing
            bsTVEpisodes.DataSource = Nothing
            dgvTVEpisodes.DataSource = Nothing
        End If
        MainTab_SetCount_TV()
    End Sub

    Private Sub dgvTVShows_RowsAdded(sender As Object, e As DataGridViewRowsAddedEventArgs) Handles dgvTVShows.RowsAdded
        If dgvTVShows.RowCount = 0 OrElse dgvTVShows.SelectedRows.Count = 0 Then
            bsTVSeasons.DataSource = Nothing
            dgvTVSeasons.DataSource = Nothing
            bsTVEpisodes.DataSource = Nothing
            dgvTVEpisodes.DataSource = Nothing
        End If
        MainTab_SetCount_TV()
    End Sub

    Private Sub dgvTVShows_SelectionChanged(sender As Object, e As EventArgs) Handles dgvTVShows.SelectionChanged
        If dgvTVShows.SelectedRows.Count > 0 Then
            If dgvTVShows.SelectedRows.Count > 1 Then
                SetStatus(String.Format(Master.eLang.GetString(627, "Selected Items: {0}"), dgvTVShows.SelectedRows.Count))
            ElseIf dgvTVShows.SelectedRows.Count = 1 Then
                SetStatus(dgvTVShows.SelectedRows(0).Cells("TVShowPath").Value.ToString)
            End If
            currRow_TVShow = dgvTVShows.SelectedRows(0).Index
            If Not currList = 0 Then
                currList = 0
                prevRow_TVShow = -1
                DataGridView_Row_Select_TVShow(dgvTVShows.SelectedRows(0).Index)
            End If
        Else
            currRow_TVShow = -3
        End If
    End Sub

    Private Sub dgvTVShows_Sorted(ByVal sender As Object, ByVal e As EventArgs) Handles dgvTVShows.Sorted
        prevRow_TVShow = -1
        If dgvTVShows.RowCount > 0 Then
            dgvTVShows.CurrentCell = Nothing
            dgvTVShows.ClearSelection()
            dgvTVShows.Rows(0).Selected = True
            dgvTVShows.CurrentCell = dgvTVShows.Rows(0).Cells("ListTitle")
        End If

        'If Me.dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "Year" AndAlso Me.dgvTVShows.SortOrder = 1 Then
        '    Me.btnFilterSortYear_Shows.Tag = "ASC"
        '    Me.btnFilterSortYear_Shows.Image = My.Resources.asc
        'ElseIf Me.dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "Year" AndAlso Me.dgvTVShows.SortOrder = 2 Then
        '    Me.btnFilterSortYear_Shows.Tag = "DESC"
        '    Me.btnFilterSortYear_Shows.Image = My.Resources.desc
        'Else
        '    Me.btnFilterSortYear_Shows.Tag = String.Empty
        '    Me.btnFilterSortYear_Shows.Image = Nothing
        'End If

        'If Me.dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "Rating" AndAlso Me.dgvTVShows.SortOrder = 1 Then
        '    Me.btnFilterSortRating_Shows.Tag = "ASC"
        '    Me.btnFilterSortRating_Shows.Image = My.Resources.asc
        'ElseIf Me.dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "Rating" AndAlso Me.dgvTVShows.SortOrder = 2 Then
        '    Me.btnFilterSortRating_Shows.Tag = "DESC"
        '    Me.btnFilterSortRating_Shows.Image = My.Resources.desc
        'Else
        '    Me.btnFilterSortRating_Shows.Tag = String.Empty
        '    Me.btnFilterSortRating_Shows.Image = Nothing
        'End If

        If dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "SortedTitle" AndAlso dgvTVShows.SortOrder = 1 Then
            btnFilterSortTitle_Shows.Tag = "ASC"
            btnFilterSortTitle_Shows.Image = My.Resources.asc
        ElseIf dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "SortedTitle" AndAlso dgvTVShows.SortOrder = 2 Then
            btnFilterSortTitle_Shows.Tag = "DESC"
            btnFilterSortTitle_Shows.Image = My.Resources.desc
        Else
            btnFilterSortTitle_Shows.Tag = String.Empty
            btnFilterSortTitle_Shows.Image = Nothing
        End If

        'If Me.dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "DateAdded" AndAlso Me.dgvTVShows.SortOrder = 1 Then
        '    Me.btnFilterSortDateAdded_Shows.Tag = "ASC"
        '    Me.btnFilterSortDateAdded_Shows.Image = My.Resources.asc
        'ElseIf Me.dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "DateAdded" AndAlso Me.dgvTVShows.SortOrder = 2 Then
        '    Me.btnFilterSortDateAdded_Shows.Tag = "DESC"
        '    Me.btnFilterSortDateAdded_Shows.Image = My.Resources.desc
        'Else
        '    Me.btnFilterSortDateAdded_Shows.Tag = String.Empty
        '    Me.btnFilterSortDateAdded_Shows.Image = Nothing
        'End If

        'If Me.dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "DateModified" AndAlso Me.dgvTVShows.SortOrder = 1 Then
        '    Me.btnFilterSortDateModified_Shows.Tag = "ASC"
        '    Me.btnFilterSortDateModified_Shows.Image = My.Resources.asc
        'ElseIf Me.dgvTVShows.SortedColumn.HeaderCell.Value.ToString = "DateModified" AndAlso Me.dgvTVShows.SortOrder = 2 Then
        '    Me.btnFilterSortDateModified_Shows.Tag = "DESC"
        '    Me.btnFilterSortDateModified_Shows.Image = My.Resources.desc
        'Else
        '    Me.btnFilterSortDateModified_Shows.Tag = String.Empty
        '    Me.btnFilterSortDateModified_Shows.Image = Nothing
        'End If

        DataGridView_Sorting_Save_TVShow()
    End Sub

    Private Sub Edit_Movie(ByRef DBMovie As Database.DBElement, Optional ByVal EventType As Enums.AddonEventType = Enums.AddonEventType.AfterEdit_Movie)
        SetControlsEnabled(False)
        If DBMovie.IsOnline OrElse FileUtils.Common.CheckOnlineStatus(DBMovie, True) Then
            Using dEditMovie As New dlgEdit_Movie
                Addons.Instance.Run(Enums.AddonEventType.BeforeEdit_Movie, Nothing, Nothing, False, DBMovie)
                Select Case dEditMovie.ShowDialog(DBMovie)
                    Case DialogResult.OK
                        DBMovie = dEditMovie.Result
                        Addons.Instance.Run(EventType, Nothing, Nothing, False, DBMovie)
                        tslLoading.Text = String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":")
                        Master.DB.Save_Movie(DBMovie, False, True, True, True, False)
                        DataGridView_Row_Update_Movie(DBMovie.ID)
                    Case DialogResult.Retry
                        Dim ScrapeModifiers As New Structures.ScrapeModifiers
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
                        Scraper_CreateList(
                            Enums.SelectionType.Selected,
                            Enums.ScrapeType.Manually,
                            Master.DefaultOptions_Movie,
                            ScrapeModifiers,
                            Enums.ContentType.Movie
                            )
                    Case DialogResult.Abort
                        Dim ScrapeModifiers As New Structures.ScrapeModifiers
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.DoSearch, True)
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
                        Scraper_CreateList(
                            Enums.SelectionType.Selected,
                            Enums.ScrapeType.Manually,
                            Master.DefaultOptions_Movie,
                            ScrapeModifiers,
                            Enums.ContentType.Movie
                            )
                    Case Else
                        If InfoCleared Then InfoScreen_Load_Movie(DBMovie.ID)
                End Select
            End Using
        End If
        SetControlsEnabled(True)
    End Sub

    Private Sub Edit_MovieSet(ByRef DBMovieSet As Database.DBElement)
        SetControlsEnabled(False)
        'If DBMovieSet.IsOnline OrElse FileUtils.Common.CheckOnlineStatusset(DBMovieSet, True) Then
        Using dEditMovieSet As New dlgEdit_Movieset
            Addons.Instance.Run(Enums.AddonEventType.BeforeEdit_Movieset, Nothing, Nothing, False, DBMovieSet)
            'AddHandler ModulesManager.Instance.GenericEvent, AddressOf dEditMovie.GenericRunCallBack
            Select Case dEditMovieSet.ShowDialog(DBMovieSet)
                Case DialogResult.OK
                    DBMovieSet = dEditMovieSet.Result
                    Addons.Instance.Run(Enums.AddonEventType.AfterEdit_Movieset, Nothing, Nothing, False, DBMovieSet)
                    tslLoading.Text = String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":")
                    Master.DB.Save_Movieset(DBMovieSet, False, True, True, True, True)
                    DataGridView_Row_Update_Movieset(DBMovieSet.ID)
                Case DialogResult.Retry
                    Dim ScrapeModifier As New Structures.ScrapeModifiers
                    Functions.SetScrapeModifiers(ScrapeModifier, Enums.ModifierType.All, True)
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Manually,
                        Master.DefaultOptions_Movieset,
                        ScrapeModifier,
                        Enums.ContentType.Movieset
                        )
                Case DialogResult.Abort
                    Dim ScrapeModifier As New Structures.ScrapeModifiers
                    Functions.SetScrapeModifiers(ScrapeModifier, Enums.ModifierType.DoSearch, True)
                    Functions.SetScrapeModifiers(ScrapeModifier, Enums.ModifierType.All, True)
                    Scraper_CreateList(
                        Enums.SelectionType.Selected,
                        Enums.ScrapeType.Manually,
                        Master.DefaultOptions_Movieset,
                        ScrapeModifier,
                        Enums.ContentType.Movieset
                        )
                Case Else
                    If InfoCleared Then InfoScreen_Load_Movieset(DBMovieSet.ID)
            End Select
            'RemoveHandler ModulesManager.Instance.GenericEvent, AddressOf dEditMovie.GenericRunCallBack
        End Using
        'End If
        SetControlsEnabled(True)
    End Sub

    Private Sub Edit_TVEpisode(ByRef DBTVEpisode As Database.DBElement, Optional ByVal EventType As Enums.AddonEventType = Enums.AddonEventType.AfterEdit_TVEpisode)
        SetControlsEnabled(False)
        If DBTVEpisode.IsOnline OrElse FileUtils.Common.CheckOnlineStatus(DBTVEpisode, True) Then
            Using dEditTVEpisode As New dlgEdit_TVEpisode
                Addons.Instance.Run(Enums.AddonEventType.BeforeEdit_TVEpisode, Nothing, Nothing, False, DBTVEpisode)
                Select Case dEditTVEpisode.ShowDialog(DBTVEpisode)
                    Case DialogResult.OK
                        DBTVEpisode = dEditTVEpisode.Result
                        Addons.Instance.Run(EventType, Nothing, Nothing, False, DBTVEpisode)
                        tslLoading.Text = String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":")
                        Master.DB.Save_TVEpisode(DBTVEpisode, False, True, True, True, True)
                        DataGridView_Row_Update_TVEpisode(DBTVEpisode.ID)
                    Case Else
                        If InfoCleared Then InfoScreen_Load_TVEpisode(DBTVEpisode.ID)
                End Select
            End Using
        End If
        SetControlsEnabled(True)
    End Sub

    Private Sub Edit_TVSeason(ByRef DBTVSeason As Database.DBElement, Optional ByVal EventType As Enums.AddonEventType = Enums.AddonEventType.AfterEdit_TVSeason)
        SetControlsEnabled(False)
        If DBTVSeason.IsOnline OrElse FileUtils.Common.CheckOnlineStatus(DBTVSeason, True) Then
            Using dEditTVSeason As New dlgEdit_TVSeason
                Addons.Instance.Run(Enums.AddonEventType.BeforeEdit_TVSeason, Nothing, Nothing, False, DBTVSeason)
                'AddHandler ModulesManager.Instance.GenericEvent, AddressOf dEditTVSeason.GenericRunCallBack
                Select Case dEditTVSeason.ShowDialog(DBTVSeason)
                    Case DialogResult.OK
                        DBTVSeason = dEditTVSeason.Result
                        Addons.Instance.Run(EventType, Nothing, Nothing, False, DBTVSeason)
                        tslLoading.Text = String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":")
                        Master.DB.Save_TVSeason(DBTVSeason, False, True, True)
                        DataGridView_Row_Update_TVSeason(DBTVSeason.ID)
                    Case Else
                        'If Me.InfoCleared Then Me.LoadInfo_TVSeason(CInt(DBTVSeason.ID)) 'TODO: 
                End Select
                'RemoveHandler ModulesManager.Instance.GenericEvent, AddressOf dEditTVSeason.GenericRunCallBack
            End Using
        End If
        SetControlsEnabled(True)
    End Sub

    Private Sub Edit_TVShow(ByRef DBTVShow As Database.DBElement, Optional ByVal EventType As Enums.AddonEventType = Enums.AddonEventType.AfterEdit_TVShow)
        SetControlsEnabled(False)
        If DBTVShow.IsOnline OrElse FileUtils.Common.CheckOnlineStatus(DBTVShow, True) Then
            Using dEditTVShow As New dlgEdit_TVShow
                Addons.Instance.Run(Enums.AddonEventType.BeforeEdit_TVShow, Nothing, Nothing, False, DBTVShow)
                Select Case dEditTVShow.ShowDialog(DBTVShow)
                    Case DialogResult.OK
                        DBTVShow = dEditTVShow.Result
                        Addons.Instance.Run(EventType, Nothing, Nothing, False, DBTVShow)
                        tslLoading.Text = String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":")
                        Master.DB.Save_TVShow(DBTVShow, False, True, True, True)
                        DataGridView_Row_Update_TVShow(DBTVShow.ID)
                    Case DialogResult.Retry
                        Dim ScrapeModifiers As New Structures.ScrapeModifiers
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
                        Scraper_CreateList(
                            Enums.SelectionType.Selected,
                            Enums.ScrapeType.Manually,
                            Master.DefaultOptions_TV,
                            ScrapeModifiers,
                            Enums.ContentType.TVShow
                            )
                    Case DialogResult.Abort
                        Dim ScrapeModifiers As New Structures.ScrapeModifiers
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.DoSearch, True)
                        Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
                        Scraper_CreateList(
                            Enums.SelectionType.Selected,
                            Enums.ScrapeType.Manually,
                            Master.DefaultOptions_TV,
                            ScrapeModifiers,
                            Enums.ContentType.TVShow
                            )
                    Case Else
                        If InfoCleared Then InfoScreen_Load_TVShow(DBTVShow.ID)
                End Select
            End Using
        End If
        SetControlsEnabled(True)
    End Sub

    Private Sub Filter_Clear_Movie(Optional ByVal reload As Boolean = False)
        lblFilter_Movies.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1091, "Inactive"))
        bsMovies.RemoveFilter()
        FilterArray_Movies.Clear()
        filSearch_Movies = String.Empty
        filYear_Movies = String.Empty

        RemoveHandler txtSearchMovies.TextChanged, AddressOf Filter_Search_TextBox_TextChanged_Movie
        txtSearchMovies.Text = String.Empty
        AddHandler txtSearchMovies.TextChanged, AddressOf Filter_Search_TextBox_TextChanged_Movie
        If cbSearchMovies.Items.Count > 0 Then
            cbSearchMovies.SelectedIndex = 0
        End If

        chkFilterDuplicates_Movies.Checked = False
        chkFilterLock_Movies.Checked = False
        chkFilterMark_Movies.Checked = False
        chkFilterMarkCustom1_Movies.Checked = False
        chkFilterMarkCustom2_Movies.Checked = False
        chkFilterMarkCustom3_Movies.Checked = False
        chkFilterMarkCustom4_Movies.Checked = False
        chkFilterMissing_Movies.Checked = False
        chkFilterNew_Movies.Checked = False
        chkFilterTolerance_Movies.Checked = False
        pnlFilterMissingItems_Movies.Visible = False
        rbFilterAnd_Movies.Checked = True
        rbFilterOr_Movies.Checked = False

        'Country
        filCountry_Movies = String.Empty
        txtFilterCountry_Movies.Text = String.Empty
        For i As Integer = 0 To clbFilterCountries_Movies.Items.Count - 1
            clbFilterCountries_Movies.SetItemChecked(i, False)
        Next
        'Data Field
        filDataField_Movies = String.Empty
        txtFilterDataField_Movies.Text = String.Empty
        For i As Integer = 0 To clbFilterDataFields_Movies.Items.Count - 1
            clbFilterDataFields_Movies.SetItemChecked(i, False)
        Next
        'Genre
        filGenre_Movies = String.Empty
        txtFilterGenre_Movies.Text = String.Empty
        For i As Integer = 0 To clbFilterGenres_Movies.Items.Count - 1
            clbFilterGenres_Movies.SetItemChecked(i, False)
        Next
        'Source
        filSource_Movies = String.Empty
        txtFilterSource_Movies.Text = String.Empty
        For i As Integer = 0 To clbFilterSources_Movies.Items.Count - 1
            clbFilterSources_Movies.SetItemChecked(i, False)
        Next
        'Tag
        filTag_Movies = String.Empty
        txtFilterTag_Movies.Text = String.Empty
        For i As Integer = 0 To clbFilterTags_Movies.Items.Count - 1
            clbFilterTags_Movies.SetItemChecked(i, False)
        Next
        'VideoSource
        filVideoSource_Movies = String.Empty
        txtFilterVideoSource_Movies.Text = String.Empty
        For i As Integer = 0 To clbFilterVideoSources_Movies.Items.Count - 1
            clbFilterVideoSources_Movies.SetItemChecked(i, False)
        Next

        RemoveHandler cbFilterDataField_Movies.SelectedIndexChanged, AddressOf clbFilterDataFields_Movies_LostFocus
        If cbFilterDataField_Movies.Items.Count > 0 Then
            cbFilterDataField_Movies.SelectedIndex = 0
        End If
        AddHandler cbFilterDataField_Movies.SelectedIndexChanged, AddressOf clbFilterDataFields_Movies_LostFocus

        RemoveHandler cbFilterYearFrom_Movies.SelectedIndexChanged, AddressOf cbFilterYearFrom_Movies_SelectedIndexChanged
        If cbFilterYearFrom_Movies.Items.Count > 0 Then
            cbFilterYearFrom_Movies.SelectedIndex = 0
        End If
        AddHandler cbFilterYearFrom_Movies.SelectedIndexChanged, AddressOf cbFilterYearFrom_Movies_SelectedIndexChanged

        RemoveHandler cbFilterYearModFrom_Movies.SelectedIndexChanged, AddressOf cbFilterYearModFrom_Movies_SelectedIndexChanged
        If cbFilterYearModFrom_Movies.Items.Count > 0 Then
            cbFilterYearModFrom_Movies.SelectedIndex = 0
        End If
        AddHandler cbFilterYearModFrom_Movies.SelectedIndexChanged, AddressOf cbFilterYearModFrom_Movies_SelectedIndexChanged

        RemoveHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged
        If cbFilterYearTo_Movies.Items.Count > 0 Then
            cbFilterYearTo_Movies.SelectedIndex = 0
        End If
        cbFilterYearTo_Movies.Enabled = False
        AddHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged

        RemoveHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged
        If cbFilterYearModTo_Movies.Items.Count > 0 Then
            cbFilterYearModTo_Movies.SelectedIndex = 0
        End If
        cbFilterYearModTo_Movies.Enabled = False
        AddHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged

        If reload Then DataGridView_FillList_Main(True, False, False)

        Addons.Instance.RuntimeObjects.FilterMovies = String.Empty
    End Sub

    Private Sub Filter_Clear_Movieset(Optional ByVal reload As Boolean = False)
        lblFilter_MovieSets.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1091, "Inactive"))
        bsMovieSets.RemoveFilter()
        FilterArray_MovieSets.Clear()
        filSearch_MovieSets = String.Empty

        RemoveHandler txtSearchMovieSets.TextChanged, AddressOf Filter_Search_TextBox_TextChanged_Movieset
        txtSearchMovieSets.Text = String.Empty
        AddHandler txtSearchMovieSets.TextChanged, AddressOf Filter_Search_TextBox_TextChanged_Movieset
        If cbSearchMovieSets.Items.Count > 0 Then
            cbSearchMovieSets.SelectedIndex = 0
        End If

        chkFilterEmpty_MovieSets.Checked = False
        chkFilterLock_MovieSets.Checked = False
        chkFilterMark_MovieSets.Checked = False
        chkFilterMissing_MovieSets.Checked = False
        chkFilterMultiple_MovieSets.Checked = False
        chkFilterNew_MovieSets.Checked = False
        chkFilterOne_MovieSets.Checked = False
        pnlFilterMissingItems_MovieSets.Visible = False
        rbFilterAnd_MovieSets.Checked = True
        rbFilterOr_MovieSets.Checked = False

        If reload Then DataGridView_FillList_Main(False, True, False)
    End Sub

    Private Sub Filter_Clear_TVShow(Optional ByVal reload As Boolean = False)
        lblFilter_Shows.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1091, "Inactive"))
        bsTVShows.RemoveFilter()
        FilterArray_TVShows.Clear()
        filSearch_TVShows = String.Empty

        RemoveHandler txtSearchShows.TextChanged, AddressOf Filter_Search_TextBox_TextChanged_TVShow
        txtSearchShows.Text = String.Empty
        AddHandler txtSearchShows.TextChanged, AddressOf Filter_Search_TextBox_TextChanged_TVShow
        If cbSearchShows.Items.Count > 0 Then
            cbSearchShows.SelectedIndex = 0
        End If

        chkFilterLock_Shows.Checked = False
        chkFilterMark_Shows.Checked = False
        chkFilterMissing_Shows.Checked = False
        chkFilterNewEpisodes_Shows.Checked = False
        chkFilterNewShows_Shows.Checked = False
        pnlFilterMissingItems_Shows.Visible = False
        rbFilterAnd_Shows.Checked = True
        rbFilterOr_Shows.Checked = False

        'Genre
        filGenre_TVShows = String.Empty
        txtFilterGenre_Shows.Text = String.Empty
        For i As Integer = 0 To clbFilterGenres_Shows.Items.Count - 1
            clbFilterGenres_Shows.SetItemChecked(i, False)
        Next
        'Source
        filSource_TVShows = String.Empty
        txtFilterSource_Shows.Text = String.Empty
        For i As Integer = 0 To clbFilterSource_Shows.Items.Count - 1
            clbFilterSource_Shows.SetItemChecked(i, False)
        Next
        'Tag
        filTag_TVShows = String.Empty
        txtFilterTag_Shows.Text = String.Empty
        For i As Integer = 0 To clbFilterTags_Shows.Items.Count - 1
            clbFilterTags_Shows.SetItemChecked(i, False)
        Next

        If reload Then DataGridView_FillList_Main(False, False, True)

        Addons.Instance.RuntimeObjects.FilterTVShows = String.Empty
    End Sub

    Private Sub Filter_Enable_Movie(ByVal isEnabled As Boolean)
        btnClearFilters_Movies.Enabled = isEnabled
        btnFilterMissing_Movies.Enabled = isEnabled
        btnFilterSortDateAdded_Movies.Enabled = isEnabled
        btnFilterSortDateModified_Movies.Enabled = isEnabled
        btnFilterSortRating_Movies.Enabled = isEnabled
        btnFilterSortTitle_Movies.Enabled = isEnabled
        btnFilterSortYear_Movies.Enabled = isEnabled
        cbFilterDataField_Movies.Enabled = isEnabled
        cbFilterLists_Movies.Enabled = isEnabled
        cbFilterLists_MovieSets.Enabled = isEnabled
        cbFilterLists_Shows.Enabled = isEnabled
        cbFilterYearFrom_Movies.Enabled = isEnabled
        cbFilterYearModFrom_Movies.Enabled = isEnabled
        cbSearchMovies.Enabled = isEnabled
        chkFilterDuplicates_Movies.Enabled = isEnabled
        chkFilterLock_Movies.Enabled = isEnabled
        chkFilterMark_Movies.Enabled = isEnabled
        chkFilterMarkCustom1_Movies.Enabled = isEnabled
        chkFilterMarkCustom2_Movies.Enabled = isEnabled
        chkFilterMarkCustom3_Movies.Enabled = isEnabled
        chkFilterMarkCustom4_Movies.Enabled = isEnabled
        chkFilterMissing_Movies.Enabled = If(Master.eSettings.MovieMissingItemsAnyEnabled, isEnabled, False)
        chkFilterNew_Movies.Enabled = isEnabled
        chkFilterTolerance_Movies.Enabled = If(Master.eSettings.MovieLevTolerance > 0, isEnabled, False)
        pnlFilterMissingItems_Movies.Visible = If(Not isEnabled, False, pnlFilterMissingItems_Movies.Visible)
        rbFilterAnd_Movies.Enabled = isEnabled
        rbFilterOr_Movies.Enabled = isEnabled
        txtFilterCountry_Movies.Enabled = isEnabled
        txtFilterGenre_Movies.Enabled = isEnabled
        txtFilterDataField_Movies.Enabled = isEnabled
        txtFilterSource_Movies.Enabled = isEnabled
        txtFilterVideoSource_Movies.Enabled = isEnabled
    End Sub

    Private Sub Filter_Enable_Movieset(ByVal isEnabled As Boolean)
        btnClearFilters_MovieSets.Enabled = isEnabled
        btnFilterMissing_MovieSets.Enabled = isEnabled
        'Me.btnSortDate.Enabled = isEnabled
        'Me.btnIMDBRating.Enabled = isEnabled
        'Me.btnSortTitle.Enabled = isEnabled
        'Me.cbFilterFileSource.Enabled = isEnabled
        'Me.cbFilterYear.Enabled = isEnabled
        'Me.cbFilterYearMod.Enabled = isEnabled
        cbSearchMovieSets.Enabled = isEnabled
        'Me.chkFilterDupe.Enabled = isEnabled
        chkFilterEmpty_MovieSets.Enabled = isEnabled
        chkFilterLock_MovieSets.Enabled = isEnabled
        chkFilterMark_MovieSets.Enabled = isEnabled
        'Me.chkFilterMarkCustom1.Enabled = isEnabled
        'Me.chkFilterMarkCustom2.Enabled = isEnabled
        'Me.chkFilterMarkCustom3.Enabled = isEnabled
        'Me.chkFilterMarkCustom4.Enabled = isEnabled
        chkFilterMissing_MovieSets.Enabled = If(Master.eSettings.MovieSetMissingItemsAnyEnabled, isEnabled, False)
        chkFilterMultiple_MovieSets.Enabled = isEnabled
        chkFilterNew_MovieSets.Enabled = isEnabled
        chkFilterOne_MovieSets.Enabled = isEnabled
        'Me.chkFilterTolerance.Enabled = If(Master.eSettings.MovieLevTolerance > 0, isEnabled, False)
        pnlFilterMissingItems_MovieSets.Visible = If(Not isEnabled, False, pnlFilterMissingItems_MovieSets.Visible)
        rbFilterAnd_MovieSets.Enabled = isEnabled
        rbFilterOr_MovieSets.Enabled = isEnabled
        'Me.txtFilterCountry.Enabled = isEnabled
        'Me.txtFilterGenre.Enabled = isEnabled
        'Me.txtFilterSource.Enabled = isEnabled
    End Sub

    Private Sub Filter_Enable_TVShow(ByVal isEnabled As Boolean)
        btnClearFilters_Shows.Enabled = isEnabled
        btnFilterMissing_Shows.Enabled = isEnabled
        'Me.btnSortDate.Enabled = isEnabled
        'Me.btnIMDBRating.Enabled = isEnabled
        btnFilterSortTitle_Shows.Enabled = isEnabled
        'Me.cbFilterFileSource.Enabled = isEnabled
        'Me.cbFilterYear.Enabled = isEnabled
        'Me.cbFilterYearMod.Enabled = isEnabled
        cbSearchShows.Enabled = isEnabled
        'Me.chkFilterDuplicates.Enabled = isEnabled
        chkFilterLock_Shows.Enabled = isEnabled
        chkFilterMark_Shows.Enabled = isEnabled
        'Me.chkFilterMarkCustom1.Enabled = isEnabled
        'Me.chkFilterMarkCustom2.Enabled = isEnabled
        'Me.chkFilterMarkCustom3.Enabled = isEnabled
        'Me.chkFilterMarkCustom4.Enabled = isEnabled
        chkFilterMissing_Shows.Enabled = If(Master.eSettings.TVShowMissingItemsAnyEnabled, isEnabled, False)
        chkFilterNewEpisodes_Shows.Enabled = isEnabled
        chkFilterNewShows_Shows.Enabled = isEnabled
        'Me.chkFilterTolerance.Enabled = If(Master.eSettings.MovieLevTolerance > 0, isEnabled, False)
        pnlFilterMissingItems_Shows.Visible = If(Not isEnabled, False, pnlFilterMissingItems_Shows.Visible)
        rbFilterAnd_Shows.Enabled = isEnabled
        rbFilterOr_Shows.Enabled = isEnabled
        'Me.txtFilterCountry.Enabled = isEnabled
        'Me.txtFilterGenre.Enabled = isEnabled
        txtFilterSource_Shows.Enabled = isEnabled
    End Sub

    Private Sub Filter_Modifier_And_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles rbFilterAnd_Movies.Click
        'Countries
        If clbFilterCountries_Movies.CheckedItems.Count > 0 Then
            txtFilterCountry_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filCountry_Movies)

            Dim lstCountries As New List(Of String)
            lstCountries.AddRange(clbFilterCountries_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterCountry_Movies.Text = String.Join(" AND ", lstCountries.ToArray)

            For i As Integer = 0 To lstCountries.Count - 1
                If lstCountries.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstCountries.Item(i) = "Country IS NULL OR Country = ''"
                Else
                    lstCountries.Item(i) = String.Format("Country LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstCountries.Item(i)))
                End If
            Next

            filCountry_Movies = String.Join(" AND ", lstCountries.ToArray)

            FilterArray_Movies.Add(filCountry_Movies)
        End If

        'Data Fields
        If clbFilterDataFields_Movies.CheckedItems.Count > 0 Then
            txtFilterDataField_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filDataField_Movies)

            Dim lstDataFields As New List(Of String)
            lstDataFields.AddRange(clbFilterDataFields_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterDataField_Movies.Text = String.Join(" AND ", lstDataFields.ToArray)

            For i As Integer = 0 To lstDataFields.Count - 1
                Dim bInteger As Boolean = lstDataFields.Item(i) = "Top250"
                If cbFilterDataField_Movies.SelectedIndex = 0 Then
                    If bInteger Then
                        lstDataFields.Item(i) = String.Format("{0} IS NULL", lstDataFields.Item(i))
                    Else
                        lstDataFields.Item(i) = String.Format("{0} IS NULL OR {0} = ''", lstDataFields.Item(i))
                    End If
                Else
                    If bInteger Then
                        lstDataFields.Item(i) = String.Format("{0} NOT IS NULL", lstDataFields.Item(i))
                    Else
                        lstDataFields.Item(i) = String.Format("{0} NOT IS NULL AND {0} NOT = ''", lstDataFields.Item(i))
                    End If
                End If
            Next

            filDataField_Movies = String.Join(" AND ", lstDataFields.ToArray)

            FilterArray_Movies.Add(filDataField_Movies)
        End If

        'Genres
        If clbFilterGenres_Movies.CheckedItems.Count > 0 Then
            txtFilterGenre_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filGenre_Movies)

            Dim lstGenres As New List(Of String)
            lstGenres.AddRange(clbFilterGenres_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterGenre_Movies.Text = String.Join(" AND ", lstGenres.ToArray)

            For i As Integer = 0 To lstGenres.Count - 1
                If lstGenres.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstGenres.Item(i) = "Genre IS NULL OR Genre = ''"
                Else
                    lstGenres.Item(i) = String.Format("Genre LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstGenres.Item(i)))
                End If
            Next

            filGenre_Movies = String.Join(" AND ", lstGenres.ToArray)

            FilterArray_Movies.Add(filGenre_Movies)
        End If

        'Tags
        If clbFilterTags_Movies.CheckedItems.Count > 0 Then
            txtFilterTag_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filTag_Movies)

            Dim lstTags As New List(Of String)
            lstTags.AddRange(clbFilterTags_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterTag_Movies.Text = String.Join(" AND ", lstTags.ToArray)

            For i As Integer = 0 To lstTags.Count - 1
                If lstTags.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstTags.Item(i) = "Tag IS NULL OR Tag = ''"
                Else
                    lstTags.Item(i) = String.Format("Tag LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstTags.Item(i)))
                End If
            Next

            filTag_Movies = String.Join(" AND ", lstTags.ToArray)

            FilterArray_Movies.Add(filTag_Movies)
        End If

        'VideoSources
        If clbFilterVideoSources_Movies.CheckedItems.Count > 0 Then
            txtFilterVideoSource_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filVideoSource_Movies)

            Dim lstVideoSources As New List(Of String)
            lstVideoSources.AddRange(clbFilterVideoSources_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterVideoSource_Movies.Text = String.Join(" AND ", lstVideoSources.ToArray)

            For i As Integer = 0 To lstVideoSources.Count - 1
                If lstVideoSources.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstVideoSources.Item(i) = "VideoSource IS NULL OR VideoSource = ''"
                Else
                    lstVideoSources.Item(i) = String.Format("VideoSource LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstVideoSources.Item(i)))
                End If
            Next

            filVideoSource_Movies = String.Join(" AND ", lstVideoSources.ToArray)

            FilterArray_Movies.Add(filVideoSource_Movies)
        End If

        If (Not String.IsNullOrEmpty(cbFilterYearFrom_Movies.Text) AndAlso Not cbFilterYearFrom_Movies.Text = Master.eLang.CommonWordsList.All) OrElse
            (Not String.IsNullOrEmpty(cbFilterYearTo_Movies.Text) AndAlso Not cbFilterYearTo_Movies.Text = Master.eLang.CommonWordsList.All) OrElse
            clbFilterCountries_Movies.CheckedItems.Count > 0 OrElse
            chkFilterDuplicates_Movies.Checked OrElse
            clbFilterGenres_Movies.CheckedItems.Count > 0 OrElse
            chkFilterLock_Movies.Checked OrElse
            chkFilterMark_Movies.Checked OrElse
            chkFilterMarkCustom1_Movies.Checked OrElse
            chkFilterMarkCustom2_Movies.Checked OrElse
            chkFilterMarkCustom3_Movies.Checked OrElse
            chkFilterMarkCustom4_Movies.Checked OrElse
            chkFilterMissing_Movies.Checked OrElse
            chkFilterNew_Movies.Checked OrElse
            Not clbFilterSources_Movies.CheckedItems.Count > 0 OrElse
            clbFilterTags_Movies.CheckedItems.Count > 0 OrElse
            chkFilterTolerance_Movies.Checked OrElse
            clbFilterVideoSources_Movies.CheckedItems.Count > 0 Then
            Filter_Run_Movie()
        End If
    End Sub

    Private Sub Filter_Modifier_And_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles rbFilterAnd_MovieSets.Click
        If chkFilterEmpty_MovieSets.Checked OrElse
            chkFilterLock_MovieSets.Checked OrElse
            chkFilterMark_MovieSets.Checked OrElse
            chkFilterMissing_MovieSets.Checked OrElse
            chkFilterMultiple_MovieSets.Checked OrElse
            chkFilterNew_MovieSets.Checked OrElse
            chkFilterOne_MovieSets.Checked Then
            Filter_Run_Movieset()
        End If
    End Sub

    Private Sub Filter_Modifier_And_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles rbFilterAnd_Shows.Click
        'Genres
        If clbFilterGenres_Shows.CheckedItems.Count > 0 Then
            txtFilterGenre_Shows.Text = String.Empty
            FilterArray_TVShows.Remove(filGenre_TVShows)

            Dim lstGenres As New List(Of String)
            lstGenres.AddRange(clbFilterGenres_Shows.CheckedItems.OfType(Of String).ToList)

            txtFilterGenre_Shows.Text = String.Join(" AND ", lstGenres.ToArray)

            For i As Integer = 0 To lstGenres.Count - 1
                If lstGenres.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstGenres.Item(i) = "Genre IS NULL OR Genre = ''"
                Else
                    lstGenres.Item(i) = String.Format("Genre LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstGenres.Item(i)))
                End If
            Next

            filGenre_TVShows = String.Join(" AND ", lstGenres.ToArray)

            FilterArray_TVShows.Add(filGenre_TVShows)
        End If

        'Tags
        If clbFilterTags_Shows.CheckedItems.Count > 0 Then
            txtFilterTag_Shows.Text = String.Empty
            FilterArray_TVShows.Remove(filTag_TVShows)

            Dim lstTags As New List(Of String)
            lstTags.AddRange(clbFilterTags_Shows.CheckedItems.OfType(Of String).ToList)

            txtFilterTag_Shows.Text = String.Join(" AND ", lstTags.ToArray)

            For i As Integer = 0 To lstTags.Count - 1
                If lstTags.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstTags.Item(i) = "Tag IS NULL OR Tag = ''"
                Else
                    lstTags.Item(i) = String.Format("Tag LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstTags.Item(i)))
                End If
            Next

            filTag_TVShows = String.Join(" AND ", lstTags.ToArray)

            FilterArray_TVShows.Add(filTag_TVShows)
        End If

        If clbFilterGenres_Shows.CheckedItems.Count > 0 OrElse
            chkFilterLock_Shows.Checked OrElse
            chkFilterMark_Shows.Checked OrElse
            chkFilterMissing_Shows.Checked OrElse
            chkFilterNewEpisodes_Shows.Checked OrElse
            chkFilterNewShows_Shows.Checked OrElse
            Not clbFilterSource_Shows.CheckedItems.Count > 0 OrElse
            clbFilterTags_Shows.CheckedItems.Count > 0 Then
            Filter_Run_TVShow()
        End If
    End Sub

    Private Sub Filter_Modifier_Or_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles rbFilterOr_Movies.Click
        'Countries
        If clbFilterCountries_Movies.CheckedItems.Count > 0 Then
            txtFilterCountry_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filCountry_Movies)

            Dim lstCountries As New List(Of String)
            lstCountries.AddRange(clbFilterCountries_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterCountry_Movies.Text = String.Join(" OR ", lstCountries.ToArray)

            For i As Integer = 0 To lstCountries.Count - 1
                If lstCountries.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstCountries.Item(i) = "Country IS NULL OR Country = ''"
                Else
                    lstCountries.Item(i) = String.Format("Country LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstCountries.Item(i)))
                End If
            Next

            filCountry_Movies = String.Join(" OR ", lstCountries.ToArray)

            FilterArray_Movies.Add(filCountry_Movies)
        End If

        'Genres
        If clbFilterGenres_Movies.CheckedItems.Count > 0 Then
            txtFilterGenre_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filGenre_Movies)

            Dim lstGenres As New List(Of String)
            lstGenres.AddRange(clbFilterGenres_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterGenre_Movies.Text = String.Join(" OR ", lstGenres.ToArray)

            For i As Integer = 0 To lstGenres.Count - 1
                If lstGenres.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstGenres.Item(i) = "Genre IS NULL OR Genre = ''"
                Else
                    lstGenres.Item(i) = String.Format("Genre LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstGenres.Item(i)))
                End If
            Next

            filGenre_Movies = String.Join(" OR ", lstGenres.ToArray)

            FilterArray_Movies.Add(filGenre_Movies)
        End If

        'Data Fields
        If clbFilterDataFields_Movies.CheckedItems.Count > 0 Then
            txtFilterDataField_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filDataField_Movies)

            Dim lstDataFields As New List(Of String)
            lstDataFields.AddRange(clbFilterDataFields_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterDataField_Movies.Text = String.Join(" OR ", lstDataFields.ToArray)

            For i As Integer = 0 To lstDataFields.Count - 1
                Dim bInteger As Boolean = lstDataFields.Item(i) = "Top250"
                If cbFilterDataField_Movies.SelectedIndex = 0 Then
                    If bInteger Then
                        lstDataFields.Item(i) = String.Format("{0} IS NULL", lstDataFields.Item(i))
                    Else
                        lstDataFields.Item(i) = String.Format("{0} IS NULL OR {0} = ''", lstDataFields.Item(i))
                    End If
                Else
                    If bInteger Then
                        lstDataFields.Item(i) = String.Format("{0} NOT IS NULL", lstDataFields.Item(i))
                    Else
                        lstDataFields.Item(i) = String.Format("{0} NOT IS NULL AND {0} NOT = ''", lstDataFields.Item(i))
                    End If
                End If
            Next

            filDataField_Movies = String.Join(" OR ", lstDataFields.ToArray)

            FilterArray_Movies.Add(filDataField_Movies)
        End If

        'Tags
        If clbFilterTags_Movies.CheckedItems.Count > 0 Then
            txtFilterTag_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filTag_Movies)

            Dim lstTags As New List(Of String)
            lstTags.AddRange(clbFilterTags_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterTag_Movies.Text = String.Join(" OR ", lstTags.ToArray)

            For i As Integer = 0 To lstTags.Count - 1
                If lstTags.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstTags.Item(i) = "Tag IS NULL OR Tag = ''"
                Else
                    lstTags.Item(i) = String.Format("Tag LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstTags.Item(i)))
                End If
            Next

            filTag_Movies = String.Join(" OR ", lstTags.ToArray)

            FilterArray_Movies.Add(filTag_Movies)
        End If

        'VideoSources
        If clbFilterVideoSources_Movies.CheckedItems.Count > 0 Then
            txtFilterVideoSource_Movies.Text = String.Empty
            FilterArray_Movies.Remove(filVideoSource_Movies)

            Dim lstVideoSources As New List(Of String)
            lstVideoSources.AddRange(clbFilterVideoSources_Movies.CheckedItems.OfType(Of String).ToList)

            txtFilterVideoSource_Movies.Text = String.Join(" OR ", lstVideoSources.ToArray)

            For i As Integer = 0 To lstVideoSources.Count - 1
                If lstVideoSources.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstVideoSources.Item(i) = "VideoSource IS NULL OR VideoSource = ''"
                Else
                    lstVideoSources.Item(i) = String.Format("VideoSource LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstVideoSources.Item(i)))
                End If
            Next

            filVideoSource_Movies = String.Join(" OR ", lstVideoSources.ToArray)

            FilterArray_Movies.Add(filVideoSource_Movies)
        End If

        If (Not String.IsNullOrEmpty(cbFilterYearFrom_Movies.Text) AndAlso Not cbFilterYearFrom_Movies.Text = Master.eLang.CommonWordsList.All) OrElse
            (Not String.IsNullOrEmpty(cbFilterYearTo_Movies.Text) AndAlso Not cbFilterYearTo_Movies.Text = Master.eLang.CommonWordsList.All) OrElse
            clbFilterCountries_Movies.CheckedItems.Count > 0 OrElse
            chkFilterDuplicates_Movies.Checked OrElse
            clbFilterGenres_Movies.CheckedItems.Count > 0 OrElse
            chkFilterLock_Movies.Checked OrElse
            chkFilterMark_Movies.Checked OrElse
            chkFilterMarkCustom1_Movies.Checked OrElse
            chkFilterMarkCustom2_Movies.Checked OrElse
            chkFilterMarkCustom3_Movies.Checked OrElse
            chkFilterMarkCustom4_Movies.Checked OrElse
            chkFilterMissing_Movies.Checked OrElse
            chkFilterNew_Movies.Checked OrElse
            Not clbFilterSources_Movies.CheckedItems.Count > 0 OrElse
            clbFilterTags_Movies.CheckedItems.Count > 0 OrElse
            chkFilterTolerance_Movies.Checked OrElse
            clbFilterVideoSources_Movies.CheckedItems.Count > 0 Then
            Filter_Run_Movie()
        End If
    End Sub

    Private Sub Filter_Modifier_Or_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles rbFilterOr_MovieSets.Click
        If chkFilterEmpty_MovieSets.Checked OrElse chkFilterMark_MovieSets.Checked OrElse chkFilterNew_MovieSets.Checked OrElse chkFilterLock_MovieSets.Checked OrElse
            chkFilterMissing_MovieSets.Checked OrElse chkFilterMultiple_MovieSets.Checked OrElse chkFilterOne_MovieSets.Checked Then Filter_Run_Movieset()
    End Sub

    Private Sub Filter_Modifier_Or_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles rbFilterOr_Shows.Click
        'Genre
        If clbFilterGenres_Shows.CheckedItems.Count > 0 Then
            txtFilterGenre_Shows.Text = String.Empty
            FilterArray_TVShows.Remove(filGenre_TVShows)

            Dim lstGenres As New List(Of String)
            lstGenres.AddRange(clbFilterGenres_Shows.CheckedItems.OfType(Of String).ToList)

            txtFilterGenre_Shows.Text = String.Join(" OR ", lstGenres.ToArray)

            For i As Integer = 0 To lstGenres.Count - 1
                If lstGenres.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstGenres.Item(i) = "Genre IS NULL OR Genre = ''"
                Else
                    lstGenres.Item(i) = String.Format("Genre LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstGenres.Item(i)))
                End If
            Next

            filGenre_TVShows = String.Join(" OR ", lstGenres.ToArray)

            FilterArray_TVShows.Add(filGenre_TVShows)
        End If

        'Tag
        If clbFilterTags_Shows.CheckedItems.Count > 0 Then
            txtFilterTag_Shows.Text = String.Empty
            FilterArray_TVShows.Remove(filTag_TVShows)

            Dim lstTags As New List(Of String)
            lstTags.AddRange(clbFilterTags_Shows.CheckedItems.OfType(Of String).ToList)

            txtFilterTag_Shows.Text = String.Join(" OR ", lstTags.ToArray)

            For i As Integer = 0 To lstTags.Count - 1
                If lstTags.Item(i) = Master.eLang.CommonWordsList.None Then
                    lstTags.Item(i) = "Tag IS NULL OR Tag = ''"
                Else
                    lstTags.Item(i) = String.Format("Tag LIKE '%{0}%'", StringUtils.ConvertToValidFilterString(lstTags.Item(i)))
                End If
            Next

            filTag_TVShows = String.Join(" OR ", lstTags.ToArray)

            FilterArray_TVShows.Add(filTag_TVShows)
        End If

        If clbFilterGenres_Shows.CheckedItems.Count > 0 OrElse
            chkFilterMark_Shows.Checked OrElse
            chkFilterNewEpisodes_Shows.Checked OrElse
            chkFilterNewShows_Shows.Checked OrElse
            chkFilterLock_Shows.Checked OrElse
            Not clbFilterSource_Shows.CheckedItems.Count > 0 OrElse
            clbFilterTags_Shows.CheckedItems.Count > 0 OrElse
            chkFilterMissing_Shows.Checked Then Filter_Run_TVShow()
    End Sub

    Private Sub Filter_Panel_Movement_Movie()
        If FilterPanelIsRaised_Movie Then
            pnlFilter_Movies.AutoSize = True
        Else
            pnlFilter_Movies.AutoSize = False
            pnlFilter_Movies.Height = pnlFilterTop_Movies.Height
        End If

        If pnlFilter_Movies.Height = pnlFilterTop_Movies.Height Then
            btnFilterUp_Movies.Enabled = True
            btnFilterDown_Movies.Enabled = False
        ElseIf pnlFilter_Movies.AutoSize Then
            btnFilterUp_Movies.Enabled = False
            btnFilterDown_Movies.Enabled = True
        End If

        dgvMovies.Invalidate()
    End Sub

    Private Sub Filter_Panel_Movement_Movieset()
        If FilterPanelIsRaised_MovieSet Then
            pnlFilter_MovieSets.AutoSize = True
        Else
            pnlFilter_MovieSets.AutoSize = False
            pnlFilter_MovieSets.Height = pnlFilterTop_MovieSets.Height
        End If

        If pnlFilter_MovieSets.Height = pnlFilterTop_MovieSets.Height Then
            btnFilterUp_MovieSets.Enabled = True
            btnFilterDown_MovieSets.Enabled = False
        ElseIf pnlFilter_MovieSets.AutoSize Then
            btnFilterUp_MovieSets.Enabled = False
            btnFilterDown_MovieSets.Enabled = True
        End If

        dgvMovieSets.Invalidate()
    End Sub

    Private Sub Filter_Panel_Movement_TVShow()
        If FilterPanelIsRaised_TVShow Then
            pnlFilter_Shows.AutoSize = True
        Else
            pnlFilter_Shows.AutoSize = False
            pnlFilter_Shows.Height = pnlFilterTop_Shows.Height
        End If

        If pnlFilter_Shows.Height = pnlFilterTop_Shows.Height Then
            btnFilterUp_Shows.Enabled = True
            btnFilterDown_Shows.Enabled = False
        ElseIf pnlFilter_Shows.AutoSize Then
            btnFilterUp_Shows.Enabled = False
            btnFilterDown_Shows.Enabled = True
        End If

        dgvTVShows.Invalidate()
    End Sub

    Private Sub Filter_Refresh_Country_Movie()
        clbFilterCountries_Movies.Items.Clear()
        Dim mCountry() As Object = Master.DB.GetAll_Countries
        clbFilterCountries_Movies.Items.Add(Master.eLang.CommonWordsList.None)
        clbFilterCountries_Movies.Items.AddRange(mCountry)

        If filCountry_Movies = "(Country IS NULL OR Country = '')" Then
            clbFilterCountries_Movies.SetItemChecked(0, True)
        Else
            Dim rCountrys As MatchCollection = Regex.Matches(filCountry_Movies, "Country LIKE '%(?<FILTER>.*?)%'")
            If rCountrys.Count > 0 Then
                Dim lstCurrentCountrys As New List(Of String)
                For Each nCountry As Match In rCountrys
                    lstCurrentCountrys.Add(nCountry.Groups("FILTER").Value)
                Next
                For i As Integer = 0 To lstCurrentCountrys.Count - 1
                    If clbFilterCountries_Movies.FindString(lstCurrentCountrys(i).Trim) > 0 Then
                        clbFilterCountries_Movies.SetItemChecked(clbFilterCountries_Movies.FindString(lstCurrentCountrys(i).Trim), True)
                    End If
                Next
            End If
        End If
    End Sub

    Private Sub Filter_Refresh_Genre_Movie()
        clbFilterGenres_Movies.Items.Clear()
        Dim mGenre() As Object = APIXML.GetGenreList
        clbFilterGenres_Movies.Items.Add(Master.eLang.CommonWordsList.None)
        clbFilterGenres_Movies.Items.AddRange(mGenre)

        If filGenre_Movies = "(Genre IS NULL OR Genre = '')" Then
            clbFilterGenres_Movies.SetItemChecked(0, True)
        Else
            Dim rGenres As MatchCollection = Regex.Matches(filGenre_Movies, "Genre LIKE '%(?<FILTER>.*?)%'")
            If rGenres.Count > 0 Then
                Dim lstCurrentGenres As New List(Of String)
                For Each nGenre As Match In rGenres
                    lstCurrentGenres.Add(nGenre.Groups("FILTER").Value)
                Next
                For i As Integer = 0 To lstCurrentGenres.Count - 1
                    If clbFilterGenres_Movies.FindString(lstCurrentGenres(i).Trim) > 0 Then
                        clbFilterGenres_Movies.SetItemChecked(clbFilterGenres_Movies.FindString(lstCurrentGenres(i).Trim), True)
                    End If
                Next
            End If
        End If
    End Sub

    Private Sub Filter_Refresh_Genre_TVShow()
        clbFilterGenres_Shows.Items.Clear()
        Dim mGenre() As Object = APIXML.GetGenreList
        clbFilterGenres_Shows.Items.Add(Master.eLang.CommonWordsList.None)
        clbFilterGenres_Shows.Items.AddRange(mGenre)

        If filGenre_TVShows = "(Genre IS NULL OR Genre = '')" Then
            clbFilterGenres_Shows.SetItemChecked(0, True)
        Else
            Dim rGenres As MatchCollection = Regex.Matches(filGenre_TVShows, "Genre LIKE '%(?<FILTER>.*?)%'")
            If rGenres.Count > 0 Then
                Dim lstCurrentGenres As New List(Of String)
                For Each nGenre As Match In rGenres
                    lstCurrentGenres.Add(nGenre.Groups("FILTER").Value)
                Next
                For i As Integer = 0 To lstCurrentGenres.Count - 1
                    If clbFilterGenres_Shows.FindString(lstCurrentGenres(i).Trim) > 0 Then
                        clbFilterGenres_Shows.SetItemChecked(clbFilterGenres_Shows.FindString(lstCurrentGenres(i).Trim), True)
                    End If
                Next
            End If
        End If
    End Sub

    Private Sub Filter_Refresh_Tag_Movie()
        clbFilterTags_Movies.Items.Clear()
        Dim mTag() As Object = Master.DB.GetAll_Tags
        clbFilterTags_Movies.Items.Add(Master.eLang.CommonWordsList.None)
        clbFilterTags_Movies.Items.AddRange(mTag)

        If filTag_Movies = "(Tag IS NULL OR Tag = '')" Then
            clbFilterTags_Movies.SetItemChecked(0, True)
        Else
            Dim rTags As MatchCollection = Regex.Matches(filTag_Movies, "Tag LIKE '%(?<FILTER>.*?)%'")
            If rTags.Count > 0 Then
                Dim lstCurrentTags As New List(Of String)
                For Each nTag As Match In rTags
                    lstCurrentTags.Add(nTag.Groups("FILTER").Value)
                Next
                For i As Integer = 0 To lstCurrentTags.Count - 1
                    If clbFilterTags_Movies.FindString(lstCurrentTags(i).Trim) > 0 Then
                        clbFilterTags_Movies.SetItemChecked(clbFilterTags_Movies.FindString(lstCurrentTags(i).Trim), True)
                    End If
                Next
            End If
        End If
    End Sub

    Private Sub Filter_Refresh_Tag_TVShow()
        clbFilterTags_Shows.Items.Clear()
        Dim mTag() As Object = Master.DB.GetAll_Tags
        clbFilterTags_Shows.Items.Add(Master.eLang.CommonWordsList.None)
        clbFilterTags_Shows.Items.AddRange(mTag)

        If filTag_TVShows = "(Tag IS NULL OR Tag = '')" Then
            clbFilterTags_Shows.SetItemChecked(0, True)
        Else
            Dim rTags As MatchCollection = Regex.Matches(filTag_TVShows, "Tag LIKE '%(?<FILTER>.*?)%'")
            If rTags.Count > 0 Then
                Dim lstCurrentTags As New List(Of String)
                For Each nTag As Match In rTags
                    lstCurrentTags.Add(nTag.Groups("FILTER").Value)
                Next
                For i As Integer = 0 To lstCurrentTags.Count - 1
                    If clbFilterTags_Shows.FindString(lstCurrentTags(i).Trim) > 0 Then
                        clbFilterTags_Shows.SetItemChecked(clbFilterTags_Shows.FindString(lstCurrentTags(i).Trim), True)
                    End If
                Next
            End If
        End If
    End Sub

    Private Sub Filter_Refresh_Videosource_Movie()
        clbFilterVideoSources_Movies.Items.Clear()
        Dim mVideoSource() As Object = Master.DB.GetAll_VideoSources_Movie
        clbFilterVideoSources_Movies.Items.Add(Master.eLang.CommonWordsList.None)
        clbFilterVideoSources_Movies.Items.AddRange(mVideoSource)

        If filVideoSource_Movies = "(VideoSource IS NULL OR VideoSource = '')" Then
            clbFilterVideoSources_Movies.SetItemChecked(0, True)
        Else
            Dim rVideoSources As MatchCollection = Regex.Matches(filVideoSource_Movies, "VideoSource LIKE '%(?<FILTER>.*?)%'")
            If rVideoSources.Count > 0 Then
                Dim lstCurrentVideoSources As New List(Of String)
                For Each nVideoSource As Match In rVideoSources
                    lstCurrentVideoSources.Add(nVideoSource.Groups("FILTER").Value)
                Next
                For i As Integer = 0 To lstCurrentVideoSources.Count - 1
                    If clbFilterVideoSources_Movies.FindString(lstCurrentVideoSources(i).Trim) > 0 Then
                        clbFilterVideoSources_Movies.SetItemChecked(clbFilterVideoSources_Movies.FindString(lstCurrentVideoSources(i).Trim), True)
                    End If
                Next
            End If
        End If
    End Sub

    Private Sub Filter_Run_Movie(Optional ByVal doFill As Boolean = False)
        If Visible Then

            InfoScreen_Clear()

            currRow_Movie = -1
            prevRow_Movie = -2
            dgvMovies.ClearSelection()
            dgvMovies.CurrentCell = Nothing

            If FilterArray_Movies.Count > 0 Then
                lblFilter_Movies.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1090, "Active"))

                Dim strFilterString As String = String.Empty

                If rbFilterAnd_Movies.Checked Then
                    strFilterString = String.Join(" AND ", FilterArray_Movies.ToArray)
                Else
                    strFilterString = String.Join(" OR ", FilterArray_Movies.ToArray)
                End If

                bsMovies.Filter = strFilterString
                Addons.Instance.RuntimeObjects.FilterMovies = bsMovies.Filter
            Else
                If chkFilterDuplicates_Movies.Checked Then
                    lblFilter_Movies.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1090, "Active"))
                Else
                    lblFilter_Movies.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1091, "Inactive"))
                End If

                bsMovies.RemoveFilter()
                Addons.Instance.RuntimeObjects.FilterMovies = String.Empty
            End If

            If doFill Then
                DataGridView_FillList_Main(True, False, False)
                Addons.Instance.RuntimeObjects.FilterMoviesSearch = StringUtils.ConvertToValidFilterString(txtSearchMovies.Text)
                Addons.Instance.RuntimeObjects.FilterMoviesType = cbSearchMovies.Text
            Else
                txtSearchMovies.Focus()
            End If
        End If
    End Sub

    Private Sub Filter_Run_Movieset(Optional ByVal doFill As Boolean = False)
        If Visible Then

            InfoScreen_Clear()

            currRow_MovieSet = -1
            prevRow_MovieSet = -2
            dgvMovieSets.ClearSelection()
            dgvMovieSets.CurrentCell = Nothing

            If FilterArray_MovieSets.Count > 0 Then
                lblFilter_MovieSets.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1090, "Active"))

                Dim strFilterString As String = String.Empty

                If rbFilterAnd_MovieSets.Checked Then
                    strFilterString = String.Join(" AND ", FilterArray_MovieSets.ToArray)
                Else
                    strFilterString = String.Join(" OR ", FilterArray_MovieSets.ToArray)
                End If

                bsMovieSets.Filter = strFilterString
            Else
                lblFilter_MovieSets.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1091, "Inactive"))

                bsMovieSets.RemoveFilter()
            End If

            If doFill Then
                DataGridView_FillList_Main(False, True, False)
            Else
                txtSearchMovieSets.Focus()
            End If
        End If
    End Sub

    Private Sub Filter_Run_TVShow(Optional ByVal doFill As Boolean = False)
        If Visible Then

            InfoScreen_Clear()

            currRow_TVShow = -1
            prevRow_TVShow = -2
            currList = 0
            dgvTVShows.ClearSelection()
            dgvTVShows.CurrentCell = Nothing

            dgvTVSeasons.ClearSelection()
            dgvTVSeasons.CurrentCell = Nothing
            bsTVSeasons.DataSource = Nothing
            dgvTVEpisodes.DataSource = Nothing

            dgvTVEpisodes.ClearSelection()
            dgvTVEpisodes.CurrentCell = Nothing
            bsTVEpisodes.DataSource = Nothing
            dgvTVEpisodes.DataSource = Nothing

            If FilterArray_TVShows.Count > 0 Then
                lblFilter_Shows.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1090, "Active"))

                Dim strFilterString As String = String.Empty

                If rbFilterAnd_Shows.Checked Then
                    strFilterString = String.Join(" AND ", FilterArray_TVShows.ToArray)
                Else
                    strFilterString = String.Join(" OR ", FilterArray_TVShows.ToArray)
                End If

                bsTVShows.Filter = strFilterString
                Addons.Instance.RuntimeObjects.FilterTVShows = bsTVShows.Filter
            Else
                lblFilter_Shows.Text = String.Format("{0} ({1})", Master.eLang.GetString(52, "Filters"), Master.eLang.GetString(1091, "Inactive"))

                bsTVShows.RemoveFilter()
                Addons.Instance.RuntimeObjects.FilterTVShows = String.Empty
            End If

            If doFill Then
                DataGridView_FillList_Main(False, False, True)
                Addons.Instance.RuntimeObjects.FilterTVShowsSearch = StringUtils.ConvertToValidFilterString(txtSearchShows.Text)
                Addons.Instance.RuntimeObjects.FilterTVShowsType = cbSearchShows.Text
            Else
                txtSearchShows.Focus()
            End If
        End If
    End Sub

    Private Sub Filter_Search_TextBox_KeyPress_Movie(ByVal sender As Object, ByVal e As KeyPressEventArgs) Handles txtSearchMovies.KeyPress
        If e.KeyChar = Microsoft.VisualBasic.ChrW(Keys.Return) Then
            dgvMovies.Focus()
        End If
    End Sub

    Private Sub Filter_Search_TextBox_KeyPress_Movieset(ByVal sender As Object, ByVal e As KeyPressEventArgs) Handles txtSearchMovieSets.KeyPress
        If e.KeyChar = Microsoft.VisualBasic.ChrW(Keys.Return) Then
            dgvMovieSets.Focus()
        End If
    End Sub

    Private Sub Filter_Search_TextBox_KeyPress_TVShow(ByVal sender As Object, ByVal e As KeyPressEventArgs) Handles txtSearchShows.KeyPress
        If e.KeyChar = Microsoft.VisualBasic.ChrW(Keys.Return) Then
            dgvTVShows.Focus()
        End If
    End Sub

    Private Sub Filter_Search_TextBox_TextChanged_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles txtSearchMovies.TextChanged
        currTextSearch_Movies = txtSearchMovies.Text

        tmrSearchWait_Movies.Enabled = False
        tmrSearch_Movies.Enabled = False
        tmrSearchWait_Movies.Enabled = True
    End Sub

    Private Sub Filter_Search_TextBox_TextChanged_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles txtSearchMovieSets.TextChanged
        currTextSearch_MovieSets = txtSearchMovieSets.Text

        tmrSearchWait_MovieSets.Enabled = False
        tmrSearch_MovieSets.Enabled = False
        tmrSearchWait_MovieSets.Enabled = True
    End Sub

    Private Sub Filter_Search_TextBox_TextChanged_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles txtSearchShows.TextChanged
        currTextSearch_TVShows = txtSearchShows.Text

        tmrSearchWait_Shows.Enabled = False
        tmrSearch_Shows.Enabled = False
        tmrSearchWait_Shows.Enabled = True
    End Sub

    Private Sub Filter_Search_Timer_Run_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles tmrSearch_Movies.Tick
        tmrSearchWait_Movies.Enabled = False
        tmrSearch_Movies.Enabled = False
        bDoingSearch_Movies = True

        If Not String.IsNullOrEmpty(txtSearchMovies.Text) Then
            Dim strTextSearch As String = StringUtils.ConvertToValidFilterString(txtSearchMovies.Text)
            FilterArray_Movies.Remove(filSearch_Movies)
            filSearch_Movies = String.Empty

            Select Case cbSearchMovies.Text
                Case Master.eLang.GetString(21, "Title")
                    filSearch_Movies = String.Concat("Title LIKE '%", strTextSearch, "%'")
                    FilterArray_Movies.Add(filSearch_Movies)
                Case Master.eLang.GetString(302, "Original Title")
                    filSearch_Movies = String.Concat("OriginalTitle LIKE '%", strTextSearch, "%'")
                    FilterArray_Movies.Add(filSearch_Movies)
                Case Master.eLang.GetString(100, "Actor")
                    filSearch_Movies = strTextSearch
                Case Master.eLang.GetString(233, "Role")
                    filSearch_Movies = strTextSearch
                Case Master.eLang.GetString(62, "Director")
                    filSearch_Movies = String.Concat("Director LIKE '%", strTextSearch, "%'")
                    FilterArray_Movies.Add(filSearch_Movies)
                Case Master.eLang.GetString(729, "Credits")
                    filSearch_Movies = String.Concat("Credits LIKE '%", strTextSearch, "%'")
                    FilterArray_Movies.Add(filSearch_Movies)
                Case Master.eLang.GetString(301, "Country")
                    filSearch_Movies = String.Concat("Country LIKE '%", strTextSearch, "%'")
                    FilterArray_Movies.Add(filSearch_Movies)
                Case Master.eLang.GetString(395, "Studio")
                    filSearch_Movies = String.Concat("Studio LIKE '%", strTextSearch, "%'")
                    FilterArray_Movies.Add(filSearch_Movies)
            End Select

            Filter_Run_Movie(cbSearchMovies.Text = Master.eLang.GetString(100, "Actor") OrElse cbSearchMovies.Text = Master.eLang.GetString(233, "Role"))

        Else
            If Not String.IsNullOrEmpty(filSearch_Movies) Then
                FilterArray_Movies.Remove(filSearch_Movies)
                filSearch_Movies = String.Empty
            End If
            Filter_Run_Movie(True)
        End If
    End Sub

    Private Sub Filter_Search_Timer_Run_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles tmrSearch_MovieSets.Tick
        tmrSearchWait_MovieSets.Enabled = False
        tmrSearch_MovieSets.Enabled = False
        bDoingSearch_MovieSets = True

        If Not String.IsNullOrEmpty(txtSearchMovieSets.Text) Then
            Dim strTextSearch As String = StringUtils.ConvertToValidFilterString(txtSearchMovieSets.Text)
            FilterArray_MovieSets.Remove(filSearch_MovieSets)
            filSearch_MovieSets = String.Empty

            Select Case cbSearchMovieSets.Text
                Case Master.eLang.GetString(21, "Title")
                    filSearch_MovieSets = String.Concat("Title LIKE '%", strTextSearch, "%'")
                    FilterArray_MovieSets.Add(filSearch_MovieSets)
                Case String.Format("{0} ({1})", Master.eLang.GetString(21, "Title"), Master.eLang.GetString(1379, "Movie"))
                    filSearch_MovieSets = String.Concat("MovieTitles LIKE '%", strTextSearch, "%'")
                    FilterArray_MovieSets.Add(filSearch_MovieSets)
            End Select

            Filter_Run_Movieset(False)

        Else
            If Not String.IsNullOrEmpty(filSearch_MovieSets) Then
                FilterArray_MovieSets.Remove(filSearch_MovieSets)
                filSearch_MovieSets = String.Empty
            End If
            Filter_Run_Movieset(True)
        End If
    End Sub

    Private Sub Filter_Search_Timer_Run_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles tmrSearch_Shows.Tick
        tmrSearchWait_Shows.Enabled = False
        tmrSearch_Shows.Enabled = False
        bDoingSearch_TVShows = True

        If Not String.IsNullOrEmpty(txtSearchShows.Text) Then
            Dim strTextSearch As String = StringUtils.ConvertToValidFilterString(txtSearchShows.Text)
            FilterArray_TVShows.Remove(filSearch_TVShows)
            filSearch_TVShows = String.Empty

            Select Case cbSearchShows.Text
                Case Master.eLang.GetString(21, "Title")
                    filSearch_TVShows = String.Concat("Title LIKE '%", strTextSearch, "%'")
                    FilterArray_TVShows.Add(filSearch_TVShows)
            End Select

            Filter_Run_TVShow(False)

        Else
            If Not String.IsNullOrEmpty(filSearch_TVShows) Then
                FilterArray_TVShows.Remove(filSearch_TVShows)
                filSearch_TVShows = String.Empty
            End If
            Filter_Run_TVShow(True)
        End If
    End Sub

    Private Sub Filter_Search_Timer_Wait_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles tmrSearchWait_Movies.Tick
        tmrSearch_Movies.Enabled = False
        If prevTextSearch_Movies = currTextSearch_Movies Then
            tmrSearch_Movies.Enabled = True
        Else
            prevTextSearch_Movies = currTextSearch_Movies
        End If
    End Sub

    Private Sub Filter_Search_Timer_Wait_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles tmrSearchWait_MovieSets.Tick
        tmrSearch_MovieSets.Enabled = False
        If prevTextSearch_MovieSets = currTextSearch_MovieSets Then
            tmrSearch_MovieSets.Enabled = True
        Else
            prevTextSearch_MovieSets = currTextSearch_MovieSets
        End If
    End Sub

    Private Sub Filter_Search_Timer_Wait_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles tmrSearchWait_Shows.Tick
        tmrSearch_Shows.Enabled = False
        If prevTextSearch_TVShows = currTextSearch_TVShows Then
            tmrSearch_Shows.Enabled = True
        Else
            prevTextSearch_TVShows = currTextSearch_TVShows
        End If
    End Sub
    ''' <summary>
    ''' sorts the movielist by adding date
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>this filter is inverted (DESC first) to get the newest title on the top of the list</remarks>
    Private Sub Filter_SortBy_DateAdded_Click_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterSortDateAdded_Movies.Click
        If dgvMovies.RowCount > 0 Then
            btnFilterSortRating_Movies.Tag = String.Empty
            btnFilterSortRating_Movies.Image = Nothing
            btnFilterSortDateModified_Movies.Tag = String.Empty
            btnFilterSortDateModified_Movies.Image = Nothing
            btnFilterSortPremiered_Movies.Tag = String.Empty
            btnFilterSortPremiered_Movies.Image = Nothing
            btnFilterSortTitle_Movies.Tag = String.Empty
            btnFilterSortTitle_Movies.Image = Nothing
            btnFilterSortYear_Movies.Tag = String.Empty
            btnFilterSortYear_Movies.Image = Nothing
            If btnFilterSortDateAdded_Movies.Tag.ToString = "DESC" Then
                btnFilterSortDateAdded_Movies.Tag = "ASC"
                btnFilterSortDateAdded_Movies.Image = My.Resources.asc
                dgvMovies.Sort(dgvMovies.Columns("DateAdded"), ComponentModel.ListSortDirection.Ascending)
            Else
                btnFilterSortDateAdded_Movies.Tag = "DESC"
                btnFilterSortDateAdded_Movies.Image = My.Resources.desc
                dgvMovies.Sort(dgvMovies.Columns("DateAdded"), ComponentModel.ListSortDirection.Descending)
            End If

            DataGridView_Sorting_Save_Movie()
        End If
    End Sub
    ''' <summary>
    ''' sorts the movielist by last modification date
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>this filter is inverted (DESC first) to get the latest modified title on the top of the list</remarks>
    Private Sub Filter_SortBy_DateModified_Click_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterSortDateModified_Movies.Click
        If dgvMovies.RowCount > 0 Then
            btnFilterSortDateAdded_Movies.Tag = String.Empty
            btnFilterSortDateAdded_Movies.Image = Nothing
            btnFilterSortRating_Movies.Tag = String.Empty
            btnFilterSortRating_Movies.Image = Nothing
            btnFilterSortPremiered_Movies.Tag = String.Empty
            btnFilterSortPremiered_Movies.Image = Nothing
            btnFilterSortTitle_Movies.Tag = String.Empty
            btnFilterSortTitle_Movies.Image = Nothing
            btnFilterSortYear_Movies.Tag = String.Empty
            btnFilterSortYear_Movies.Image = Nothing
            If btnFilterSortDateModified_Movies.Tag.ToString = "DESC" Then
                btnFilterSortDateModified_Movies.Tag = "ASC"
                btnFilterSortDateModified_Movies.Image = My.Resources.asc
                dgvMovies.Sort(dgvMovies.Columns("DateModified"), ComponentModel.ListSortDirection.Ascending)
            Else
                btnFilterSortDateModified_Movies.Tag = "DESC"
                btnFilterSortDateModified_Movies.Image = My.Resources.desc
                dgvMovies.Sort(dgvMovies.Columns("DateModified"), ComponentModel.ListSortDirection.Descending)
            End If

            DataGridView_Sorting_Save_Movie()
        End If
    End Sub
    ''' <summary>
    ''' sorts the movielist by sort title
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub Filter_SortBy_SortTitle_Click_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterSortTitle_Movies.Click
        If dgvMovies.RowCount > 0 Then
            btnFilterSortDateAdded_Movies.Tag = String.Empty
            btnFilterSortDateAdded_Movies.Image = Nothing
            btnFilterSortDateModified_Movies.Tag = String.Empty
            btnFilterSortDateModified_Movies.Image = Nothing
            btnFilterSortRating_Movies.Tag = String.Empty
            btnFilterSortRating_Movies.Image = Nothing
            btnFilterSortPremiered_Movies.Tag = String.Empty
            btnFilterSortPremiered_Movies.Image = Nothing
            btnFilterSortYear_Movies.Tag = String.Empty
            btnFilterSortYear_Movies.Image = Nothing
            If btnFilterSortTitle_Movies.Tag.ToString = "ASC" Then
                btnFilterSortTitle_Movies.Tag = "DSC"
                btnFilterSortTitle_Movies.Image = My.Resources.desc
                dgvMovies.Sort(dgvMovies.Columns("SortedTitle"), ComponentModel.ListSortDirection.Descending)
            Else
                btnFilterSortTitle_Movies.Tag = "ASC"
                btnFilterSortTitle_Movies.Image = My.Resources.asc
                dgvMovies.Sort(dgvMovies.Columns("SortedTitle"), ComponentModel.ListSortDirection.Ascending)
            End If

            DataGridView_Sorting_Save_Movie()
        End If
    End Sub
    ''' <summary>
    ''' sorts the tvshowlist by sort title
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub Filter_SortBy_SortTitle_Click_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterSortTitle_Shows.Click
        If dgvTVShows.RowCount > 0 Then
            'Me.btnFilterSortDateAdded_Shows.Tag = String.Empty
            'Me.btnFilterSortDateAdded_Shows.Image = Nothing
            'Me.btnFilterSortDateModified_Shows.Tag = String.Empty
            'Me.btnFilterSortDateModified_Shows.Image = Nothing
            'Me.btnFilterSortRating_Shows.Tag = String.Empty
            'Me.btnFilterSortRating_Shows.Image = Nothing
            'Me.btnFilterSortYear_Shows.Tag = String.Empty
            'Me.btnFilterSortYear_Shows.Image = Nothing
            If btnFilterSortTitle_Shows.Tag.ToString = "ASC" Then
                btnFilterSortTitle_Shows.Tag = "DSC"
                btnFilterSortTitle_Shows.Image = My.Resources.desc
                dgvTVShows.Sort(dgvTVShows.Columns("SortedTitle"), ComponentModel.ListSortDirection.Descending)
            Else
                btnFilterSortTitle_Shows.Tag = "ASC"
                btnFilterSortTitle_Shows.Image = My.Resources.asc
                dgvTVShows.Sort(dgvTVShows.Columns("SortedTitle"), ComponentModel.ListSortDirection.Ascending)
            End If

            DataGridView_Sorting_Save_TVShow()
        End If
    End Sub
    ''' <summary>
    ''' sorts the movielist by rating
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>this filter is inverted (DESC first) to get the highest rated title on the top of the list</remarks>
    Private Sub Filter_SortBy_Rating_Click_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterSortRating_Movies.Click
        If dgvMovies.RowCount > 0 Then
            btnFilterSortDateAdded_Movies.Tag = String.Empty
            btnFilterSortDateAdded_Movies.Image = Nothing
            btnFilterSortDateModified_Movies.Tag = String.Empty
            btnFilterSortDateModified_Movies.Image = Nothing
            btnFilterSortPremiered_Movies.Tag = String.Empty
            btnFilterSortPremiered_Movies.Image = Nothing
            btnFilterSortTitle_Movies.Tag = String.Empty
            btnFilterSortTitle_Movies.Image = Nothing
            btnFilterSortYear_Movies.Tag = String.Empty
            btnFilterSortYear_Movies.Image = Nothing
            If btnFilterSortRating_Movies.Tag.ToString = "DESC" Then
                btnFilterSortRating_Movies.Tag = "ASC"
                btnFilterSortRating_Movies.Image = My.Resources.asc
                dgvMovies.Sort(dgvMovies.Columns("Rating"), ComponentModel.ListSortDirection.Ascending)
            Else
                btnFilterSortRating_Movies.Tag = "DESC"
                btnFilterSortRating_Movies.Image = My.Resources.desc
                dgvMovies.Sort(dgvMovies.Columns("Rating"), ComponentModel.ListSortDirection.Descending)
            End If

            DataGridView_Sorting_Save_Movie()
        End If
    End Sub
    ''' <summary>
    ''' sorts the movielist by release date
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>this filter is inverted (DESC first) to get the highest year title on the top of the list</remarks>
    Private Sub Filter_SortBy_Premiered_Click_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterSortPremiered_Movies.Click
        If dgvMovies.RowCount > 0 Then
            btnFilterSortDateAdded_Movies.Tag = String.Empty
            btnFilterSortDateAdded_Movies.Image = Nothing
            btnFilterSortDateModified_Movies.Tag = String.Empty
            btnFilterSortDateModified_Movies.Image = Nothing
            btnFilterSortRating_Movies.Tag = String.Empty
            btnFilterSortRating_Movies.Image = Nothing
            btnFilterSortTitle_Movies.Tag = String.Empty
            btnFilterSortTitle_Movies.Image = Nothing
            btnFilterSortYear_Movies.Tag = String.Empty
            btnFilterSortYear_Movies.Image = Nothing
            If btnFilterSortPremiered_Movies.Tag.ToString = "DESC" Then
                btnFilterSortPremiered_Movies.Tag = "ASC"
                btnFilterSortPremiered_Movies.Image = My.Resources.asc
                dgvMovies.Sort(dgvMovies.Columns("Premiered"), ComponentModel.ListSortDirection.Ascending)
            Else
                btnFilterSortPremiered_Movies.Tag = "DESC"
                btnFilterSortPremiered_Movies.Image = My.Resources.desc
                dgvMovies.Sort(dgvMovies.Columns("Premiered"), ComponentModel.ListSortDirection.Descending)
            End If

            DataGridView_Sorting_Save_Movie()
        End If
    End Sub
    ''' <summary>
    ''' sorts the movielist by year
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>this filter is inverted (DESC first) to get the highest year title on the top of the list</remarks>
    Private Sub Filter_SortBy_Year_Click_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterSortYear_Movies.Click
        If dgvMovies.RowCount > 0 Then
            btnFilterSortDateAdded_Movies.Tag = String.Empty
            btnFilterSortDateAdded_Movies.Image = Nothing
            btnFilterSortDateModified_Movies.Tag = String.Empty
            btnFilterSortDateModified_Movies.Image = Nothing
            btnFilterSortRating_Movies.Tag = String.Empty
            btnFilterSortRating_Movies.Image = Nothing
            btnFilterSortPremiered_Movies.Tag = String.Empty
            btnFilterSortPremiered_Movies.Image = Nothing
            btnFilterSortTitle_Movies.Tag = String.Empty
            btnFilterSortTitle_Movies.Image = Nothing
            If btnFilterSortYear_Movies.Tag.ToString = "DESC" Then
                btnFilterSortYear_Movies.Tag = "ASC"
                btnFilterSortYear_Movies.Image = My.Resources.asc
                dgvMovies.Sort(dgvMovies.Columns("Year"), ComponentModel.ListSortDirection.Ascending)
            Else
                btnFilterSortYear_Movies.Tag = "DESC"
                btnFilterSortYear_Movies.Image = My.Resources.desc
                dgvMovies.Sort(dgvMovies.Columns("Year"), ComponentModel.ListSortDirection.Descending)
            End If

            DataGridView_Sorting_Save_Movie()
        End If
    End Sub

    Private Sub Filter_Set_Missing_Movie()
        Dim lstMissingFilter As New List(Of String)
        FilterArray_Movies.Remove(filMissing_Movies)
        If chkFilterMissing_Movies.Checked Then
            With Master.eSettings
                If .MovieMissingBanner Then lstMissingFilter.Add("BannerPath IS NULL OR BannerPath=''")
                If .MovieMissingClearArt Then lstMissingFilter.Add("ClearArtPath IS NULL OR ClearArtPath=''")
                If .MovieMissingClearLogo Then lstMissingFilter.Add("ClearLogoPath IS NULL OR ClearLogoPath=''")
                If .MovieMissingDiscArt Then lstMissingFilter.Add("DiscArtPath IS NULL OR DiscArtPath=''")
                If .MovieMissingExtrafanarts Then lstMissingFilter.Add("EFanartsPath IS NULL OR EFanartsPath=''")
                If .MovieMissingExtrathumbs Then lstMissingFilter.Add("EThumbsPath IS NULL OR EThumbsPath=''")
                If .MovieMissingFanart Then lstMissingFilter.Add("FanartPath IS NULL OR FanartPath=''")
                If .MovieMissingLandscape Then lstMissingFilter.Add("LandscapePath IS NULL OR LandscapePath=''")
                If .MovieMissingNFO Then lstMissingFilter.Add("NfoPath IS NULL OR NfoPath=''")
                If .MovieMissingPoster Then lstMissingFilter.Add("PosterPath IS NULL OR PosterPath=''")
                If .MovieMissingSubtitles Then lstMissingFilter.Add("HasSub = 0")
                If .MovieMissingTheme Then lstMissingFilter.Add("ThemePath IS NULL OR ThemePath=''")
                If .MovieMissingTrailer Then lstMissingFilter.Add("TrailerPath IS NULL OR TrailerPath=''")
            End With
            filMissing_Movies = String.Join(" OR ", lstMissingFilter.ToArray)
            If filMissing_Movies IsNot Nothing Then FilterArray_Movies.Add(filMissing_Movies)
        End If
        Filter_Run_Movie()
    End Sub

    Private Sub Filter_Set_Missing_Movieset()
        Dim lstMissingFilter As New List(Of String)
        FilterArray_MovieSets.Remove(filMissing_MovieSets)
        If chkFilterMissing_MovieSets.Checked Then
            With Master.eSettings
                If .MovieSetMissingBanner Then lstMissingFilter.Add("BannerPath IS NULL OR BannerPath=''")
                If .MovieSetMissingClearArt Then lstMissingFilter.Add("ClearArtPath IS NULL OR ClearArtPath=''")
                If .MovieSetMissingClearLogo Then lstMissingFilter.Add("ClearLogoPath IS NULL OR ClearLogoPath=''")
                If .MovieSetMissingDiscArt Then lstMissingFilter.Add("DiscArtPath IS NULL OR DiscArtPath=''")
                If .MovieSetMissingFanart Then lstMissingFilter.Add("FanartPath IS NULL OR FanartPath=''")
                If .MovieSetMissingLandscape Then lstMissingFilter.Add("LandscapePath IS NULL OR LandscapePath=''")
                If .MovieSetMissingNFO Then lstMissingFilter.Add("NfoPath IS NULL OR NfoPath=''")
                If .MovieSetMissingPoster Then lstMissingFilter.Add("PosterPath IS NULL OR PosterPath=''")
            End With
            filMissing_MovieSets = String.Join(" OR ", lstMissingFilter.ToArray)
            If filMissing_MovieSets IsNot Nothing Then FilterArray_MovieSets.Add(filMissing_MovieSets)
        End If
        Filter_Run_Movieset()
    End Sub

    Private Sub Filter_Set_Missing_TVShow()
        Dim lstMissingFilter As New List(Of String)
        FilterArray_TVShows.Remove(filMissing_TVShows)
        If chkFilterMissing_Shows.Checked Then
            With Master.eSettings
                If .TVShowMissingBanner Then lstMissingFilter.Add("BannerPath IS NULL OR BannerPath=''")
                If .TVShowMissingCharacterArt Then lstMissingFilter.Add("CharacterArtPath IS NULL OR CharacterArtPath=''")
                If .TVShowMissingClearArt Then lstMissingFilter.Add("ClearArtPath IS NULL OR ClearArtPath=''")
                If .TVShowMissingClearLogo Then lstMissingFilter.Add("ClearLogoPath IS NULL OR ClearLogoPath=''")
                If .TVShowMissingExtrafanarts Then lstMissingFilter.Add("EFanartsPath IS NULL OR EFanartsPath=''")
                If .TVShowMissingFanart Then lstMissingFilter.Add("FanartPath IS NULL OR FanartPath=''")
                If .TVShowMissingLandscape Then lstMissingFilter.Add("LandscapePath IS NULL OR LandscapePath=''")
                If .TVShowMissingNFO Then lstMissingFilter.Add("NfoPath IS NULL OR NfoPath=''")
                If .TVShowMissingPoster Then lstMissingFilter.Add("PosterPath IS NULL OR PosterPath=''")
                If .TVShowMissingTheme Then lstMissingFilter.Add("ThemePath IS NULL OR ThemePath=''")
            End With
            filMissing_TVShows = String.Join(" OR ", lstMissingFilter.ToArray)
            If filMissing_TVShows IsNot Nothing Then FilterArray_TVShows.Add(filMissing_TVShows)
        End If
        Filter_Run_TVShow()
    End Sub


    Private Sub Filter_Set_Year_Movie()
        If Not String.IsNullOrEmpty(cbFilterYearFrom_Movies.Text) AndAlso Not cbFilterYearFrom_Movies.Text = Master.eLang.CommonWordsList.All Then

            FilterArray_Movies.Remove(filYear_Movies)
            filYear_Movies = String.Empty

            Select Case cbFilterYearModFrom_Movies.Text
                Case ">="
                    RemoveHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged
                    cbFilterYearModTo_Movies.Enabled = True
                    AddHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged

                    RemoveHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged
                    cbFilterYearTo_Movies.Enabled = True
                    AddHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged

                    If Not String.IsNullOrEmpty(cbFilterYearTo_Movies.Text) AndAlso Not cbFilterYearTo_Movies.Text = Master.eLang.CommonWordsList.All Then
                        filYear_Movies = String.Concat("Year ", cbFilterYearModFrom_Movies.Text, " '", cbFilterYearFrom_Movies.Text,
                                                          "' AND Year ", cbFilterYearModTo_Movies.Text, " '", cbFilterYearTo_Movies.Text, "'")
                    Else
                        filYear_Movies = String.Concat("Year ", cbFilterYearModFrom_Movies.Text, " '", cbFilterYearFrom_Movies.Text, "'")
                    End If

                Case ">"
                    RemoveHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged
                    cbFilterYearModTo_Movies.Enabled = True
                    AddHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged

                    RemoveHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged
                    cbFilterYearTo_Movies.Enabled = True
                    AddHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged

                    If Not String.IsNullOrEmpty(cbFilterYearTo_Movies.Text) AndAlso Not cbFilterYearTo_Movies.Text = Master.eLang.CommonWordsList.All Then
                        filYear_Movies = String.Concat("Year ", cbFilterYearModFrom_Movies.Text, " '", cbFilterYearFrom_Movies.Text,
                                                          "' AND Year ", cbFilterYearModTo_Movies.Text, " '", cbFilterYearTo_Movies.Text, "'")
                    Else
                        filYear_Movies = String.Concat("Year ", cbFilterYearModFrom_Movies.Text, " '", cbFilterYearFrom_Movies.Text, "'")
                    End If

                Case Else
                    RemoveHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged
                    cbFilterYearModTo_Movies.Enabled = False
                    cbFilterYearModTo_Movies.SelectedIndex = 0
                    AddHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged

                    RemoveHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged
                    cbFilterYearTo_Movies.Enabled = False
                    cbFilterYearTo_Movies.SelectedIndex = 0
                    AddHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged

                    filYear_Movies = String.Concat("Year ", cbFilterYearModFrom_Movies.Text, " '", cbFilterYearFrom_Movies.Text, "'")
            End Select

            FilterArray_Movies.Add(filYear_Movies)
            Filter_Run_Movie()
        Else
            RemoveHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged
            cbFilterYearModTo_Movies.Enabled = False
            cbFilterYearModTo_Movies.SelectedIndex = 0
            AddHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged

            RemoveHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged
            cbFilterYearTo_Movies.Enabled = False
            cbFilterYearTo_Movies.SelectedIndex = 0
            AddHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged

            If Not String.IsNullOrEmpty(filYear_Movies) Then
                FilterArray_Movies.Remove(filYear_Movies)
                filYear_Movies = String.Empty
                Filter_Run_Movie()
            End If
        End If
    End Sub

    Private Sub Filter_SubPanel_Close_Countries_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterCountriesClose_Movies.Click
        txtFilterCountry_Movies.Focus()
        pnlFilterCountries_Movies.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Close_DataFields_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterDataFieldsClose_Movies.Click
        txtFilterDataField_Movies.Focus()
        pnlFilterDataFields_Movies.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Close_Genres_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterGenresClose_Movies.Click
        txtFilterGenre_Movies.Focus()
        pnlFilterGenres_Movies.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Close_Genres_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterGenresClose_Shows.Click
        txtFilterGenre_Shows.Focus()
        pnlFilterGenres_Shows.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Close_MissingItems_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterMissingItemsClose_Movies.Click
        pnlFilterMissingItems_Movies.Visible = False
    End Sub

    Private Sub Filter_SubPanel_Close_MissingItems_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterMissingItemsClose_MovieSets.Click
        pnlFilterMissingItems_MovieSets.Visible = False
    End Sub

    Private Sub Filter_SubPanel_Close_MissingItems_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterMissingItemsClose_Shows.Click
        pnlFilterMissingItems_Shows.Visible = False
    End Sub

    Private Sub Filter_SubPanel_Close_Sources_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterSourcesClose_Movies.Click
        txtFilterSource_Movies.Focus()
        pnlFilterSources_Movies.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Close_Sources_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterSourcesClose_Shows.Click
        txtFilterSource_Shows.Focus()
        pnlFilterSources_Shows.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Close_Tags_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterTagsClose_Movies.Click
        txtFilterTag_Movies.Focus()
        pnlFilterTags_Movies.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Close_Tags_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterTagsClose_Shows.Click
        txtFilterTag_Shows.Focus()
        pnlFilterTags_Shows.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Close_VideoSources_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles lblFilterVideoSourcesClose_Movies.Click
        txtFilterVideoSource_Movies.Focus()
        pnlFilterVideoSources_Movies.Tag = String.Empty
    End Sub

    Private Sub Filter_SubPanel_Open_Countries_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterCountry_Movies.Click
        pnlFilterCountries_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterCountry_Movies.Left + 1,
                                                       (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterCountry_Movies.Top) - pnlFilterCountries_Movies.Height)
        pnlFilterCountries_Movies.Width = txtFilterCountry_Movies.Width
        Filter_Refresh_Country_Movie()
        If pnlFilterCountries_Movies.Visible Then
            pnlFilterCountries_Movies.Visible = False
        ElseIf Not pnlFilterCountries_Movies.Tag.ToString = "NO" Then
            pnlFilterCountries_Movies.Tag = String.Empty
            pnlFilterCountries_Movies.Visible = True
            clbFilterCountries_Movies.Focus()
        Else
            pnlFilterCountries_Movies.Tag = String.Empty
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_DataFields_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterDataField_Movies.Click
        pnlFilterDataFields_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + gbFilterDataField_Movies.Left + tblFilterDataField_Movies.Left + txtFilterDataField_Movies.Left + 1,
                                                        (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + gbFilterDataField_Movies.Top + tblFilterDataField_Movies.Top + txtFilterDataField_Movies.Top) - pnlFilterDataFields_Movies.Height)
        pnlFilterDataFields_Movies.Width = txtFilterDataField_Movies.Width
        If pnlFilterDataFields_Movies.Visible Then
            pnlFilterDataFields_Movies.Visible = False
        ElseIf Not pnlFilterDataFields_Movies.Tag.ToString = "NO" Then
            pnlFilterDataFields_Movies.Tag = String.Empty
            pnlFilterDataFields_Movies.Visible = True
            clbFilterDataFields_Movies.Focus()
        Else
            pnlFilterDataFields_Movies.Tag = String.Empty
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_Genres_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterGenre_Movies.Click
        pnlFilterGenres_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterGenre_Movies.Left + 1,
                                                       (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterGenre_Movies.Top) - pnlFilterGenres_Movies.Height)
        pnlFilterGenres_Movies.Width = txtFilterGenre_Movies.Width
        Filter_Refresh_Genre_Movie()
        If pnlFilterGenres_Movies.Visible Then
            pnlFilterGenres_Movies.Visible = False
        ElseIf Not pnlFilterGenres_Movies.Tag.ToString = "NO" Then
            pnlFilterGenres_Movies.Tag = String.Empty
            pnlFilterGenres_Movies.Visible = True
            clbFilterGenres_Movies.Focus()
        Else
            pnlFilterGenres_Movies.Tag = String.Empty
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_Genres_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterGenre_Shows.Click
        pnlFilterGenres_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterSpecific_Shows.Left + tblFilterSpecific_Shows.Left + tblFilterSpecificData_Shows.Left + txtFilterGenre_Shows.Left + 1,
                                                       (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterSpecific_Shows.Top + tblFilterSpecific_Shows.Top + tblFilterSpecificData_Shows.Top + txtFilterGenre_Shows.Top) - pnlFilterGenres_Shows.Height)
        pnlFilterGenres_Shows.Width = txtFilterGenre_Shows.Width
        Filter_Refresh_Genre_TVShow()
        If pnlFilterGenres_Shows.Visible Then
            pnlFilterGenres_Shows.Visible = False
        ElseIf Not pnlFilterGenres_Shows.Tag.ToString = "NO" Then
            pnlFilterGenres_Shows.Tag = String.Empty
            pnlFilterGenres_Shows.Visible = True
            clbFilterGenres_Shows.Focus()
        Else
            pnlFilterGenres_Shows.Tag = String.Empty
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_MissingItems_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterMissing_Movies.Click
        pnlFilterMissingItems_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterGeneral_Movies.Left + tblFilterGeneral_Movies.Left + btnFilterMissing_Movies.Left + 1,
                                                       (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterGeneral_Movies.Top + tblFilterGeneral_Movies.Top + btnFilterMissing_Movies.Top) - pnlFilterMissingItems_Movies.Height)
        If pnlFilterMissingItems_Movies.Visible Then
            pnlFilterMissingItems_Movies.Visible = False
        Else
            pnlFilterMissingItems_Movies.Visible = True
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_MissingItems_Movieset(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterMissing_MovieSets.Click
        pnlFilterMissingItems_MovieSets.Location = New Point(pnlFilter_MovieSets.Left + tblFilter_MovieSets.Left + gbFilterGeneral_MovieSets.Left + tblFilterGeneral_MovieSets.Left + btnFilterMissing_MovieSets.Left + 1,
                                                       (pnlFilter_MovieSets.Top + tblFilter_MovieSets.Top + gbFilterGeneral_MovieSets.Top + tblFilterGeneral_MovieSets.Top + btnFilterMissing_MovieSets.Top) - pnlFilterMissingItems_MovieSets.Height)
        If pnlFilterMissingItems_MovieSets.Visible Then
            pnlFilterMissingItems_MovieSets.Visible = False
        Else
            pnlFilterMissingItems_MovieSets.Visible = True
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_MissingItems_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles btnFilterMissing_Shows.Click
        pnlFilterMissingItems_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterGeneral_Shows.Left + tblFilterGeneral_Shows.Left + btnFilterMissing_Shows.Left + 1,
                                                       (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterGeneral_Shows.Top + tblFilterGeneral_Shows.Top + btnFilterMissing_Shows.Top) - pnlFilterMissingItems_Shows.Height)
        If pnlFilterMissingItems_Shows.Visible Then
            pnlFilterMissingItems_Shows.Visible = False
        Else
            pnlFilterMissingItems_Shows.Visible = True
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_Sources_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterSource_Movies.Click
        pnlFilterSources_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterSource_Movies.Left + 1,
                                                       (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterSource_Movies.Top) - pnlFilterSources_Movies.Height)
        pnlFilterSources_Movies.Width = txtFilterSource_Movies.Width
        If pnlFilterSources_Movies.Visible Then
            pnlFilterSources_Movies.Visible = False
        ElseIf Not pnlFilterSources_Movies.Tag.ToString = "NO" Then
            pnlFilterSources_Movies.Tag = String.Empty
            pnlFilterSources_Movies.Visible = True
            clbFilterSources_Movies.Focus()
        Else
            pnlFilterSources_Movies.Tag = String.Empty
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_Sources_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterSource_Shows.Click
        pnlFilterSources_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterSpecific_Shows.Left + tblFilterSpecific_Shows.Left + tblFilterSpecificData_Shows.Left + txtFilterSource_Shows.Left + 1,
                                                       (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterSpecific_Shows.Top + tblFilterSpecific_Shows.Top + tblFilterSpecificData_Shows.Top + txtFilterSource_Shows.Top) - pnlFilterSources_Shows.Height)
        pnlFilterSources_Shows.Width = txtFilterSource_Shows.Width
        If pnlFilterSources_Shows.Visible Then
            pnlFilterSources_Shows.Visible = False
        ElseIf Not pnlFilterSources_Shows.Tag.ToString = "NO" Then
            pnlFilterSources_Shows.Tag = String.Empty
            pnlFilterSources_Shows.Visible = True
            clbFilterSource_Shows.Focus()
        Else
            pnlFilterSources_Shows.Tag = String.Empty
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_Tags_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterTag_Movies.Click
        pnlFilterTags_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterTag_Movies.Left + 1,
                                                       (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterTag_Movies.Top) - pnlFilterTags_Movies.Height)
        pnlFilterTags_Movies.Width = txtFilterTag_Movies.Width
        Filter_Refresh_Tag_Movie()
        If pnlFilterTags_Movies.Visible Then
            pnlFilterTags_Movies.Visible = False
        ElseIf Not pnlFilterTags_Movies.Tag.ToString = "NO" Then
            pnlFilterTags_Movies.Tag = String.Empty
            pnlFilterTags_Movies.Visible = True
            clbFilterTags_Movies.Focus()
        Else
            pnlFilterTags_Movies.Tag = String.Empty
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_Tags_TVShow(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterTag_Shows.Click
        pnlFilterTags_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterSpecific_Shows.Left + tblFilterSpecific_Shows.Left + tblFilterSpecificData_Shows.Left + txtFilterTag_Shows.Left + 1,
                                                       (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterSpecific_Shows.Top + tblFilterSpecific_Shows.Top + tblFilterSpecificData_Shows.Top + txtFilterTag_Shows.Top) - pnlFilterTags_Shows.Height)
        pnlFilterTags_Shows.Width = txtFilterTag_Shows.Width
        Filter_Refresh_Tag_TVShow()
        If pnlFilterTags_Shows.Visible Then
            pnlFilterTags_Shows.Visible = False
        ElseIf Not pnlFilterTags_Shows.Tag.ToString = "NO" Then
            pnlFilterTags_Shows.Tag = String.Empty
            pnlFilterTags_Shows.Visible = True
            clbFilterTags_Shows.Focus()
        Else
            pnlFilterTags_Shows.Tag = String.Empty
        End If
    End Sub

    Private Sub Filter_SubPanel_Open_VideoSources_Movie(ByVal sender As Object, ByVal e As EventArgs) Handles txtFilterVideoSource_Movies.Click
        pnlFilterVideoSources_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterVideoSource_Movies.Left + 1,
                                                       (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterVideoSource_Movies.Top) - pnlFilterVideoSources_Movies.Height)
        pnlFilterVideoSources_Movies.Width = txtFilterVideoSource_Movies.Width
        Filter_Refresh_Videosource_Movie()
        If pnlFilterVideoSources_Movies.Visible Then
            pnlFilterVideoSources_Movies.Visible = False
        ElseIf Not pnlFilterVideoSources_Movies.Tag.ToString = "NO" Then
            pnlFilterVideoSources_Movies.Tag = String.Empty
            pnlFilterVideoSources_Movies.Visible = True
            clbFilterVideoSources_Movies.Focus()
        Else
            pnlFilterVideoSources_Movies.Tag = String.Empty
        End If
    End Sub

    Private Sub InfoPanel_Button_Down_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnDown.Click
        tcMain.Focus()
        Select Case currThemeType
            Case Enums.ContentType.Movie
                InfoPanelState_Movie = 0
            Case Enums.ContentType.Movieset
                InfoPanelState_MovieSet = 0
            Case Enums.ContentType.TVEpisode
                InfoPanelState_TVEpisode = 0
            Case Enums.ContentType.TVSeason
                InfoPanelState_TVSeason = 0
            Case Enums.ContentType.TVShow
                InfoPanelState_TVShow = 0
        End Select
        InfoPanel_Move()
    End Sub

    Private Sub InfoPanel_Button_Mid_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnMid.Click
        tcMain.Focus()
        Select Case currThemeType
            Case Enums.ContentType.Movie
                InfoPanelState_Movie = 1
            Case Enums.ContentType.Movieset
                InfoPanelState_MovieSet = 1
            Case Enums.ContentType.TVEpisode
                InfoPanelState_TVEpisode = 1
            Case Enums.ContentType.TVSeason
                InfoPanelState_TVSeason = 1
            Case Enums.ContentType.TVShow
                InfoPanelState_TVShow = 1
        End Select
        InfoPanel_Move()
    End Sub

    Private Sub InfoPanel_Button_Up_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnUp.Click
        tcMain.Focus()
        Select Case currThemeType
            Case Enums.ContentType.Movie
                InfoPanelState_Movie = 2
            Case Enums.ContentType.Movieset
                InfoPanelState_MovieSet = 2
            Case Enums.ContentType.TVEpisode
                InfoPanelState_TVEpisode = 2
            Case Enums.ContentType.TVSeason
                InfoPanelState_TVSeason = 2
            Case Enums.ContentType.TVShow
                InfoPanelState_TVShow = 2
        End Select
        InfoPanel_Move()
    End Sub

    Private Sub InfoPanel_LinkHeader_Click(ByVal sender As Object, ByVal e As EventArgs) Handles lblIMDBHeader.Click, lblTMDBHeader.Click, lblTVDBHeader.Click
        Dim Label As Label = CType(sender, Label)
        If Label.Tag IsNot Nothing AndAlso Not String.IsNullOrEmpty(Label.Tag.ToString) Then
            Functions.Launch(Label.Tag.ToString)
        End If
    End Sub

    Private Sub InfoPanel_LinkHeader_MouseEnter(ByVal sender As Object, ByVal e As EventArgs) Handles lblIMDBHeader.MouseEnter, lblTMDBHeader.MouseEnter, lblTVDBHeader.MouseEnter
        Dim Label As Label = CType(sender, Label)
        If Label.Tag IsNot Nothing AndAlso Not String.IsNullOrEmpty(Label.Tag.ToString) Then
            Cursor = Cursors.Hand
        End If
    End Sub

    Private Sub InfoPanel_LinkHeader_MouseLeave(ByVal sender As Object, ByVal e As EventArgs) Handles lblIMDBHeader.MouseLeave, lblTMDBHeader.MouseLeave, lblTVDBHeader.MouseLeave
        Cursor = Cursors.Default
    End Sub

    Private Sub InfoPanel_List_Actors_SelectedValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles lstActors.SelectedValueChanged
        If lstActors.Items.Count > 0 AndAlso lstActors.SelectedItems.Count > 0 AndAlso alActors.Item(lstActors.SelectedIndex) IsNot Nothing AndAlso Not alActors.Item(lstActors.SelectedIndex).ToString = "none" Then

            If pbActors.Image IsNot Nothing Then
                pbActors.Image.Dispose()
                pbActors.Image = Nothing
            End If

            If Not alActors.Item(lstActors.SelectedIndex).ToString.Trim.StartsWith("http") Then
                MainActors.LoadFromFile(alActors.Item(lstActors.SelectedIndex).ToString, True)

                If MainActors.Image IsNot Nothing Then
                    pbActors.Image = MainActors.Image
                Else
                    pbActors.Image = My.Resources.actor_silhouette
                End If
            Else
                pbActorsLoad.Visible = True

                If bwDownloadPic.IsBusy Then
                    bwDownloadPic.CancelAsync()
                    While bwDownloadPic.IsBusy
                        Application.DoEvents()
                        Threading.Thread.Sleep(50)
                    End While
                End If

                bwDownloadPic = New ComponentModel.BackgroundWorker With {
                    .WorkerSupportsCancellation = True
                }
                bwDownloadPic.RunWorkerAsync(New Arguments With {.pURL = alActors.Item(lstActors.SelectedIndex).ToString})
            End If

        Else
            pbActors.Image = My.Resources.actor_silhouette
        End If
    End Sub

    Private Sub InfoPanel_List_GuestStars_SelectedValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles lstGuestStars.SelectedValueChanged
        'TODO
    End Sub

    Private Sub InfoPanel_Move()
        Dim iState As Integer
        Select Case currThemeType
            Case Enums.ContentType.Movie
                iState = InfoPanelState_Movie
            Case Enums.ContentType.Movieset
                iState = InfoPanelState_MovieSet
            Case Enums.ContentType.TVEpisode
                iState = InfoPanelState_TVEpisode
            Case Enums.ContentType.TVSeason
                iState = InfoPanelState_TVSeason
            Case Enums.ContentType.TVShow
                iState = InfoPanelState_TVShow
        End Select
        Select Case iState
            Case 0
                pnlInfoPanel.Height = 32
            Case 1
                pnlInfoPanel.Height = InfoPanelMidHeight
            Case 2
                pnlInfoPanel.Height = InfoPanelUpHeight
        End Select

        InfoScreen_Move_GenreIcons()
        InfoScreen_Move_MPAAIcon()

        Select Case iState
            Case 0
                If pnlInfoPanel.Height = 32 Then
                    btnDown.Enabled = False
                    btnMid.Enabled = True
                    btnUp.Enabled = True
                End If
            Case 1
                If pnlInfoPanel.Height = InfoPanelMidHeight Then
                    btnMid.Enabled = False
                    btnDown.Enabled = True
                    btnUp.Enabled = True
                End If
            Case 2
                If pnlInfoPanel.Height = InfoPanelUpHeight Then
                    btnUp.Enabled = False
                    btnDown.Enabled = True
                    btnMid.Enabled = True
                End If
        End Select
    End Sub

    Public Sub InfoScreen_Clear()
        If bwDownloadPic.IsBusy Then bwDownloadPic.CancelAsync()
        If bwLoadImages_Movie.IsBusy Then bwLoadImages_Movie.CancelAsync()
        If bwLoadImages_Movieset.IsBusy Then bwLoadImages_Movieset.CancelAsync()
        If bwLoadImages_MoviesetMoviePosters.IsBusy Then bwLoadImages_MoviesetMoviePosters.CancelAsync()
        If bwLoadImages_TVShow.IsBusy Then bwLoadImages_TVShow.CancelAsync()
        If bwLoadImages_TVSeason.IsBusy Then bwLoadImages_TVSeason.CancelAsync()
        If bwLoadImages_TVEpisode.IsBusy Then bwLoadImages_TVEpisode.CancelAsync()

        While bwDownloadPic.IsBusy OrElse
            bwDownloadGuestStarPic.IsBusy OrElse
            bwLoadImages_Movie.IsBusy OrElse
            bwLoadImages_Movieset.IsBusy OrElse
            bwLoadImages_TVShow.IsBusy OrElse
            bwLoadImages_TVSeason.IsBusy OrElse
            bwLoadImages_TVEpisode.IsBusy OrElse
            bwLoadImages_MoviesetMoviePosters.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(50)
        End While

        If pbBackground.Image IsNot Nothing Then
            pbBackground.Image.Dispose()
            pbBackground.Image = Nothing
        End If
        MainBackground.Clear()

        If pbBanner.Image IsNot Nothing Then
            pbBanner.Image.Dispose()
            pbBanner.Image = Nothing
        End If
        pnlBanner.Visible = False
        MainBanner.Clear()

        If pbCharacterArt.Image IsNot Nothing Then
            pbCharacterArt.Image.Dispose()
            pbCharacterArt.Image = Nothing
        End If
        pnlCharacterArt.Visible = False
        MainCharacterArt.Clear()

        If pbClearArt.Image IsNot Nothing Then
            pbClearArt.Image.Dispose()
            pbClearArt.Image = Nothing
        End If
        pnlClearArt.Visible = False
        MainClearArt.Clear()

        If pbClearLogo.Image IsNot Nothing Then
            pbClearLogo.Image.Dispose()
            pbClearLogo.Image = Nothing
        End If
        pnlClearLogo.Visible = False
        MainClearLogo.Clear()

        If pbPoster.Image IsNot Nothing Then
            pbPoster.Image.Dispose()
            pbPoster.Image = Nothing
        End If
        pnlPoster.Visible = False
        MainPoster.Clear()

        If pbFanartSmall.Image IsNot Nothing Then
            pbFanartSmall.Image.Dispose()
            pbFanartSmall.Image = Nothing
        End If
        pnlFanartSmall.Visible = False
        MainFanart.Clear()

        If pbKeyart.Image IsNot Nothing Then
            pbKeyart.Image.Dispose()
            pbKeyart.Image = Nothing
        End If
        pnlKeyart.Visible = False
        MainKeyart.Clear()

        If pbLandscape.Image IsNot Nothing Then
            pbLandscape.Image.Dispose()
            pbLandscape.Image = Nothing
        End If
        pnlLandscape.Visible = False
        MainLandscape.Clear()

        If pbDiscArt.Image IsNot Nothing Then
            pbDiscArt.Image.Dispose()
            pbDiscArt.Image = Nothing
        End If
        pnlDiscArt.Visible = False
        MainDiscArt.Clear()

        'remove all current genres
        Try
            For iDel As Integer = 0 To pnlGenre.Count - 1
                scMain.Panel2.Controls.Remove(pbGenre(iDel))
                scMain.Panel2.Controls.Remove(pnlGenre(iDel))
            Next
        Catch
        End Try

        'remove all current ratings
        InfoScreen_Show_Ratings(New List(Of MediaContainers.RatingDetails), 0, 0)

        If pbMPAA.Image IsNot Nothing Then
            pbMPAA.Image = Nothing
        End If
        pnlMPAA.Visible = False

        lblBannerSize.Text = String.Empty
        lblCertifications.Text = String.Empty
        lblCharacterArtSize.Text = String.Empty
        lblClearArtSize.Text = String.Empty
        lblClearLogoSize.Text = String.Empty
        lblCollections.Text = String.Empty
        lblCountries.Text = String.Empty
        lblCredits.Text = String.Empty
        lblDirectors.Text = String.Empty
        lblDiscArtSize.Text = String.Empty
        lblFanartSmallSize.Text = String.Empty
        lblIMDBHeader.Tag = Nothing
        lblLandscapeSize.Text = String.Empty
        lblOriginalTitle.Text = String.Empty
        lblPosterSize.Text = String.Empty
        lblPremiered.Text = String.Empty
        lblRuntime.Text = String.Empty
        lblStatus.Text = String.Empty
        lblStudio.Text = String.Empty
        lblTagline.Text = String.Empty
        lblTags.Text = String.Empty
        lblTitle.Text = String.Empty
        lblTMDBHeader.Tag = Nothing
        lblTVDBHeader.Tag = Nothing
        txtFilePath.Text = String.Empty
        txtIMDBID.Text = String.Empty
        txtOutline.Text = String.Empty
        txtPlot.Text = String.Empty
        txtTMDBID.Text = String.Empty
        txtTVDBID.Text = String.Empty
        txtTrailerPath.Text = String.Empty

        lstActors.Items.Clear()
        If alActors IsNot Nothing Then
            alActors.Clear()
            alActors = Nothing
        End If
        If pbActors.Image IsNot Nothing Then
            pbActors.Image.Dispose()
            pbActors.Image = Nothing
        End If
        MainActors.Clear()

        lstGuestStars.Items.Clear()
        If alGuestStars IsNot Nothing Then
            alGuestStars.Clear()
            alGuestStars = Nothing
        End If
        If pbGuestStars.Image IsNot Nothing Then
            pbGuestStars.Image.Dispose()
            pbGuestStars.Image = Nothing
        End If
        MainGuestStars.Clear()

        If pbMPAA.Image IsNot Nothing Then
            pbMPAA.Image.Dispose()
            pbMPAA.Image = Nothing
        End If
        pbStudio.Image = Nothing
        pbVideoChannels.Image = Nothing
        pbVideoSource.Image = Nothing
        pbVideoCodec.Image = Nothing
        pbAudioCodec.Image = Nothing
        pbVideoResolution.Image = Nothing
        pbAudioChannels.Image = Nothing
        pbAudioLang0.Image = Nothing
        pbAudioLang1.Image = Nothing
        pbAudioLang2.Image = Nothing
        pbAudioLang3.Image = Nothing
        pbAudioLang4.Image = Nothing
        pbAudioLang5.Image = Nothing
        pbAudioLang6.Image = Nothing
        ToolTips.SetToolTip(pbAudioLang0, String.Empty)
        ToolTips.SetToolTip(pbAudioLang1, String.Empty)
        ToolTips.SetToolTip(pbAudioLang2, String.Empty)
        ToolTips.SetToolTip(pbAudioLang3, String.Empty)
        ToolTips.SetToolTip(pbAudioLang4, String.Empty)
        ToolTips.SetToolTip(pbAudioLang5, String.Empty)
        ToolTips.SetToolTip(pbAudioLang6, String.Empty)
        pbSubtitleLang0.Image = Nothing
        pbSubtitleLang1.Image = Nothing
        pbSubtitleLang2.Image = Nothing
        pbSubtitleLang3.Image = Nothing
        pbSubtitleLang4.Image = Nothing
        pbSubtitleLang5.Image = Nothing
        pbSubtitleLang6.Image = Nothing
        ToolTips.SetToolTip(pbSubtitleLang0, String.Empty)
        ToolTips.SetToolTip(pbSubtitleLang1, String.Empty)
        ToolTips.SetToolTip(pbSubtitleLang2, String.Empty)
        ToolTips.SetToolTip(pbSubtitleLang3, String.Empty)
        ToolTips.SetToolTip(pbSubtitleLang4, String.Empty)
        ToolTips.SetToolTip(pbSubtitleLang5, String.Empty)
        ToolTips.SetToolTip(pbSubtitleLang6, String.Empty)

        txtMetaData.Text = String.Empty

        lvMoviesInSet.Items.Clear()
        ilMoviesInSet.Images.Clear()

        InfoCleared = True

        Application.DoEvents()
    End Sub
    ''' <summary>
    ''' Populate the form's Genre panel and picture box arrays with the 
    ''' appropriate genre images and (conditionally) labels 
    ''' </summary>
    ''' <param name="genres"><c>List (Of String)</c> holding genre names</param>
    ''' <remarks>If any individual genre is invalid or generates an error, 
    ''' the remaining genres are still processed, however the placement/spacing
    ''' of the remaining genres may show gaps where the erronious genres should have been</remarks>
    Private Sub InfoScreen_GenreIcons_Load(ByVal genres As List(Of String))
        If genres Is Nothing OrElse genres.Count = 0 Then Return

        genres.Sort()
        genres.Reverse()

        For i As Integer = 0 To genres.Count - 1
            Try
                ReDim Preserve pnlGenre(i)
                ReDim Preserve pbGenre(i)
                pnlGenre(i) = New Panel With {
                    .BackColor = GenrePanelColor,
                    .BorderStyle = BorderStyle.FixedSingle,
                    .Left = ((pnlInfoPanel.Right) - (i * 73)) - 73,
                    .Size = New Size(68, 100),
                    .Top = pnlInfoPanel.Top - 105,
                    .Visible = False
                }
                pbGenre(i) = New PictureBox With {
                    .Name = genres(i).Trim.ToUpper,
                    .Size = New Size(62, 94),
                    .BackColor = GenrePanelColor,
                    .SizeMode = PictureBoxSizeMode.StretchImage,
                    .Image = APIXML.GetGenreImage(genres(i).Trim),
                    .Left = 2,
                    .Top = 2
                }
                scMain.Panel2.Controls.Add(pnlGenre(i))
                pnlGenre(i).Controls.Add(pbGenre(i))
                pnlGenre(i).BringToFront()
                AddHandler pbGenre(i).MouseEnter, AddressOf InfoScreen_GenreIcons_MouseEnter
                AddHandler pbGenre(i).MouseLeave, AddressOf InfoScreen_GenreIcons_MouseLeave
                If Master.eSettings.GeneralShowGenresText Then
                    pbGenre(i).Image = ImageUtils.AddGenreString(pbGenre(i).Image, pbGenre(i).Name)
                End If
            Catch ex As Exception
                logger.Error(ex, New StackFrame().GetMethod().Name)
            End Try
        Next
    End Sub

    Private Sub InfoScreen_GenreIcons_MouseEnter(sender As Object, e As EventArgs)
        If Master.eSettings.GeneralShowGenresText Then Return 'Because Image already has genre text displayed
        GenreImage = DirectCast(sender, PictureBox).Image    'Store the image for later retrieval
        DirectCast(sender, PictureBox).Image = ImageUtils.AddGenreString(DirectCast(sender, PictureBox).Image, DirectCast(sender, PictureBox).Name.ToString)
    End Sub

    Private Sub InfoScreen_GenreIcons_MouseLeave(sender As Object, e As EventArgs)
        If Master.eSettings.GeneralShowGenresText Then Return
        DirectCast(sender, PictureBox).Image = GenreImage
    End Sub

    Private Sub InfoScreen_Images_Load_DoWork_Movie(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwLoadImages_Movie.DoWork
        MainActors.Clear()
        MainBackground.Clear()
        MainBanner.Clear()
        MainCharacterArt.Clear()
        MainClearArt.Clear()
        MainClearLogo.Clear()
        MainDiscArt.Clear()
        MainFanart.Clear()
        MainKeyart.Clear()
        MainLandscape.Clear()
        MainPoster.Clear()

        If bwLoadImages_Movie.CancellationPending Then
            e.Cancel = True
            Return
        End If

        currMovie.LoadAllImages(True, False)

        If bwLoadImages_Movie.CancellationPending Then
            e.Cancel = True
            Return
        End If

        If Master.eSettings.GeneralDisplayBanner Then MainBanner = currMovie.ImagesContainer.Banner.ImageOriginal
        If Master.eSettings.GeneralDisplayClearArt Then MainClearArt = currMovie.ImagesContainer.ClearArt.ImageOriginal
        If Master.eSettings.GeneralDisplayClearLogo Then MainClearLogo = currMovie.ImagesContainer.ClearLogo.ImageOriginal
        If Master.eSettings.GeneralDisplayDiscArt Then MainDiscArt = currMovie.ImagesContainer.DiscArt.ImageOriginal
        If Master.eSettings.GeneralDisplayFanart Then MainFanart = currMovie.ImagesContainer.Fanart.ImageOriginal
        If Master.eSettings.GeneralDisplayFanartAsBackground Then MainBackground = currMovie.ImagesContainer.Fanart.ImageOriginal
        If Master.eSettings.GeneralDisplayKeyart Then MainKeyart = currMovie.ImagesContainer.Keyart.ImageOriginal
        If Master.eSettings.GeneralDisplayLandscape Then MainLandscape = currMovie.ImagesContainer.Landscape.ImageOriginal
        If Master.eSettings.GeneralDisplayPoster Then MainPoster = currMovie.ImagesContainer.Poster.ImageOriginal

        If bwLoadImages_Movie.CancellationPending Then
            e.Cancel = True
            Return
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_DoWork_Movieset(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwLoadImages_Movieset.DoWork
        MainActors.Clear()
        MainBackground.Clear()
        MainBanner.Clear()
        MainCharacterArt.Clear()
        MainClearArt.Clear()
        MainClearLogo.Clear()
        MainDiscArt.Clear()
        MainFanart.Clear()
        MainKeyart.Clear()
        MainLandscape.Clear()
        MainPoster.Clear()

        If bwLoadImages_Movieset.CancellationPending Then
            e.Cancel = True
            Return
        End If

        currMovieset.LoadAllImages(True, False)

        If bwLoadImages_Movieset.CancellationPending Then
            e.Cancel = True
            Return
        End If

        If Master.eSettings.GeneralDisplayBanner Then MainBanner = currMovieset.ImagesContainer.Banner.ImageOriginal
        If Master.eSettings.GeneralDisplayClearArt Then MainClearArt = currMovieset.ImagesContainer.ClearArt.ImageOriginal
        If Master.eSettings.GeneralDisplayClearLogo Then MainClearLogo = currMovieset.ImagesContainer.ClearLogo.ImageOriginal
        If Master.eSettings.GeneralDisplayDiscArt Then MainDiscArt = currMovieset.ImagesContainer.DiscArt.ImageOriginal
        If Master.eSettings.GeneralDisplayFanart Then MainFanart = currMovieset.ImagesContainer.Fanart.ImageOriginal
        If Master.eSettings.GeneralDisplayFanartAsBackground Then MainBackground = currMovieset.ImagesContainer.Fanart.ImageOriginal
        If Master.eSettings.GeneralDisplayKeyart Then MainKeyart = currMovieset.ImagesContainer.Keyart.ImageOriginal
        If Master.eSettings.GeneralDisplayLandscape Then MainLandscape = currMovieset.ImagesContainer.Landscape.ImageOriginal
        If Master.eSettings.GeneralDisplayPoster Then MainPoster = currMovieset.ImagesContainer.Poster.ImageOriginal

        If bwLoadImages_Movieset.CancellationPending Then
            e.Cancel = True
            Return
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_DoWork_Movieset_MoviePosters(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwLoadImages_MoviesetMoviePosters.DoWork
        Dim Posters As New List(Of MovieInSetPoster)

        Try
            If currMovieset.MoviesInSet IsNot Nothing AndAlso currMovieset.MoviesInSet.Count > 0 Then
                Try
                    For Each tMovieInSet As MediaContainers.MovieInSet In currMovieset.MoviesInSet
                        If bwLoadImages_MoviesetMoviePosters.CancellationPending Then
                            e.Cancel = True
                            Return
                        End If

                        Dim ResImg As Image
                        If tMovieInSet.DBMovie.ImagesContainer.Poster.LoadAndCache(Enums.ContentType.Movie, True, True) Then
                            ResImg = tMovieInSet.DBMovie.ImagesContainer.Poster.ImageOriginal.Image
                            ImageUtils.ResizeImage(ResImg, 59, 88, True, Color.White.ToArgb())
                            Posters.Add(New MovieInSetPoster With {.MoviePoster = ResImg, .MovieTitle = tMovieInSet.DBMovie.MainDetails.Title, .MovieYear = tMovieInSet.DBMovie.MainDetails.Year})
                        Else
                            Posters.Add(New MovieInSetPoster With {.MoviePoster = My.Resources.noposter, .MovieTitle = tMovieInSet.DBMovie.MainDetails.Title, .MovieYear = tMovieInSet.DBMovie.MainDetails.Year})
                        End If
                    Next
                Catch ex As Exception
                    logger.Error(ex, New StackFrame().GetMethod().Name)
                    e.Result = New Results With {.MovieInSetPosters = Nothing}
                    e.Cancel = True
                End Try
            End If

            e.Result = New Results With {.MovieInSetPosters = Posters}
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            e.Result = New Results With {.MovieInSetPosters = Nothing}
            e.Cancel = True
        End Try
    End Sub

    Private Sub InfoScreen_Images_Load_DoWork_TVEpisode(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwLoadImages_TVEpisode.DoWork
        MainActors.Clear()
        MainBackground.Clear()
        MainBanner.Clear()
        MainCharacterArt.Clear()
        MainClearArt.Clear()
        MainClearLogo.Clear()
        MainDiscArt.Clear()
        MainFanart.Clear()
        MainKeyart.Clear()
        MainLandscape.Clear()
        MainPoster.Clear()

        If bwLoadImages_TVEpisode.CancellationPending Then
            e.Cancel = True
            Return
        End If

        currTV.LoadAllImages(True, False)

        If bwLoadImages_TVEpisode.CancellationPending Then
            e.Cancel = True
            Return
        End If

        If Master.eSettings.GeneralDisplayFanart Then MainFanart = currTV.ImagesContainer.Fanart.ImageOriginal
        If Master.eSettings.GeneralDisplayPoster Then MainPoster = currTV.ImagesContainer.Poster.ImageOriginal

        If bwLoadImages_TVEpisode.CancellationPending Then
            e.Cancel = True
            Return
        End If

        If Master.eSettings.GeneralDisplayFanartAsBackground Then
            Dim NeedsGS As Boolean = False
            If currTV.ImagesContainer.Fanart.ImageOriginal.Image IsNot Nothing Then
                MainBackground = currTV.ImagesContainer.Fanart.ImageOriginal
            Else
                Dim SeasonID As Long = Master.DB.Get_TVSeasonIdByEpisode(currTV)
                Dim TVSeasonFanart As String = Master.DB.Get_ArtForItem(SeasonID, EFEnums.MediaType.TVSeason, "fanart")
                If Not String.IsNullOrEmpty(TVSeasonFanart) Then
                    MainBackground.LoadFromFile(TVSeasonFanart, True)
                    NeedsGS = True
                Else
                    Dim TVShowFanart As String = Master.DB.Get_ArtForItem(currTV.ShowID, EFEnums.MediaType.TVShow, "fanart")
                    If Not String.IsNullOrEmpty(TVShowFanart) Then
                        MainBackground.LoadFromFile(TVShowFanart, True)
                        NeedsGS = True
                    End If
                End If
            End If

            If MainBackground.Image IsNot Nothing Then
                If String.IsNullOrEmpty(currTV.Filename) Then
                    MainBackground = ImageUtils.AddMissingStamp(MainBackground)
                ElseIf NeedsGS Then
                    MainBackground = ImageUtils.GrayScale(MainBackground)
                End If
            End If
        End If

        If bwLoadImages_TVEpisode.CancellationPending Then
            e.Cancel = True
            Return
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_DoWork_TVSeason(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwLoadImages_TVSeason.DoWork
        MainActors.Clear()
        MainBackground.Clear()
        MainBanner.Clear()
        MainCharacterArt.Clear()
        MainClearArt.Clear()
        MainClearLogo.Clear()
        MainDiscArt.Clear()
        MainFanart.Clear()
        MainKeyart.Clear()
        MainLandscape.Clear()
        MainPoster.Clear()

        If bwLoadImages_TVSeason.CancellationPending Then
            e.Cancel = True
            Return
        End If

        currTV.LoadAllImages(True, False)

        If bwLoadImages_TVSeason.CancellationPending Then
            e.Cancel = True
            Return
        End If

        If Master.eSettings.GeneralDisplayBanner Then MainBanner = currTV.ImagesContainer.Banner.ImageOriginal
        If Master.eSettings.GeneralDisplayFanart Then MainFanart = currTV.ImagesContainer.Fanart.ImageOriginal
        If Master.eSettings.GeneralDisplayLandscape Then MainLandscape = currTV.ImagesContainer.Landscape.ImageOriginal
        If Master.eSettings.GeneralDisplayPoster Then MainPoster = currTV.ImagesContainer.Poster.ImageOriginal

        If bwLoadImages_TVSeason.CancellationPending Then
            e.Cancel = True
            Return
        End If

        If Master.eSettings.GeneralDisplayFanartAsBackground Then
            Dim NeedsGS As Boolean = False
            If currTV.ImagesContainer.Fanart.ImageOriginal.Image IsNot Nothing Then
                MainBackground = currTV.ImagesContainer.Fanart.ImageOriginal
            Else
                Dim TVShowFanart As String = Master.DB.Get_ArtForItem(currTV.ShowID, EFEnums.MediaType.TVShow, "fanart")
                If Not String.IsNullOrEmpty(TVShowFanart) Then
                    MainBackground.LoadFromFile(TVShowFanart, True)
                    NeedsGS = True
                End If
            End If

            If MainBackground.Image IsNot Nothing AndAlso NeedsGS Then
                MainBackground = ImageUtils.GrayScale(MainBackground)
            End If
        End If

        If bwLoadImages_TVSeason.CancellationPending Then
            e.Cancel = True
            Return
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_DoWork_TVShow(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwLoadImages_TVShow.DoWork
        MainActors.Clear()
        MainBackground.Clear()
        MainBanner.Clear()
        MainCharacterArt.Clear()
        MainClearArt.Clear()
        MainClearLogo.Clear()
        MainDiscArt.Clear()
        MainFanart.Clear()
        MainKeyart.Clear()
        MainLandscape.Clear()
        MainPoster.Clear()

        If bwLoadImages_TVShow.CancellationPending Then
            e.Cancel = True
            Return
        End If

        currTV.LoadAllImages(True, False)

        If bwLoadImages_TVShow.CancellationPending Then
            e.Cancel = True
            Return
        End If

        If Master.eSettings.GeneralDisplayBanner Then MainBanner = currTV.ImagesContainer.Banner.ImageOriginal
        If Master.eSettings.GeneralDisplayCharacterArt Then MainCharacterArt = currTV.ImagesContainer.CharacterArt.ImageOriginal
        If Master.eSettings.GeneralDisplayClearArt Then MainClearArt = currTV.ImagesContainer.ClearArt.ImageOriginal
        If Master.eSettings.GeneralDisplayClearLogo Then MainClearLogo = currTV.ImagesContainer.ClearLogo.ImageOriginal
        If Master.eSettings.GeneralDisplayFanart Then MainFanart = currTV.ImagesContainer.Fanart.ImageOriginal
        If Master.eSettings.GeneralDisplayFanartAsBackground Then MainBackground = currTV.ImagesContainer.Fanart.ImageOriginal
        If Master.eSettings.GeneralDisplayKeyart Then MainKeyart = currTV.ImagesContainer.Keyart.ImageOriginal
        If Master.eSettings.GeneralDisplayLandscape Then MainLandscape = currTV.ImagesContainer.Landscape.ImageOriginal
        If Master.eSettings.GeneralDisplayPoster Then MainPoster = currTV.ImagesContainer.Poster.ImageOriginal

        If bwLoadImages_TVShow.CancellationPending Then
            e.Cancel = True
            Return
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_RunWorkerCompleted_Movie(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwLoadImages_Movie.RunWorkerCompleted
        If Not e.Cancelled Then
            InfoScreen_Show_Images()
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_RunWorkerCompleted_Movieset(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwLoadImages_Movieset.RunWorkerCompleted
        If Not e.Cancelled Then
            InfoScreen_Show_Images()
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_RunWorkerCompleted_Movieset_MoviePosters(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwLoadImages_MoviesetMoviePosters.RunWorkerCompleted
        lvMoviesInSet.Clear()
        ilMoviesInSet.Images.Clear()
        ilMoviesInSet.ImageSize = New Size(59, 88)
        ilMoviesInSet.ColorDepth = ColorDepth.Depth32Bit
        lvMoviesInSet.Visible = False

        If Not e.Cancelled Then
            Try
                Dim Res As Results = DirectCast(e.Result, Results)

                If Res.MovieInSetPosters IsNot Nothing AndAlso Res.MovieInSetPosters.Count > 0 Then
                    lvMoviesInSet.BeginUpdate()
                    For Each tPoster As MovieInSetPoster In Res.MovieInSetPosters
                        If tPoster IsNot Nothing Then
                            ilMoviesInSet.Images.Add(tPoster.MoviePoster)
                            lvMoviesInSet.Items.Add(String.Concat(tPoster.MovieTitle, Environment.NewLine, "(", tPoster.MovieYear, ")"), ilMoviesInSet.Images.Count - 1)
                        End If
                    Next
                    lvMoviesInSet.EndUpdate()
                    lvMoviesInSet.Visible = True
                End If
            Catch ex As Exception
                logger.Error(ex, New StackFrame().GetMethod().Name)
            End Try
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_RunWorkerCompleted_TVEpisode(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwLoadImages_TVEpisode.RunWorkerCompleted
        If Not e.Cancelled Then
            InfoScreen_Show_Images()
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_RunWorkerCompleted_TVSeason(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwLoadImages_TVSeason.RunWorkerCompleted
        If Not e.Cancelled Then
            InfoScreen_Show_Images()
        End If
    End Sub

    Private Sub InfoScreen_Images_Load_RunWorkerCompleted_TVShow(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwLoadImages_TVShow.RunWorkerCompleted
        If Not e.Cancelled Then
            InfoScreen_Show_Images()
        End If
    End Sub

    Private Sub InfoScreen_Load_Movie(ByVal ID As Long)
        InfoScreen_Show_NoInformation(False)
        InfoScreen_Clear()

        currMovie = Master.DB.Load_Movie(ID)
        InfoScreen_Show_Data_Movie()

        If bwLoadImages_Movie.IsBusy AndAlso Not bwLoadImages_Movie.CancellationPending Then
            bwLoadImages_Movie.CancelAsync()
        End If

        While bwLoadImages_Movie.IsBusy
            Application.DoEvents()
        End While

        bwLoadImages_Movie = New ComponentModel.BackgroundWorker With {
            .WorkerSupportsCancellation = True
        }
        bwLoadImages_Movie.RunWorkerAsync()
    End Sub

    Private Sub InfoScreen_Load_Movieset(ByVal ID As Long)
        InfoScreen_Show_NoInformation(False)
        InfoScreen_Clear()

        currMovieset = Master.DB.Load_Movieset(ID)
        InfoScreen_Show_Data_Movieset()

        If bwLoadImages_Movieset.IsBusy AndAlso Not bwLoadImages_Movieset.CancellationPending Then
            bwLoadImages_Movieset.CancelAsync()
        End If

        While bwLoadImages_Movieset.IsBusy
            Application.DoEvents()
        End While

        bwLoadImages_Movieset = New ComponentModel.BackgroundWorker With {
            .WorkerSupportsCancellation = True
        }
        bwLoadImages_Movieset.RunWorkerAsync()
    End Sub

    Private Sub InfoScreen_Load_TVEpisode(ByVal ID As Long)
        InfoScreen_Show_NoInformation(False)
        InfoScreen_Clear()

        If Not currThemeType = Enums.ContentType.TVEpisode Then Theme_Apply(Enums.ContentType.TVEpisode)

        currTV = Master.DB.Load_TVEpisode(ID, True)
        InfoScreen_Show_Data_TVEpisode()

        If bwLoadImages_TVEpisode.IsBusy AndAlso Not bwLoadImages_TVEpisode.CancellationPending Then
            bwLoadImages_TVEpisode.CancelAsync()
        End If

        While bwLoadImages_TVEpisode.IsBusy
            Application.DoEvents()
        End While

        bwLoadImages_TVEpisode = New ComponentModel.BackgroundWorker With {
            .WorkerSupportsCancellation = True
        }
        bwLoadImages_TVEpisode.RunWorkerAsync()
    End Sub

    Private Sub InfoScreen_Load_TVSeason(ByVal ID As Long)
        InfoScreen_Show_NoInformation(False)
        InfoScreen_Clear()

        If Not currThemeType = Enums.ContentType.TVSeason Then Theme_Apply(Enums.ContentType.TVSeason)

        currTV = Master.DB.Load_TVSeason(ID, True, False)
        InfoScreen_Show_Data_TVSeason()

        If bwLoadImages_TVSeason.IsBusy AndAlso Not bwLoadImages_TVSeason.CancellationPending Then
            bwLoadImages_TVSeason.CancelAsync()
        End If

        While bwLoadImages_TVSeason.IsBusy
            Application.DoEvents()
        End While

        bwLoadImages_TVSeason = New ComponentModel.BackgroundWorker With {
            .WorkerSupportsCancellation = True
        }
        bwLoadImages_TVSeason.RunWorkerAsync()
    End Sub

    Private Sub InfoScreen_Load_TVShow(ByVal ID As Long)
        InfoScreen_Show_NoInformation(False)
        InfoScreen_Clear()

        If Not currThemeType = Enums.ContentType.TVShow Then Theme_Apply(Enums.ContentType.TVShow)

        currTV = Master.DB.Load_TVShow(ID, False, False)
        InfoScreen_Show_Data_TVShow()

        If bwLoadImages_TVShow.IsBusy AndAlso Not bwLoadImages_TVShow.CancellationPending Then
            bwLoadImages_TVShow.CancelAsync()
        End If

        While bwLoadImages_TVShow.IsBusy
            Application.DoEvents()
        End While

        bwLoadImages_TVShow = New ComponentModel.BackgroundWorker With {
            .WorkerSupportsCancellation = True
        }
        bwLoadImages_TVShow.RunWorkerAsync()

        DataGridView_FillList_TVSeason(ID)
    End Sub
    ''' <summary>
    ''' Slide the genre images along with the panel and move with form resizing
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub InfoScreen_Move_GenreIcons()
        Try
            For i As Integer = 0 To pnlGenre.Count - 1
                pnlGenre(i).Left = ((pnlInfoPanel.Right) - (i * 73)) - 73
                pnlGenre(i).Top = pnlInfoPanel.Top - 105
            Next
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Slide the MPAA image along with the panel
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub InfoScreen_Move_MPAAIcon()
        pnlMPAA.BringToFront()
        pnlMPAA.Size = New Size(pbMPAA.Width + 10, pbMPAA.Height + 10)
        pbMPAA.Location = New Point(4, 4)
        pnlMPAA.Top = pnlInfoPanel.Top - (pnlMPAA.Height + 10)
    End Sub

    Private Sub InfoScreen_PictureBox_Banner_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbBanner.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbBannerCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbBannerCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        If dgvMovies.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainBanner, True)
                        Dim ScraperResult = Scraper.Run(tmpDBElement)
                        If ScraperResult.Images.MainBanners.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResult.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Banner = dlgImgS.Result.ImagesContainer.Banner
                                Master.DB.Save_Movie(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movie(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1363, "No Banners found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.Movieset
                        If dgvMovieSets.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainBanner, True)
                        Dim ScraperResult = Scraper.Run(tmpDBElement)
                        If ScraperResult.Images.MainBanners.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResult.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Banner = dlgImgS.Result.ImagesContainer.Banner
                                Master.DB.Save_Movieset(tmpDBElement, False, True, True, True, False)
                                DataGridView_Row_Update_Movieset(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1363, "No Banners found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            If dgvTVShows.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(ID, False, False)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainBanner, True)
                            Dim ScraperResult = Scraper.Run(tmpDBElement)
                            If ScraperResult.Images.MainBanners.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResult.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Banner = dlgImgS.Result.ImagesContainer.Banner
                                    Master.DB.Save_TVShow(tmpDBElement, False, False, True, False)
                                    DataGridView_Row_Update_TVShow(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(1363, "No Banners found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            If dgvTVSeasons.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVSeasons.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVSeasons.Item("idSeason", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVSeason(ID, True, False)
                            If tmpDBElement.MainDetails.Season_IsAllSeasons Then
                                Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.AllSeasonsBanner, True)
                            Else
                                Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.SeasonBanner, True)
                            End If
                            Dim ScraperResult = Scraper.Run(tmpDBElement)
                            If ScraperResult.Images.SeasonBanners.Count > 0 OrElse (tmpDBElement.MainDetails.Season_IsAllSeasons AndAlso ScraperResult.Images.MainBanners.Count > 0) Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResult.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Banner = dlgImgS.Result.ImagesContainer.Banner
                                    Master.DB.Save_TVSeason(tmpDBElement, False, True, True)
                                    DataGridView_Row_Update_TVSeason(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(1363, "No Banners found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            Return
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub

    Private Sub InfoScreen_PictureBox_CharacterArt_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbCharacterArt.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbCharacterArtCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbCharacterArtCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        Return
                    Case Enums.ContentType.Movieset
                        Return
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            If dgvTVShows.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(ID, False, False)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainCharacterArt, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.MainCharacterArts.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.CharacterArt = dlgImgS.Result.ImagesContainer.CharacterArt
                                    Master.DB.Save_TVShow(tmpDBElement, False, False, True, False)
                                    DataGridView_Row_Update_TVShow(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(970, "No Fanarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            Return

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            Return
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub

    Private Sub InfoScreen_PictureBox_ClearArt_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbClearArt.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbClearArtCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbClearArtCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        If dgvMovies.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainClearArt, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainClearArts.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.ClearArt = dlgImgS.Result.ImagesContainer.ClearArt
                                Master.DB.Save_Movie(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movie(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1102, "No ClearArts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.Movieset
                        If dgvMovieSets.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainClearArt, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainClearArts.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.ClearArt = dlgImgS.Result.ImagesContainer.ClearArt
                                Master.DB.Save_Movieset(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movieset(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1102, "No ClearArts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            If dgvTVShows.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(ID, False, False)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainClearArt, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.MainClearArts.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.ClearArt = dlgImgS.Result.ImagesContainer.ClearArt
                                    Master.DB.Save_TVShow(tmpDBElement, False, False, True, False)
                                    DataGridView_Row_Update_TVShow(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(1102, "No ClearArts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            Return

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            Return
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub

    Private Sub InfoScreen_PictureBox_ClearLogo_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbClearLogo.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbClearLogoCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbClearLogoCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        If dgvMovies.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainClearLogo, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainClearLogos.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.ClearLogo = dlgImgS.Result.ImagesContainer.ClearLogo
                                Master.DB.Save_Movie(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movie(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1103, "No ClearLogos found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.Movieset
                        If dgvMovieSets.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainClearLogo, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainClearLogos.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.ClearLogo = dlgImgS.Result.ImagesContainer.ClearLogo
                                Master.DB.Save_Movieset(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movieset(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1103, "No ClearLogos found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            If dgvTVShows.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(ID, False, False)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainClearLogo, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.MainClearLogos.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.ClearLogo = dlgImgS.Result.ImagesContainer.ClearLogo
                                    Master.DB.Save_TVShow(tmpDBElement, False, False, True, False)
                                    DataGridView_Row_Update_TVShow(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(1103, "No ClearLogos found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            Return

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            Return
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub

    Private Sub InfoScreen_PictureBox_DiscArt_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbDiscArt.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbDiscArtCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbDiscArtCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        If dgvMovies.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainDiscArt, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainDiscArts.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.DiscArt = dlgImgS.Result.ImagesContainer.DiscArt
                                Master.DB.Save_Movie(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movie(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1104, "No DiscArts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.Movieset
                        If dgvMovieSets.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainDiscArt, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainDiscArts.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.DiscArt = dlgImgS.Result.ImagesContainer.DiscArt
                                Master.DB.Save_Movieset(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movieset(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1104, "No DiscArts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            Return

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            Return

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            Return
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub
    ''' <summary>
    ''' Show the Fanart in the Image Viewer
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub InfoScreen_PictureBox_Fanart_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbFanartSmall.MouseDoubleClick, pbBackground.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbBackgroundCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbBackgroundCache.Image)
                    End Using
                ElseIf pbFanartSmallCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbFanartSmallCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        If dgvMovies.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainFanart, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainFanarts.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Fanart = dlgImgS.Result.ImagesContainer.Fanart
                                Master.DB.Save_Movie(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movie(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(970, "No Fanarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.Movieset
                        If dgvMovieSets.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainFanart, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainFanarts.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Fanart = dlgImgS.Result.ImagesContainer.Fanart
                                Master.DB.Save_Movieset(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movieset(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(970, "No Fanarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            If dgvTVShows.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(ID, False, False)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainFanart, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.MainFanarts.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Fanart = dlgImgS.Result.ImagesContainer.Fanart
                                    Master.DB.Save_TVShow(tmpDBElement, False, False, True, False)
                                    DataGridView_Row_Update_TVShow(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(970, "No Fanarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            If dgvTVSeasons.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVSeasons.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVSeasons.Item("idSeason", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVSeason(ID, True, False)
                            If tmpDBElement.MainDetails.Season_IsAllSeasons Then
                                Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.AllSeasonsFanart, True)
                            Else
                                Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.SeasonFanart, True)
                            End If
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.SeasonFanarts.Count > 0 OrElse ScraperResults.Images.MainFanarts.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Fanart = dlgImgS.Result.ImagesContainer.Fanart
                                    Master.DB.Save_TVSeason(tmpDBElement, False, True, True)
                                    DataGridView_Row_Update_TVSeason(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(970, "No Fanarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            If dgvTVEpisodes.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVEpisodes.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVEpisodes.Item("idEpisode", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVEpisode(ID, True)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.EpisodeFanart, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.EpisodeFanarts.Count > 0 OrElse ScraperResults.Images.MainFanarts.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Fanart = dlgImgS.Result.ImagesContainer.Fanart
                                    Master.DB.Save_TVEpisode(tmpDBElement, False, False, True, False, True)
                                    DataGridView_Row_Update_TVEpisode(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(970, "No Fanarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub

    Private Sub InfoScreen_PictureBox_Keyart_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbKeyart.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbKeyartCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbKeyartCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        If dgvMovies.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainKeyart, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainKeyarts.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Keyart = dlgImgS.Result.ImagesContainer.Keyart
                                Master.DB.Save_Movie(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movie(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1239, "No Keyarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.Movieset
                        If dgvMovieSets.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainKeyart, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainKeyarts.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Keyart = dlgImgS.Result.ImagesContainer.Keyart
                                Master.DB.Save_Movieset(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movieset(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1239, "No Keyarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            If dgvTVShows.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(ID, False, False)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainKeyart, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.MainKeyarts.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Keyart = dlgImgS.Result.ImagesContainer.Keyart
                                    Master.DB.Save_TVShow(tmpDBElement, False, False, True, False)
                                    DataGridView_Row_Update_TVShow(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(1239, "No Keyarts found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            Return

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            Return
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub

    Private Sub InfoScreen_PictureBox_Landscape_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbLandscape.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbLandscapeCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbLandscapeCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        If dgvMovies.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainLandscape, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainLandscapes.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Landscape = dlgImgS.Result.ImagesContainer.Landscape
                                Master.DB.Save_Movie(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movie(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1197, "No Landscapes found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.Movieset
                        If dgvMovieSets.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainLandscape, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainLandscapes.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Landscape = dlgImgS.Result.ImagesContainer.Landscape
                                Master.DB.Save_Movieset(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movieset(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(1197, "No Landscapes found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            If dgvTVShows.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(ID, False, False)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainLandscape, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.MainLandscapes.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Landscape = dlgImgS.Result.ImagesContainer.Landscape
                                    Master.DB.Save_TVShow(tmpDBElement, False, False, True, False)
                                    DataGridView_Row_Update_TVShow(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(1197, "No Landscapes found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            If dgvTVSeasons.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVSeasons.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVSeasons.Item("idSeason", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVSeason(ID, True, False)
                            If tmpDBElement.MainDetails.Season_IsAllSeasons Then
                                Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.AllSeasonsLandscape, True)
                            Else
                                Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.SeasonLandscape, True)
                            End If
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.SeasonLandscapes.Count > 0 OrElse (tmpDBElement.MainDetails.Season_IsAllSeasons AndAlso ScraperResults.Images.MainLandscapes.Count > 0) Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Landscape = dlgImgS.Result.ImagesContainer.Landscape
                                    Master.DB.Save_TVSeason(tmpDBElement, False, True, True)
                                    DataGridView_Row_Update_TVSeason(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(1197, "No Landscapes found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            Return
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub

    Private Sub InfoScreen_PictureBox_Poster_DoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles pbPoster.MouseDoubleClick
        Try
            If e.Button = MouseButtons.Left OrElse Not Master.eSettings.GeneralDoubleClickScrape Then
                If pbPosterCache.Image IsNot Nothing Then
                    Using dImgView As New dlgImageViewer
                        dImgView.ShowDialog(pbPosterCache.Image)
                    End Using
                End If
            ElseIf e.Button = MouseButtons.Right AndAlso Master.eSettings.GeneralDoubleClickScrape Then

                Select Case MainTab_GetCurrentTag.ContentType
                    Case Enums.ContentType.Movie
                        If dgvMovies.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovies.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovies.Item("idMovie", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainPoster, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainPosters.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Poster = dlgImgS.Result.ImagesContainer.Poster
                                Master.DB.Save_Movie(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movie(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(972, "No Posters found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.Movieset
                        If dgvMovieSets.SelectedRows.Count > 1 Then Return
                        SetControlsEnabled(False)

                        Dim indX As Integer = dgvMovieSets.SelectedRows(0).Index
                        Dim ID As Long = Convert.ToInt64(dgvMovieSets.Item("idSet", indX).Value)
                        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(ID)
                        Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainPoster, True)
                        Dim ScraperResults = Scraper.Run(tmpDBElement)
                        If ScraperResults.Images.MainPosters.Count > 0 Then
                            Dim dlgImgS As New dlgImgSelect()
                            If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                tmpDBElement.ImagesContainer.Poster = dlgImgS.Result.ImagesContainer.Poster
                                Master.DB.Save_Movieset(tmpDBElement, False, False, True, True, False)
                                DataGridView_Row_Update_Movieset(ID)
                            End If
                        Else
                            MessageBox.Show(Master.eLang.GetString(972, "No Posters found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        End If
                        SetControlsEnabled(True)
                    Case Enums.ContentType.TV
                        'TV Show list
                        If dgvTVShows.Focused Then
                            If dgvTVShows.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVShows.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVShows.Item("idShow", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(ID, False, False)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.MainPoster, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.MainPosters.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Poster = dlgImgS.Result.ImagesContainer.Poster
                                    Master.DB.Save_TVShow(tmpDBElement, False, False, True, False)
                                    DataGridView_Row_Update_TVShow(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(972, "No Posters found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Season list
                        ElseIf dgvTVSeasons.Focused Then
                            If dgvTVSeasons.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVSeasons.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVSeasons.Item("idSeason", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVSeason(ID, True, False)
                            If tmpDBElement.MainDetails.Season_IsAllSeasons Then
                                Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.AllSeasonsPoster, True)
                            Else
                                Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.SeasonPoster, True)
                            End If
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.SeasonPosters.Count > 0 OrElse (tmpDBElement.MainDetails.Season_IsAllSeasons AndAlso ScraperResults.Images.MainPosters.Count > 0) Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Poster = dlgImgS.Result.ImagesContainer.Poster
                                    Master.DB.Save_TVSeason(tmpDBElement, False, True, True)
                                    DataGridView_Row_Update_TVSeason(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(972, "No Posters found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)

                            'TV Episode list
                        ElseIf dgvTVEpisodes.Focused Then
                            If dgvTVEpisodes.SelectedRows.Count > 1 Then Return
                            SetControlsEnabled(False)

                            Dim indX As Integer = dgvTVEpisodes.SelectedRows(0).Index
                            Dim ID As Long = Convert.ToInt64(dgvTVEpisodes.Item("idEpisode", indX).Value)
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVEpisode(ID, True)
                            Functions.SetScrapeModifiers(tmpDBElement.ScrapeModifiers, Enums.ModifierType.EpisodePoster, True)
                            Dim ScraperResults = Scraper.Run(tmpDBElement)
                            If ScraperResults.Images.EpisodePosters.Count > 0 Then
                                Dim dlgImgS As New dlgImgSelect()
                                If dlgImgS.ShowDialog(tmpDBElement, ScraperResults.Images) = DialogResult.OK Then
                                    tmpDBElement.ImagesContainer.Poster = dlgImgS.Result.ImagesContainer.Poster
                                    Master.DB.Save_TVEpisode(tmpDBElement, False, False, True, False, True)
                                    DataGridView_Row_Update_TVEpisode(ID)
                                End If
                            Else
                                MessageBox.Show(Master.eLang.GetString(972, "No Posters found"), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
                            End If
                            SetControlsEnabled(True)
                        End If
                End Select
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
            SetControlsEnabled(True)
        End Try
    End Sub

    Private Sub InfoScreen_SetAVImages(ByVal images As Image())
        pbVideoResolution.Image = images(0)
        pbVideoSource.Image = images(1)
        pbVideoCodec.Image = images(2)
        pbAudioCodec.Image = images(3)
        pbAudioChannels.Image = images(4)
        pbAudioLang0.Image = images(5)
        pbAudioLang1.Image = images(6)
        pbAudioLang2.Image = images(7)
        pbAudioLang3.Image = images(8)
        pbAudioLang4.Image = images(9)
        pbAudioLang5.Image = images(10)
        pbAudioLang6.Image = images(11)
        pbSubtitleLang0.Image = images(12)
        pbSubtitleLang1.Image = images(13)
        pbSubtitleLang2.Image = images(14)
        pbSubtitleLang3.Image = images(15)
        pbSubtitleLang4.Image = images(16)
        pbSubtitleLang5.Image = images(17)
        pbSubtitleLang6.Image = images(18)
        pbVideoChannels.Image = images(19)

        ToolTips.SetToolTip(pbAudioLang0, If(pbAudioLang0.Image IsNot Nothing, pbAudioLang0.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbAudioLang1, If(pbAudioLang1.Image IsNot Nothing, pbAudioLang1.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbAudioLang2, If(pbAudioLang2.Image IsNot Nothing, pbAudioLang2.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbAudioLang3, If(pbAudioLang3.Image IsNot Nothing, pbAudioLang3.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbAudioLang4, If(pbAudioLang4.Image IsNot Nothing, pbAudioLang4.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbAudioLang5, If(pbAudioLang5.Image IsNot Nothing, pbAudioLang5.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbAudioLang6, If(pbAudioLang6.Image IsNot Nothing, pbAudioLang6.Image.Tag.ToString, String.Empty))

        ToolTips.SetToolTip(pbSubtitleLang0, If(pbSubtitleLang0.Image IsNot Nothing, pbSubtitleLang0.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbSubtitleLang1, If(pbSubtitleLang1.Image IsNot Nothing, pbSubtitleLang1.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbSubtitleLang2, If(pbSubtitleLang2.Image IsNot Nothing, pbSubtitleLang2.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbSubtitleLang3, If(pbSubtitleLang3.Image IsNot Nothing, pbSubtitleLang3.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbSubtitleLang4, If(pbSubtitleLang4.Image IsNot Nothing, pbSubtitleLang4.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbSubtitleLang5, If(pbSubtitleLang5.Image IsNot Nothing, pbSubtitleLang5.Image.Tag.ToString, String.Empty))
        ToolTips.SetToolTip(pbSubtitleLang6, If(pbSubtitleLang6.Image IsNot Nothing, pbSubtitleLang6.Image.Tag.ToString, String.Empty))
    End Sub

    Private Sub InfoScreen_Show_Data_Movie()
        SuspendLayout()

        'Title
        Dim strTitle As String = String.Empty
        If currMovie.MainDetails.TitleSpecified Then
            strTitle = currMovie.MainDetails.Title
        Else
            strTitle = Master.eLang.GetString(117, "Unknown Movie")
        End If
        If currMovie.MainDetails.EditionSpecified Then
            strTitle = String.Concat(strTitle, String.Format(" ({0})", currMovie.MainDetails.Edition))
        End If
        If currMovie.MainDetails.YearSpecified Then
            strTitle = String.Concat(strTitle, String.Format(" ({0})", currMovie.MainDetails.Year))
        End If
        lblTitle.Text = strTitle.Trim

        'OriginalTitle
        If currMovie.MainDetails.OriginalTitleSpecified AndAlso Not currMovie.MainDetails.OriginalTitle = currMovie.MainDetails.Title Then
            lblOriginalTitle.Text = String.Format(String.Concat(Master.eLang.GetString(302, "Original Title"), ": {0}"), currMovie.MainDetails.OriginalTitle)
        Else
            lblOriginalTitle.Text = String.Empty
        End If

        lblCertifications.Text = String.Join(" / ", currMovie.MainDetails.Certifications.ToArray)
        lblCollections.Text = String.Join(" / ", From sets In currMovie.MainDetails.Sets.Items Select sets.Title)
        lblCountries.Text = String.Join(" / ", currMovie.MainDetails.Countries.ToArray)
        lblCredits.Text = String.Join(" / ", currMovie.MainDetails.Credits.ToArray)
        lblDirectors.Text = String.Join(" / ", currMovie.MainDetails.Directors.ToArray)
        lblDirectorsHeader.Text = Master.eLang.GetString(940, "Directors")
        lblIMDBHeader.Tag = StringUtils.GetURL_IMDb(currMovie)
        lblPremiered.Text = currMovie.MainDetails.Premiered
        lblPremieredHeader.Text = Master.eLang.GetString(724, "Premiered")
        lblTMDBHeader.Tag = StringUtils.GetURL_TMDb(currMovie)
        lblTagline.Text = currMovie.MainDetails.Tagline
        lblTags.Text = String.Join(" / ", currMovie.MainDetails.Tags.ToArray)
        txtFilePath.Text = currMovie.Filename
        txtIMDBID.Text = currMovie.MainDetails.UniqueIDs.IMDbId
        txtMetaData.Text = NFO.FIToString(currMovie.MainDetails.FileInfo, False)
        txtOutline.Text = currMovie.MainDetails.Outline
        txtPlot.Text = currMovie.MainDetails.Plot
        txtTMDBID.Text = If(currMovie.MainDetails.UniqueIDs.TMDbIdSpecified, currMovie.MainDetails.UniqueIDs.TMDbId.ToString, String.Empty)
        txtTrailerPath.Text = If(Not String.IsNullOrEmpty(currMovie.Trailer.LocalFilePath), currMovie.Trailer.LocalFilePath, currMovie.MainDetails.Trailer)

        'Ratings, UserRating & Top250
        If currMovie.MainDetails.RatingsSpecified OrElse currMovie.MainDetails.UserRatingSpecified OrElse currMovie.MainDetails.Top250Specified Then
            InfoScreen_Show_Ratings(currMovie.MainDetails.Ratings.Items, currMovie.MainDetails.UserRating, currMovie.MainDetails.Top250)
        End If

        'Runtime
        If currMovie.MainDetails.RuntimeSpecified Then
            lblRuntime.Text = String.Format(Master.eLang.GetString(112, "Runtime: {0}"), If(currMovie.MainDetails.Runtime.Contains("|"), currMovie.MainDetails.Runtime.Substring(0, currMovie.MainDetails.Runtime.IndexOf("|")), currMovie.MainDetails.Runtime)).Trim
        End If

        'Actors
        alActors = New List(Of String)
        If currMovie.MainDetails.ActorsSpecified Then
            pbActors.Image = My.Resources.actor_silhouette
            For Each imdbAct As RoleLink In currMovie.MainDetails.Actors
                Dim thumb = Master.Thumbs(imdbAct.PersonId)
                If Not String.IsNullOrEmpty(thumb.LocalFilePath) AndAlso File.Exists(thumb.LocalFilePath) Then
                    If Not imdbAct.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not imdbAct.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alActors.Add(thumb.LocalFilePath)
                    Else
                        alActors.Add("none")
                    End If
                ElseIf Not String.IsNullOrEmpty(imdbAct.URLOriginal) Then
                    If Not imdbAct.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not imdbAct.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alActors.Add(imdbAct.URLOriginal)
                    Else
                        alActors.Add("none")
                    End If
                Else
                    alActors.Add("none")
                End If

                If imdbAct.RoleSpecified Then
                    lstActors.Items.Add(String.Format(Master.eLang.GetString(131, "{0} as {1}"), imdbAct.Person.Name.Trim, imdbAct.Role.Trim))
                Else
                    lstActors.Items.Add(imdbAct.Person.Name.Trim)
                End If
            Next
            lstActors.SelectedIndex = 0
        End If

        'MPAA
        If currMovie.MainDetails.MPAASpecified Then
            Dim tmpRatingImg As Image = APIXML.GetRatingImage(currMovie.MainDetails.MPAA)
            If tmpRatingImg IsNot Nothing Then
                pbMPAA.Image = tmpRatingImg
                InfoScreen_Move_MPAAIcon()
            End If
            If pbMPAA.Image IsNot Nothing Then pnlMPAA.Visible = True
        End If

        'Genres
        If currMovie.MainDetails.GenresSpecified Then
            InfoScreen_GenreIcons_Load(currMovie.MainDetails.Genres)
            For i As Integer = 0 To pnlGenre.Count - 1
                pnlGenre(i).Visible = True
            Next
        End If

        'Studios
        If currMovie.MainDetails.StudiosSpecified Then
            pbStudio.Image = APIXML.GetStudioImage(currMovie.MainDetails.Studios.Item(0).ToLower) 'ByDef all image files are lower case
            pbStudio.Tag = currMovie.MainDetails.Studios.Item(0)
        Else
            pbStudio.Image = APIXML.GetStudioImage("####")
            pbStudio.Tag = String.Empty
        End If
        If Master.eAdvancedSettings.GetBooleanSetting("StudioTagAlwaysOn", False) Then
            lblStudio.Text = pbStudio.Tag.ToString
        End If

        'Metadata Flags
        If Master.eSettings.MovieScraperMetaDataScan Then
            InfoScreen_SetAVImages(APIXML.GetAVImages(
                                   currMovie.MainDetails.FileInfo,
                                   currMovie.Filename,
                                   currMovie.ContentType,
                                   currMovie.MainDetails.VideoSource
                                   ))
            pnlInfoIcons.Width = pbVideoChannels.Width + pbVideoSource.Width + pbVideoCodec.Width + pbVideoResolution.Width + pbAudioCodec.Width + pbAudioChannels.Width + pbStudio.Width + 6
            pbStudio.Left = pbVideoChannels.Width + pbVideoSource.Width + pbVideoCodec.Width + pbVideoResolution.Width + pbAudioCodec.Width + pbAudioChannels.Width + 5
        Else
            pnlInfoIcons.Width = pbStudio.Width + 1
            pbStudio.Left = 0
        End If

        InfoCleared = False

        If bDoingSearch_Movies Then
            txtSearchMovies.Focus()
            bDoingSearch_Movies = False
        Else
            dgvMovies.Focus()
        End If

        ResumeLayout()
    End Sub

    Private Sub InfoScreen_Show_Data_Movieset()
        SuspendLayout()

        'Title
        If currMovieset.MainDetails.TitleSpecified AndAlso currMovieset.MoviesInSet IsNot Nothing AndAlso currMovieset.MoviesInSet.Count > 0 Then
            lblTitle.Text = String.Format("{0} ({1})", currMovieset.MainDetails.Title, currMovieset.MoviesInSet.Count)
        ElseIf currMovieset.MainDetails.TitleSpecified Then
            lblTitle.Text = currMovieset.MainDetails.Title
        Else
            lblTitle.Text = String.Empty
        End If

        lblTMDBHeader.Tag = StringUtils.GetURL_TMDb(currMovieset)
        txtPlot.Text = currMovieset.MainDetails.Plot
        txtTMDBID.Text = If(currMovieset.MainDetails.UniqueIDs.TMDbIdSpecified, currMovieset.MainDetails.UniqueIDs.TMDbId.ToString, String.Empty)

        'Movies in Set
        If currMovieset.MoviesInSet IsNot Nothing AndAlso currMovieset.MoviesInSet.Count > 0 Then
            If bwLoadImages_MoviesetMoviePosters.IsBusy AndAlso Not bwLoadImages_MoviesetMoviePosters.CancellationPending Then
                bwLoadImages_MoviesetMoviePosters.CancelAsync()
            End If

            While bwLoadImages_MoviesetMoviePosters.IsBusy
                Application.DoEvents()
            End While

            bwLoadImages_MoviesetMoviePosters.WorkerSupportsCancellation = True
            bwLoadImages_MoviesetMoviePosters.RunWorkerAsync()
        End If

        InfoCleared = False

        If bDoingSearch_MovieSets Then
            txtSearchMovieSets.Focus()
            bDoingSearch_MovieSets = False
        Else
            dgvMovieSets.Focus()
        End If

        ResumeLayout()
    End Sub

    Private Sub InfoScreen_Show_Data_TVEpisode()
        SuspendLayout()

        'Title
        lblTitle.Text = If(Not currTV.FilenameSpecified, String.Concat(currTV.MainDetails.Title, " ", Master.eLang.GetString(689, "[MISSING]")), currTV.MainDetails.Title)

        'OriginalTitle
        If currTV.MainDetails.OriginalTitleSpecified AndAlso Not currTV.MainDetails.OriginalTitle = currTV.MainDetails.Title Then
            lblOriginalTitle.Text = String.Format(String.Concat(Master.eLang.GetString(302, "Original Title"), ": {0}"), currTV.MainDetails.OriginalTitle)
        Else
            lblOriginalTitle.Text = String.Empty
        End If

        lblCredits.Text = String.Join(" / ", currTV.MainDetails.Credits.ToArray)
        lblDirectors.Text = String.Join(" / ", currTV.MainDetails.Directors.ToArray)
        lblDirectorsHeader.Text = Master.eLang.GetString(940, "Directors")
        lblIMDBHeader.Tag = StringUtils.GetURL_IMDb(currTV)
        lblPremiered.Text = currTV.MainDetails.Aired
        lblPremieredHeader.Text = Master.eLang.GetString(728, "Aired")
        lblTMDBHeader.Tag = StringUtils.GetURL_TMDb(currTV)
        lblTVDBHeader.Tag = StringUtils.GetURL_TVDb(currTV)
        txtFilePath.Text = currTV.Filename
        txtIMDBID.Text = currTV.MainDetails.UniqueIDs.IMDbId
        txtMetaData.Text = NFO.FIToString(currTV.MainDetails.FileInfo, False)
        txtPlot.Text = currTV.MainDetails.Plot
        txtTMDBID.Text = If(currTV.MainDetails.UniqueIDs.TMDbIdSpecified, currTV.MainDetails.UniqueIDs.TMDbId.ToString, String.Empty)
        txtTVDBID.Text = If(currTV.MainDetails.UniqueIDs.TVDbIdSpecified, currTV.MainDetails.UniqueIDs.TVDbId.ToString, String.Empty)

        'Ratings & UserRating
        If currTV.MainDetails.RatingsSpecified OrElse currTV.MainDetails.UserRatingSpecified Then
            InfoScreen_Show_Ratings(currTV.MainDetails.Ratings.Items, currTV.MainDetails.UserRating)
        End If

        'Runtime
        If currTV.MainDetails.RuntimeSpecified Then
            lblRuntime.Text = String.Format(Master.eLang.GetString(112, "Runtime: {0}"), If(currTV.MainDetails.Runtime.Contains("|"), currTV.MainDetails.Runtime.Substring(0, currTV.MainDetails.Runtime.IndexOf("|")), currTV.MainDetails.Runtime)).Trim
        ElseIf currTV.TVShowDetails.RuntimeSpecified Then
            lblRuntime.Text = String.Format(Master.eLang.GetString(112, "Runtime: {0}"), If(currTV.TVShowDetails.Runtime.Contains("|"), currTV.TVShowDetails.Runtime.Substring(0, currTV.TVShowDetails.Runtime.IndexOf("|")), currTV.TVShowDetails.Runtime)).Trim
        End If

        'Season / Episode Number
        lblTagline.Text = String.Format(Master.eLang.GetString(648, "Season: {0}, Episode: {1}"),
                            If(Not currTV.MainDetails.SeasonSpecified, "?", currTV.MainDetails.Season.ToString),
                            If(Not currTV.MainDetails.EpisodeSpecified, "?", currTV.MainDetails.Episode.ToString))

        'Actors
        alActors = New List(Of String)
        If currTV.MainDetails.ActorsSpecified Then
            pbActors.Image = My.Resources.actor_silhouette
            For Each imdbAct As RoleLink In currTV.MainDetails.Actors
                Dim thumb = Master.Thumbs(imdbAct.PersonId)
                If Not String.IsNullOrEmpty(thumb.LocalFilePath) AndAlso File.Exists(thumb.LocalFilePath) Then
                    If Not imdbAct.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not imdbAct.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alActors.Add(thumb.LocalFilePath)
                    Else
                        alActors.Add("none")
                    End If
                ElseIf Not String.IsNullOrEmpty(imdbAct.URLOriginal) Then
                    If Not imdbAct.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not imdbAct.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alActors.Add(imdbAct.URLOriginal)
                    Else
                        alActors.Add("none")
                    End If
                Else
                    alActors.Add("none")
                End If

                If String.IsNullOrEmpty(imdbAct.Role.Trim) Then
                    lstActors.Items.Add(imdbAct.Person.Name.Trim)
                Else
                    lstActors.Items.Add(String.Format(Master.eLang.GetString(131, "{0} as {1}"), imdbAct.Person.Name.Trim, imdbAct.Role.Trim))
                End If
            Next
            lstActors.SelectedIndex = 0
        End If

        'Guest Stars
        alGuestStars = New List(Of String)
        If currTV.MainDetails.GuestStarsSpecified Then
            pbGuestStars.Image = My.Resources.actor_silhouette
            For Each actor As RoleLink In currTV.MainDetails.GuestStars
                Dim thumb = Master.Thumbs(actor.PersonId)
                If Not String.IsNullOrEmpty(thumb.LocalFilePath) AndAlso File.Exists(thumb.LocalFilePath) Then
                    If Not actor.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not actor.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alGuestStars.Add(thumb.LocalFilePath)
                    Else
                        alGuestStars.Add("none")
                    End If
                ElseIf Not String.IsNullOrEmpty(actor.URLOriginal) Then
                    If Not actor.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not actor.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alGuestStars.Add(actor.URLOriginal)
                    Else
                        alGuestStars.Add("none")
                    End If
                Else
                    alGuestStars.Add("none")
                End If

                If String.IsNullOrEmpty(actor.Role.Trim) Then
                    lstGuestStars.Items.Add(actor.Person.Name.Trim)
                Else
                    lstGuestStars.Items.Add(String.Format(Master.eLang.GetString(131, "{0} as {1}"), actor.Person.Name.Trim, actor.Role.Trim))
                End If
            Next
            lstGuestStars.SelectedIndex = 0
        End If

        'MPAA
        If currTV.TVShowDetails.MPAASpecified Then
            Dim tmpRatingImg As Image = APIXML.GetTVRatingImage(currTV.TVShowDetails.MPAA)
            If tmpRatingImg IsNot Nothing Then
                pbMPAA.Image = tmpRatingImg
                InfoScreen_Move_MPAAIcon()
            End If
            If pbMPAA.Image IsNot Nothing Then pnlMPAA.Visible = True
        End If

        'Genres
        If currTV.TVShowDetails.GenresSpecified Then
            InfoScreen_GenreIcons_Load(currTV.TVShowDetails.Genres)
            For i As Integer = 0 To pnlGenre.Count - 1
                pnlGenre(i).Visible = True
            Next
        End If

        'Studios
        If currTV.TVShowDetails.StudiosSpecified Then
            pbStudio.Image = APIXML.GetStudioImage(currTV.TVShowDetails.Studios.Item(0).ToLower) 'ByDef all image files are lower case
            pbStudio.Tag = currTV.TVShowDetails.Studios.Item(0)
        Else
            pbStudio.Image = APIXML.GetStudioImage("####")
            pbStudio.Tag = String.Empty
        End If
        If Master.eAdvancedSettings.GetBooleanSetting("StudioTagAlwaysOn", False) Then
            lblStudio.Text = pbStudio.Tag.ToString
        End If

        'Metadata Flags
        If Master.eSettings.TVScraperMetaDataScan AndAlso currTV.FilenameSpecified Then
            InfoScreen_SetAVImages(APIXML.GetAVImages(
                                   currTV.MainDetails.FileInfo,
                                   currTV.Filename,
                                   currTV.ContentType,
                                   currTV.MainDetails.VideoSource
                                   ))
            pnlInfoIcons.Width = pbVideoChannels.Width + pbVideoSource.Width + pbVideoCodec.Width + pbVideoResolution.Width + pbAudioCodec.Width + pbAudioChannels.Width + pbStudio.Width + 6
            pbStudio.Left = pbVideoChannels.Width + pbVideoSource.Width + pbVideoCodec.Width + pbVideoResolution.Width + pbAudioCodec.Width + pbAudioChannels.Width + 5
        Else
            pnlInfoIcons.Width = pbStudio.Width + 1
            pbStudio.Left = 0
        End If

        InfoCleared = False

        ResumeLayout()
    End Sub

    Private Sub InfoScreen_Show_Data_TVSeason()
        SuspendLayout()

        lblCertifications.Text = String.Join(" / ", currTV.TVShowDetails.Certifications.ToArray)
        lblIMDBHeader.Tag = StringUtils.GetURL_IMDb(currTV)
        lblPremiered.Text = currTV.MainDetails.Aired
        lblPremieredHeader.Text = Master.eLang.GetString(728, "Aired")
        lblTMDBHeader.Tag = StringUtils.GetURL_TMDb(currTV)
        lblTVDBHeader.Tag = StringUtils.GetURL_TVDb(currTV)
        lblTitle.Text = currTV.MainDetails.Title
        txtIMDBID.Text = If(Not String.IsNullOrEmpty(lblIMDBHeader.Tag.ToString), "Link", String.Empty)
        txtPlot.Text = currTV.MainDetails.Plot
        txtTMDBID.Text = If(Not String.IsNullOrEmpty(lblTMDBHeader.Tag.ToString), "Link", String.Empty)
        txtTVDBID.Text = If(currTV.MainDetails.UniqueIDs.TVDbIdSpecified, currTV.MainDetails.UniqueIDs.TVDbId.ToString, String.Empty)

        'TV Show Original Title
        If currTV.TVShowDetails.OriginalTitleSpecified AndAlso Not currTV.TVShowDetails.OriginalTitle = currTV.TVShowDetails.Title Then
            lblOriginalTitle.Text = String.Format(String.Concat(Master.eLang.GetString(302, "Original Title"), ": {0}"), currTV.TVShowDetails.OriginalTitle)
        Else
            lblOriginalTitle.Text = String.Empty
        End If

        'Ratings & UserRating
        If currTV.TVShowDetails.RatingsSpecified OrElse currTV.TVShowDetails.UserRatingSpecified Then
            InfoScreen_Show_Ratings(currTV.TVShowDetails.Ratings.Items, currTV.TVShowDetails.UserRating)
        End If

        'Runtime
        If currTV.TVShowDetails.RuntimeSpecified Then
            lblRuntime.Text = String.Format(Master.eLang.GetString(112, "Runtime: {0}"), If(currTV.TVShowDetails.Runtime.Contains("|"), currTV.TVShowDetails.Runtime.Substring(0, currTV.TVShowDetails.Runtime.IndexOf("|")), currTV.TVShowDetails.Runtime)).Trim
        End If

        'Actors
        alActors = New List(Of String)
        If currTV.TVShowDetails.ActorsSpecified Then
            pbActors.Image = My.Resources.actor_silhouette
            For Each imdbAct As RoleLink In currTV.TVShowDetails.Actors
                Dim thumb = Master.Thumbs(imdbAct.PersonId)
                If Not String.IsNullOrEmpty(thumb.LocalFilePath) AndAlso File.Exists(thumb.LocalFilePath) Then
                    If Not imdbAct.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not imdbAct.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alActors.Add(thumb.LocalFilePath)
                    Else
                        alActors.Add("none")
                    End If
                ElseIf Not String.IsNullOrEmpty(imdbAct.URLOriginal) Then
                    If Not imdbAct.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not imdbAct.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alActors.Add(imdbAct.URLOriginal)
                    Else
                        alActors.Add("none")
                    End If
                Else
                    alActors.Add("none")
                End If

                If String.IsNullOrEmpty(imdbAct.Role.Trim) Then
                    lstActors.Items.Add(imdbAct.Person.Name.Trim)
                Else
                    lstActors.Items.Add(String.Format(Master.eLang.GetString(131, "{0} as {1}"), imdbAct.Person.Name.Trim, imdbAct.Role.Trim))
                End If
            Next
            lstActors.SelectedIndex = 0
        End If

        'MPAA
        If currTV.TVShowDetails.MPAASpecified Then
            Dim tmpRatingImg As Image = APIXML.GetTVRatingImage(currTV.TVShowDetails.MPAA)
            If tmpRatingImg IsNot Nothing Then
                pbMPAA.Image = tmpRatingImg
                InfoScreen_Move_MPAAIcon()
            End If
            If pbMPAA.Image IsNot Nothing Then pnlMPAA.Visible = True
        End If

        'Genres
        If currTV.TVShowDetails.Genres.Count > 0 Then
            InfoScreen_GenreIcons_Load(currTV.TVShowDetails.Genres)
            For i As Integer = 0 To pnlGenre.Count - 1
                pnlGenre(i).Visible = True
            Next
        End If

        'Studios
        If currTV.TVShowDetails.StudiosSpecified Then
            pbStudio.Image = APIXML.GetStudioImage(currTV.TVShowDetails.Studios.Item(0).ToLower) 'ByDef all image files are lower case
            pbStudio.Tag = currTV.TVShowDetails.Studios.Item(0)
        Else
            pbStudio.Image = APIXML.GetStudioImage("####")
            pbStudio.Tag = String.Empty
        End If
        pnlInfoIcons.Width = pbStudio.Width + 1
        pbStudio.Left = 0

        InfoCleared = False

        ResumeLayout()
    End Sub

    Private Sub InfoScreen_Show_Data_TVShow()
        SuspendLayout()

        'Title
        If currTV.MainDetails.TitleSpecified Then
            lblTitle.Text = currTV.MainDetails.Title
        End If

        'OriginalTitle
        If currTV.MainDetails.OriginalTitleSpecified AndAlso Not currTV.MainDetails.OriginalTitle = currTV.MainDetails.Title Then
            lblOriginalTitle.Text = String.Format(String.Concat(Master.eLang.GetString(302, "Original Title"), ": {0}"), currTV.MainDetails.OriginalTitle)
        Else
            lblOriginalTitle.Text = String.Empty
        End If

        lblCertifications.Text = String.Join(" / ", currTV.MainDetails.Certifications.ToArray)
        lblCountries.Text = String.Join(" / ", currTV.MainDetails.Countries.ToArray)
        lblDirectors.Text = String.Join(" / ", currTV.MainDetails.Creators.ToArray)
        lblDirectorsHeader.Text = Master.eLang.GetString(744, "Creators")
        lblIMDBHeader.Tag = StringUtils.GetURL_IMDb(currTV)
        lblPremiered.Text = currTV.MainDetails.Premiered
        lblPremieredHeader.Text = Master.eLang.GetString(724, "Premiered")
        lblStatus.Text = currTV.MainDetails.Status
        lblTagline.Text = currTV.MainDetails.Tagline
        lblTags.Text = String.Join(" / ", currTV.MainDetails.Tags.ToArray)
        lblTMDBHeader.Tag = StringUtils.GetURL_TMDb(currTV)
        lblTVDBHeader.Tag = StringUtils.GetURL_TVDb(currTV)
        txtIMDBID.Text = currTV.MainDetails.UniqueIDs.IMDbId
        txtPlot.Text = currTV.MainDetails.Plot
        txtTMDBID.Text = currTV.MainDetails.UniqueIDs.TMDbId.ToString
        txtTVDBID.Text = currTV.MainDetails.UniqueIDs.TVDbId.ToString

        'Ratings & UserRating
        If currTV.MainDetails.RatingsSpecified OrElse currTV.MainDetails.UserRatingSpecified Then
            InfoScreen_Show_Ratings(currTV.MainDetails.Ratings.Items, currTV.MainDetails.UserRating)
        End If

        'Runtime
        If currTV.MainDetails.RuntimeSpecified Then
            lblRuntime.Text = String.Format(Master.eLang.GetString(112, "Runtime: {0}"), If(currTV.MainDetails.Runtime.Contains("|"), currTV.MainDetails.Runtime.Substring(0, currTV.MainDetails.Runtime.IndexOf("|")), currTV.MainDetails.Runtime)).Trim
        End If

        'Actors
        alActors = New List(Of String)
        If currTV.MainDetails.ActorsSpecified Then
            pbActors.Image = My.Resources.actor_silhouette
            For Each imdbAct As RoleLink In currTV.MainDetails.Actors
                Dim thumb = Master.Thumbs(imdbAct.PersonId)
                If Not String.IsNullOrEmpty(thumb.LocalFilePath) AndAlso File.Exists(thumb.LocalFilePath) Then
                    If Not imdbAct.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not imdbAct.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alActors.Add(thumb.LocalFilePath)
                    Else
                        alActors.Add("none")
                    End If
                ElseIf Not String.IsNullOrEmpty(imdbAct.URLOriginal) Then
                    If Not imdbAct.URLOriginal.ToLower.IndexOf("addtiny.gif") > 0 AndAlso Not imdbAct.URLOriginal.ToLower.IndexOf("no_photo") > 0 Then
                        alActors.Add(imdbAct.URLOriginal)
                    Else
                        alActors.Add("none")
                    End If
                Else
                    alActors.Add("none")
                End If

                If String.IsNullOrEmpty(imdbAct.Role.Trim) Then
                    lstActors.Items.Add(imdbAct.Person.Name.Trim)
                Else
                    lstActors.Items.Add(String.Format(Master.eLang.GetString(131, "{0} as {1}"), imdbAct.Person.Name.Trim, imdbAct.Role.Trim))
                End If
            Next
            lstActors.SelectedIndex = 0
        End If

        'MPAA
        If currTV.MainDetails.MPAASpecified Then
            Dim tmpRatingImg As Image = APIXML.GetTVRatingImage(currTV.MainDetails.MPAA)
            If tmpRatingImg IsNot Nothing Then
                pbMPAA.Image = tmpRatingImg
                InfoScreen_Move_MPAAIcon()
            End If
            If pbMPAA.Image IsNot Nothing Then pnlMPAA.Visible = True
        End If

        'Genres
        If currTV.MainDetails.Genres.Count > 0 Then
            InfoScreen_GenreIcons_Load(currTV.MainDetails.Genres)
            For i As Integer = 0 To pnlGenre.Count - 1
                pnlGenre(i).Visible = True
            Next
        End If

        'Studios
        If currTV.MainDetails.StudiosSpecified Then
            pbStudio.Image = APIXML.GetStudioImage(currTV.MainDetails.Studios.Item(0).ToLower) 'ByDef all image files are lower case
            pbStudio.Tag = currTV.MainDetails.Studios.Item(0)
        Else
            pbStudio.Image = APIXML.GetStudioImage("####")
            pbStudio.Tag = String.Empty
        End If

        pnlInfoIcons.Width = pbStudio.Width + 1
        pbStudio.Left = 0

        InfoCleared = False

        If bDoingSearch_TVShows Then
            txtSearchShows.Focus()
            bDoingSearch_TVShows = False
        Else
            dgvTVShows.Focus()
        End If

        ResumeLayout()
    End Sub

    Private Sub InfoScreen_Show_Images()
        'Poster
        If MainPoster.Image IsNot Nothing OrElse MainPoster.LoadFromMemoryStream Then
            lblPosterSize.Text = String.Format("{0} x {1}", MainPoster.Image.Width, MainPoster.Image.Height)
            pbPosterCache.Image = MainPoster.Image
            ImageUtils.ResizePB(pbPoster, pbPosterCache, PosterMaxHeight, PosterMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbPoster)

            If Master.eSettings.GeneralShowImgDims Then
                lblPosterSize.Visible = True
            Else
                lblPosterSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblPosterTitle.Visible = True
            Else
                lblPosterTitle.Visible = False
            End If
        Else
            If pbPoster.Image IsNot Nothing Then
                pbPoster.Image.Dispose()
                pbPoster.Image = Nothing
            End If
        End If

        'Keyart
        If MainKeyart.Image IsNot Nothing OrElse MainKeyart.LoadFromMemoryStream Then
            lblKeyartSize.Text = String.Format("{0} x {1}", MainKeyart.Image.Width, MainKeyart.Image.Height)
            pbKeyartCache.Image = MainKeyart.Image
            ImageUtils.ResizePB(pbKeyart, pbKeyartCache, KeyartMaxHeight, KeyartMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbKeyart)

            If Master.eSettings.GeneralShowImgDims Then
                lblKeyartSize.Visible = True
            Else
                lblKeyartSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblKeyartTitle.Visible = True
            Else
                lblKeyartTitle.Visible = False
            End If
        Else
            If pbKeyart.Image IsNot Nothing Then
                pbKeyart.Image.Dispose()
                pbKeyart.Image = Nothing
            End If
        End If

        'Fanart
        If MainFanart.Image IsNot Nothing OrElse MainFanart.LoadFromMemoryStream Then
            lblFanartSmallSize.Text = String.Format("{0} x {1}", MainFanart.Image.Width, MainFanart.Image.Height)
            pbFanartSmallCache.Image = MainFanart.Image
            ImageUtils.ResizePB(pbFanartSmall, pbFanartSmallCache, FanartSmallMaxHeight, FanartSmallMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbFanartSmall)

            If Master.eSettings.GeneralShowImgDims Then
                lblFanartSmallSize.Visible = True
            Else
                lblFanartSmallSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblFanartSmallTitle.Visible = True
            Else
                lblFanartSmallTitle.Visible = False
            End If
        Else
            If pbFanartSmall.Image IsNot Nothing Then
                pbFanartSmall.Image.Dispose()
                pbFanartSmall.Image = Nothing
            End If
        End If

        'Landscape
        If MainLandscape.Image IsNot Nothing OrElse MainLandscape.LoadFromMemoryStream Then
            lblLandscapeSize.Text = String.Format("{0} x {1}", MainLandscape.Image.Width, MainLandscape.Image.Height)
            pbLandscapeCache.Image = MainLandscape.Image
            ImageUtils.ResizePB(pbLandscape, pbLandscapeCache, LandscapeMaxHeight, LandscapeMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbLandscape)

            If Master.eSettings.GeneralShowImgDims Then
                lblLandscapeSize.Visible = True
            Else
                lblLandscapeSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblLandscapeTitle.Visible = True
            Else
                lblLandscapeTitle.Visible = False
            End If
        Else
            If pbLandscape.Image IsNot Nothing Then
                pbLandscape.Image.Dispose()
                pbLandscape.Image = Nothing
            End If
        End If

        'ClearArt
        If MainClearArt.Image IsNot Nothing OrElse MainClearArt.LoadFromMemoryStream Then
            lblClearArtSize.Text = String.Format("{0} x {1}", MainClearArt.Image.Width, MainClearArt.Image.Height)
            pbClearArtCache.Image = MainClearArt.Image
            ImageUtils.ResizePB(pbClearArt, pbClearArtCache, ClearArtMaxHeight, ClearArtMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbClearArt)

            If Master.eSettings.GeneralShowImgDims Then
                lblClearArtSize.Visible = True
            Else
                lblClearArtSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblClearArtTitle.Visible = True
            Else
                lblClearArtTitle.Visible = False
            End If
        Else
            If pbClearArt.Image IsNot Nothing Then
                pbClearArt.Image.Dispose()
                pbClearArt.Image = Nothing
            End If
        End If

        'CharacterArt
        If MainCharacterArt.Image IsNot Nothing OrElse MainCharacterArt.LoadFromMemoryStream Then
            lblCharacterArtSize.Text = String.Format("{0} x {1}", MainCharacterArt.Image.Width, MainCharacterArt.Image.Height)
            pbCharacterArtCache.Image = MainCharacterArt.Image
            ImageUtils.ResizePB(pbCharacterArt, pbCharacterArtCache, CharacterArtMaxHeight, CharacterArtMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbCharacterArt)

            If Master.eSettings.GeneralShowImgDims Then
                lblCharacterArtSize.Visible = True
            Else
                lblCharacterArtSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblCharacterArtTitle.Visible = True
            Else
                lblCharacterArtTitle.Visible = False
            End If
        Else
            If pbCharacterArt.Image IsNot Nothing Then
                pbCharacterArt.Image.Dispose()
                pbCharacterArt.Image = Nothing
            End If
        End If

        'DiscArt
        If MainDiscArt.Image IsNot Nothing OrElse MainDiscArt.LoadFromMemoryStream Then
            lblDiscArtSize.Text = String.Format("{0} x {1}", MainDiscArt.Image.Width, MainDiscArt.Image.Height)
            pbDiscArtCache.Image = MainDiscArt.Image
            ImageUtils.ResizePB(pbDiscArt, pbDiscArtCache, DiscArtMaxHeight, DiscArtMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbDiscArt)

            If Master.eSettings.GeneralShowImgDims Then
                lblDiscArtSize.Visible = True
            Else
                lblDiscArtSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblDiscArtTitle.Visible = True
            Else
                lblDiscArtTitle.Visible = False
            End If
        Else
            If pbDiscArt.Image IsNot Nothing Then
                pbDiscArt.Image.Dispose()
                pbDiscArt.Image = Nothing
            End If
        End If

        'Banner
        If MainBanner.Image IsNot Nothing OrElse MainBanner.LoadFromMemoryStream Then
            lblBannerSize.Text = String.Format("{0} x {1}", MainBanner.Image.Width, MainBanner.Image.Height)
            pbBannerCache.Image = MainBanner.Image
            ImageUtils.ResizePB(pbBanner, pbBannerCache, BannerMaxHeight, BannerMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbBanner)

            If Master.eSettings.GeneralShowImgDims Then
                lblBannerSize.Visible = True
            Else
                lblBannerSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblBannerTitle.Visible = True
            Else
                lblBannerTitle.Visible = False
            End If
        Else
            If pbBanner.Image IsNot Nothing Then
                pbBanner.Image.Dispose()
                pbBanner.Image = Nothing
            End If
        End If

        'ClearLogo
        If MainClearLogo.Image IsNot Nothing OrElse MainClearLogo.LoadFromMemoryStream Then
            lblClearLogoSize.Text = String.Format("{0} x {1}", MainClearLogo.Image.Width, MainClearLogo.Image.Height)
            pbClearLogoCache.Image = MainClearLogo.Image
            ImageUtils.ResizePB(pbClearLogo, pbClearLogoCache, ClearLogoMaxHeight, ClearLogoMaxWidth)
            If Master.eSettings.GeneralImagesGlassOverlay Then ImageUtils.SetGlassOverlay(pbClearLogo)

            If Master.eSettings.GeneralShowImgDims Then
                lblClearLogoSize.Visible = True
            Else
                lblClearLogoSize.Visible = False
            End If

            If Master.eSettings.GeneralShowImgNames Then
                lblClearLogoTitle.Visible = True
            Else
                lblClearLogoTitle.Visible = False
            End If
        Else
            If pbClearLogo.Image IsNot Nothing Then
                pbClearLogo.Image.Dispose()
                pbClearLogo.Image = Nothing
            End If
        End If

        'Background
        If MainBackground.Image IsNot Nothing OrElse MainBackground.LoadFromMemoryStream Then
            pbBackgroundCache.Image = MainBackground.Image
            ImageUtils.ResizePB(pbBackground, pbBackgroundCache, scMain.Panel2.Height - (pnlTop.Top + pnlTop.Height), scMain.Panel2.Width, True)
            pbBackground.Left = Convert.ToInt32((scMain.Panel2.Width - pbBackground.Width) / 2)
            pbBackground.Top = pnlTop.Top + pnlTop.Height
        Else
            If pbBackgroundCache.Image IsNot Nothing Then
                pbBackgroundCache.Image.Dispose()
                pbBackgroundCache.Image = Nothing
            End If
            If pbBackground.Image IsNot Nothing Then
                pbBackground.Image.Dispose()
                pbBackground.Image = Nothing
            End If
        End If
        If pbBanner.Image IsNot Nothing Then pnlBanner.Visible = True
        If pbCharacterArt.Image IsNot Nothing Then pnlCharacterArt.Visible = True
        If pbClearArt.Image IsNot Nothing Then pnlClearArt.Visible = True
        If pbClearLogo.Image IsNot Nothing Then pnlClearLogo.Visible = True
        If pbDiscArt.Image IsNot Nothing Then pnlDiscArt.Visible = True
        If pbFanartSmall.Image IsNot Nothing Then pnlFanartSmall.Visible = True
        If pbKeyart.Image IsNot Nothing Then pnlKeyart.Visible = True
        If pbLandscape.Image IsNot Nothing Then pnlLandscape.Visible = True
        If pbPoster.Image IsNot Nothing Then pnlPoster.Visible = True
    End Sub
    ''' <summary>
    ''' Updates the label indicating there is no information for the current item.
    ''' </summary>
    ''' <param name="doShow"><c>Boolean</c> indicating whether the panel should be shown or not</param>
    ''' <param name="contentType"></param>
    ''' <remarks></remarks>
    Private Sub InfoScreen_Show_NoInformation(ByVal doShow As Boolean, Optional ByVal contentType As Enums.ContentType = Enums.ContentType.Movie)
        If doShow Then
            Select Case contentType
                Case Enums.ContentType.Movie
                    lblNoInfo.Text = Master.eLang.GetString(55, "No information is available for this Movie")
                    If Not currThemeType = contentType Then Theme_Apply(contentType)
                Case Enums.ContentType.Movieset
                    lblNoInfo.Text = Master.eLang.GetString(1154, "No information is available for this MovieSet")
                    If Not currThemeType = contentType Then Theme_Apply(contentType)
                Case Enums.ContentType.TVEpisode
                    lblNoInfo.Text = Master.eLang.GetString(652, "No information is available for this Episode")
                    If Not currThemeType = contentType Then Theme_Apply(contentType)
                Case Enums.ContentType.TVSeason
                    lblNoInfo.Text = Master.eLang.GetString(1161, "No information is available for this Season")
                    If Not currThemeType = contentType Then Theme_Apply(contentType)
                Case Enums.ContentType.TVShow
                    lblNoInfo.Text = Master.eLang.GetString(651, "No information is available for this Show")
                    If Not currThemeType = contentType Then Theme_Apply(contentType)
            End Select
        End If

        pnlNoInfo.Visible = doShow
    End Sub

    Private Sub InfoScreen_Show_Ratings(ByVal ratings As List(Of MediaContainers.RatingDetails), ByVal userRating As Integer, Optional ByVal top250 As Integer = 0)
        For iControl = pnlTopPanelRating.Controls.Count - 1 To 0 Step -1
            pnlTopPanelRating.Controls.RemoveAt(iControl)
        Next
        tblTopPanelRating = New TableLayoutPanel With {
            .AutoSize = True,
            .AutoSizeMode = AutoSizeMode.GrowAndShrink,
            .ColumnCount = 1,
            .Dock = DockStyle.Fill,
            .RowCount = 3
            }
        'first column is empty and set to 100% as a spacer
        tblTopPanelRating.ColumnStyles.Add(New ColumnStyle With {.SizeType = SizeType.Percent, .Width = 100})
        'first row is empty and set to 20 as a spacer
        tblTopPanelRating.RowStyles.Add(New RowStyle With {.Height = 20, .SizeType = SizeType.Absolute})
        'second row contains the images an is 40 px
        tblTopPanelRating.RowStyles.Add(New RowStyle With {.Height = 40, .SizeType = SizeType.Absolute})
        'third row  contains the rating value label an is 20 px
        tblTopPanelRating.RowStyles.Add(New RowStyle With {.Height = 20, .SizeType = SizeType.Absolute})

        'set the default column style for new columns
        Dim nColumnStyle = New ColumnStyle With {.SizeType = SizeType.AutoSize, .Width = 80}

        'add all ratings
        Dim i As Integer = 1
        For Each rating In ratings
            tblTopPanelRating.ColumnCount += 1
            tblTopPanelRating.ColumnStyles.Add(New ColumnStyle(nColumnStyle.SizeType, nColumnStyle.Width))
            tblTopPanelRating.Controls.Add(New PictureBox With {
                                       .Dock = DockStyle.Fill,
                                       .Margin = New Padding With {.All = 0},
                                       .SizeMode = PictureBoxSizeMode.CenterImage,
                                       .Size = New Size With {.Height = 40, .Width = 80},
                                       .Image = APIXML.GetRatingFlag(rating.Type)
                                       }, i, 1)
            tblTopPanelRating.Controls.Add(New Label With {
                                       .Dock = DockStyle.Fill,
                                       .Font = TopPanelColors.Rating.Font,
                                       .ForeColor = TopPanelColors.Rating.ForeColor,
                                       .Text = If(rating.Max = 100, String.Concat(rating.Value.ToString, "%"), String.Concat(rating.Value.ToString, " / ", rating.Max.ToString)),
                                       .TextAlign = ContentAlignment.TopCenter
                                       }, i, 2)
            i += 1
        Next
        'add UserRating if specified
        If userRating > 0 Then
            tblTopPanelRating.ColumnCount += 1
            tblTopPanelRating.ColumnStyles.Add(New ColumnStyle(nColumnStyle.SizeType, nColumnStyle.Width))
            tblTopPanelRating.Controls.Add(New PictureBox With {
                                       .Dock = DockStyle.Fill,
                                       .Margin = New Padding With {.All = 0},
                                       .SizeMode = PictureBoxSizeMode.CenterImage,
                                       .Size = New Size With {.Height = 40, .Width = 80},
                                       .Image = APIXML.GetRatingFlag("userrating")
                                       }, i, 1)
            tblTopPanelRating.Controls.Add(New Label With {
                                       .Dock = DockStyle.Fill,
                                       .Font = TopPanelColors.Rating.Font,
                                       .ForeColor = TopPanelColors.Rating.ForeColor,
                                       .Text = userRating.ToString,
                                       .TextAlign = ContentAlignment.TopCenter
                                       }, i, 2)
            i += 1
        End If
        'add IMDb Top 250 if specified
        If top250 > 0 Then
            tblTopPanelRating.ColumnCount += 1
            tblTopPanelRating.ColumnStyles.Add(New ColumnStyle(nColumnStyle.SizeType, nColumnStyle.Width))
            tblTopPanelRating.Controls.Add(New PictureBox With {
                                       .Dock = DockStyle.Fill,
                                       .Margin = New Padding With {.All = 0},
                                       .SizeMode = PictureBoxSizeMode.CenterImage,
                                       .Size = New Size With {.Height = 40, .Width = 80},
                                       .Image = APIXML.GetRatingFlag("imdb_top250")
                                       }, i, 1)
            tblTopPanelRating.Controls.Add(New Label With {
                                       .Dock = DockStyle.Fill,
                                       .Font = TopPanelColors.Rating.Font,
                                       .ForeColor = TopPanelColors.Rating.ForeColor,
                                       .Text = top250.ToString,
                                       .TextAlign = ContentAlignment.TopCenter
                                       }, i, 2)
            i += 1
        End If
        pnlTopPanelRating.Controls.Add(tblTopPanelRating)
    End Sub

    Private Function MainTab_GetCurrentTag() As Settings.MainTabSorting
        If tcMain.SelectedTab IsNot Nothing AndAlso TryCast(tcMain.SelectedTab.Tag, Settings.MainTabSorting) IsNot Nothing Then
            Return DirectCast(tcMain.SelectedTab.Tag, Settings.MainTabSorting)
        Else
            Return New Settings.MainTabSorting
        End If
    End Function

    Private Sub MainTab_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tcMain.SelectedIndexChanged
        InfoScreen_Clear()
        InfoScreen_Show_NoInformation(False)
        Dim currMainTabTag = MainTab_GetCurrentTag()
        Addons.Instance.RuntimeObjects.MediaTabSelected = currMainTabTag
        Select Case currMainTabTag.ContentType
            Case Enums.ContentType.Movie
                'fixing TV-Splitter issues
                RemoveHandler scTV.SplitterMoved, AddressOf MediaList_SplitContianer_TV_SplitterMoved
                RemoveHandler scTVSeasonsEpisodes.SplitterMoved, AddressOf MediaList_SplitContianer_TV_SplitterMoved

                currList_Movies = currMainTabTag.DefaultList
                cbFilterLists_Movies.SelectedValue = currList_Movies
                Addons.Instance.RuntimeObjects.ListMovies = currList_Movies
                DataGridView_FillList_Main(True, False, False)
                mnuMainTools.Enabled = True
                cmnuTrayTools.Enabled = True
                mnuScrapeMovies.Visible = True
                mnuScrapeMovieSets.Visible = False
                mnuScrapeTVShows.Visible = False
                pnlFilter_Movies.Visible = True
                pnlFilter_MovieSets.Visible = False
                pnlFilter_Shows.Visible = False
                pnlFilterMissingItems_MovieSets.Visible = False
                pnlFilterMissingItems_Shows.Visible = False
                pnlListTop.Height = 56
                pnlSearchMovies.Visible = True
                pnlSearchMovieSets.Visible = False
                pnlSearchTVShows.Visible = False
                dgvMovieSets.Visible = False
                dgvMovies.Visible = True
                Theme_Apply(currMainTabTag.ContentType)
                If bwLoadImages_TVEpisode.IsBusy Then bwLoadImages_TVEpisode.CancelAsync()
                If bwLoadImages_TVSeason.IsBusy Then bwLoadImages_TVSeason.CancelAsync()
                If bwLoadImages_TVShow.IsBusy Then bwLoadImages_TVShow.CancelAsync()
                If bwLoadImages_Movieset.IsBusy Then bwLoadImages_Movieset.CancelAsync()
                If bwLoadImages_MoviesetMoviePosters.IsBusy Then bwLoadImages_MoviesetMoviePosters.CancelAsync()
                If bwDownloadPic.IsBusy Then bwDownloadPic.CancelAsync()
                If dgvMovies.RowCount > 0 Then
                    prevRow_Movie = -1

                    dgvMovies.CurrentCell = Nothing
                    dgvMovies.ClearSelection()
                    dgvMovies.Rows(0).Selected = True
                    dgvMovies.CurrentCell = dgvMovies.Rows(0).Cells("ListTitle")

                    dgvMovies.Focus()
                Else
                    SetControlsEnabled(True)
                End If

            Case Enums.ContentType.Movieset
                'fixing TV-Splitter issues
                RemoveHandler scTV.SplitterMoved, AddressOf MediaList_SplitContianer_TV_SplitterMoved
                RemoveHandler scTVSeasonsEpisodes.SplitterMoved, AddressOf MediaList_SplitContianer_TV_SplitterMoved

                currList_Moviesets = currMainTabTag.DefaultList
                cbFilterLists_MovieSets.SelectedValue = currList_Moviesets
                Addons.Instance.RuntimeObjects.ListMoviesets = currList_Moviesets
                DataGridView_FillList_Main(False, True, False)
                mnuMainTools.Enabled = True
                cmnuTrayTools.Enabled = True
                mnuScrapeMovies.Visible = False
                mnuScrapeMovieSets.Visible = True
                mnuScrapeTVShows.Visible = False
                pnlFilter_Movies.Visible = False
                pnlFilter_MovieSets.Visible = True
                pnlFilter_Shows.Visible = False
                pnlFilterMissingItems_Movies.Visible = False
                pnlFilterMissingItems_Shows.Visible = False
                pnlListTop.Height = 56
                pnlSearchMovies.Visible = False
                pnlSearchMovieSets.Visible = True
                pnlSearchTVShows.Visible = False
                dgvMovies.Visible = False
                dgvMovieSets.Visible = True
                Theme_Apply(currMainTabTag.ContentType)
                If bwLoadImages_Movie.IsBusy Then bwLoadImages_Movie.CancelAsync()
                If bwDownloadPic.IsBusy Then bwDownloadPic.CancelAsync()
                If bwLoadImages_TVEpisode.IsBusy Then bwLoadImages_TVEpisode.CancelAsync()
                If bwLoadImages_TVSeason.IsBusy Then bwLoadImages_TVSeason.CancelAsync()
                If bwLoadImages_TVShow.IsBusy Then bwLoadImages_TVShow.CancelAsync()
                If dgvMovieSets.RowCount > 0 Then
                    prevRow_MovieSet = -1

                    dgvMovieSets.CurrentCell = Nothing
                    dgvMovieSets.ClearSelection()
                    dgvMovieSets.Rows(0).Selected = True
                    dgvMovieSets.CurrentCell = dgvMovieSets.Rows(0).Cells("ListTitle")

                    dgvMovieSets.Focus()
                Else
                    SetControlsEnabled(True)
                End If

            Case Enums.ContentType.TV
                currList_TVShows = currMainTabTag.DefaultList
                cbFilterLists_Shows.SelectedValue = currList_TVShows
                Addons.Instance.RuntimeObjects.ListTVShows = currList_TVShows
                DataGridView_FillList_Main(False, False, True)
                mnuMainTools.Enabled = True
                cmnuTrayTools.Enabled = True
                mnuScrapeMovies.Visible = False
                mnuScrapeMovieSets.Visible = False
                mnuScrapeTVShows.Visible = True
                dgvMovies.Visible = False
                dgvMovieSets.Visible = False
                pnlFilter_Movies.Visible = False
                pnlFilter_MovieSets.Visible = False
                pnlFilter_Shows.Visible = True
                pnlFilterMissingItems_Movies.Visible = False
                pnlFilterMissingItems_MovieSets.Visible = False
                pnlListTop.Height = 56
                pnlSearchMovies.Visible = False
                pnlSearchMovieSets.Visible = False
                pnlSearchTVShows.Visible = True

                'fixing TV-Splitter issues
                Try
                    scTV.SplitterDistance = Master.eSettings.GeneralSplitterDistanceTVShow
                    scTVSeasonsEpisodes.SplitterDistance = Master.eSettings.GeneralSplitterDistanceTVSeason
                Catch ex As Exception
                    logger.Error(ex, New StackFrame().GetMethod().Name)
                End Try
                AddHandler scTV.SplitterMoved, AddressOf MediaList_SplitContianer_TV_SplitterMoved
                AddHandler scTVSeasonsEpisodes.SplitterMoved, AddressOf MediaList_SplitContianer_TV_SplitterMoved

                Theme_Apply(Enums.ContentType.TVShow)
                If bwLoadImages_Movie.IsBusy Then bwLoadImages_Movie.CancelAsync()
                If bwLoadImages_Movieset.IsBusy Then bwLoadImages_Movieset.CancelAsync()
                If bwLoadImages_MoviesetMoviePosters.IsBusy Then bwLoadImages_MoviesetMoviePosters.CancelAsync()
                If bwDownloadPic.IsBusy Then bwDownloadPic.CancelAsync()
                If dgvTVShows.RowCount > 0 Then
                    prevRow_TVShow = -1
                    currList = 0

                    dgvTVShows.CurrentCell = Nothing
                    dgvTVShows.ClearSelection()
                    dgvTVShows.Rows(0).Selected = True
                    dgvTVShows.CurrentCell = dgvTVShows.Rows(0).Cells("ListTitle")

                    dgvTVShows.Focus()
                Else
                    SetControlsEnabled(True)
                End If
        End Select
    End Sub
    ''' <summary>
    ''' Update the displayed movie counts
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub MainTab_SetCount_Movie()
        Dim currMainTabTag = MainTab_GetCurrentTag()
        If currMainTabTag.ContentType = Enums.ContentType.Movie Then
            If dgvMovies.RowCount > 0 Then
                tcMain.SelectedTab.Text = String.Format("{0} ({1})", currMainTabTag.Title, dgvMovies.RowCount)
            Else
                tcMain.SelectedTab.Text = currMainTabTag.Title
            End If
        End If
    End Sub
    ''' <summary>
    ''' Update the displayed movieset counts
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub MainTab_SetCount_Movieset()
        Dim currMainTabTag = MainTab_GetCurrentTag()
        If currMainTabTag.ContentType = Enums.ContentType.Movieset Then
            If dgvMovieSets.RowCount > 0 Then
                tcMain.SelectedTab.Text = String.Format("{0} ({1})", currMainTabTag.Title, dgvMovieSets.RowCount)
            Else
                tcMain.SelectedTab.Text = currMainTabTag.Title
            End If
        End If
    End Sub
    ''' <summary>
    ''' Update the displayed show/episode counts
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub MainTab_SetCount_TV()
        Dim currMainTabTag = MainTab_GetCurrentTag()
        If currMainTabTag.ContentType = Enums.ContentType.TV Then
            If dgvTVShows.RowCount > 0 Then
                Dim epCount As Integer = 0
                For i As Integer = 0 To dgvTVShows.Rows.Count - 1
                    epCount += CInt(dgvTVShows.Rows(i).Cells("Episodes").Value)
                Next
                tcMain.SelectedTab.Text = String.Format("{0} ({1}/{2})", currMainTabTag.Title, dgvTVShows.RowCount, epCount)
            Else
                tcMain.SelectedTab.Text = currMainTabTag.Title
            End If
        End If
    End Sub

    Private Sub MainTab_SetTabs()
        tcMain.Visible = False
        'cleanup tabs
        tcMain.TabPages.Clear()
        If Master.eSettings.GeneralMainTabSorting.Count = 0 Then
            Master.eSettings.SetDefaultsForLists(Enums.DefaultType.MainTabSorting, True)
        End If
        'add tabs
        For Each nTab In Master.eSettings.GeneralMainTabSorting.OrderBy(Function(f) f.Order)
            tcMain.TabPages.Add(New TabPage With {.Text = nTab.Title, .Tag = nTab})
        Next

        'workaround to force that the first tab will be selected after adding tabs to an empty TabControl
        RemoveHandler tcMain.SelectedIndexChanged, AddressOf MainTab_SelectedIndexChanged
        tcMain.SelectedIndex = -1
        AddHandler tcMain.SelectedIndexChanged, AddressOf MainTab_SelectedIndexChanged
        tcMain.SelectTab(0)
        MainTab_UpdateAllCounts()
        tcMain.Visible = True
    End Sub

    Private Sub MainTab_UpdateAllCounts()
        For Each mTabPage As TabPage In tcMain.TabPages
            If TryCast(mTabPage.Tag, Settings.MainTabSorting) IsNot Nothing Then
                Dim nTabTag = DirectCast(mTabPage.Tag, Settings.MainTabSorting)
                Dim mCount As Integer = Master.DB.View_GetMediaCount(nTabTag.DefaultList)
                Select Case nTabTag.ContentType
                    Case Enums.ContentType.Movie, Enums.ContentType.Movieset
                        If mCount = -1 Then
                            mTabPage.Text = String.Format("{0} ({1})", nTabTag.Title, "SQL Error")
                            mTabPage.Enabled = False
                        Else
                            mTabPage.Text = String.Format("{0} ({1})", nTabTag.Title, mCount)
                            mTabPage.Enabled = True
                        End If
                    Case Enums.ContentType.TV
                        If mCount = -1 Then
                            mTabPage.Text = String.Format("{0} ({1})", nTabTag.Title, "SQL Error")
                            mTabPage.Enabled = False
                        Else
                            Dim epCount As Integer = Master.DB.View_GetMediaCount(nTabTag.DefaultList, True)
                            mTabPage.Text = String.Format("{0} ({1}/{2})", nTabTag.Title, mCount, epCount)
                            mTabPage.Enabled = True
                        End If
                End Select
            End If
        Next
    End Sub

    Private Sub MediaList_SplitContianer_Main_SplitterMoved(ByVal sender As Object, ByVal e As SplitterEventArgs) Handles scMain.SplitterMoved
        Try
            If Created Then
                SuspendLayout()
                InfoScreen_Move_MPAAIcon()
                InfoScreen_Move_GenreIcons()

                ImageUtils.ResizePB(pbBackground, pbBackgroundCache, scMain.Panel2.Height - 90, scMain.Panel2.Width, True)
                pbBackground.Left = Convert.ToInt32((scMain.Panel2.Width - pbBackground.Width) / 2)
                pnlNoInfo.Location = New Point(Convert.ToInt32((scMain.Panel2.Width - pnlNoInfo.Width) / 2), Convert.ToInt32((scMain.Panel2.Height - pnlNoInfo.Height) / 2))
                pnlCancel.Location = New Point(Convert.ToInt32((scMain.Panel2.Width - pnlNoInfo.Width) / 2), 124)
                pnlFilterCountries_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterCountry_Movies.Left + 1,
                                                                  (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterCountry_Movies.Top) - pnlFilterCountries_Movies.Height)
                pnlFilterGenres_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterGenre_Movies.Left + 1,
                                                               (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterGenre_Movies.Top) - pnlFilterGenres_Movies.Height)
                pnlFilterGenres_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterSpecific_Shows.Left + tblFilterSpecific_Shows.Left + tblFilterSpecificData_Shows.Left + txtFilterGenre_Shows.Left + 1,
                                                              (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterSpecific_Shows.Top + tblFilterSpecific_Shows.Top + tblFilterSpecificData_Shows.Top + txtFilterGenre_Shows.Top) - pnlFilterGenres_Shows.Height)
                pnlFilterDataFields_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + gbFilterDataField_Movies.Left + tblFilterDataField_Movies.Left + txtFilterDataField_Movies.Left + 1,
                                                                   (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + gbFilterDataField_Movies.Top + tblFilterDataField_Movies.Top + txtFilterDataField_Movies.Top) - pnlFilterDataFields_Movies.Height)
                pnlFilterMissingItems_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterGeneral_Movies.Left + tblFilterGeneral_Movies.Left + btnFilterMissing_Movies.Left + 1,
                                                                     (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterGeneral_Movies.Top + tblFilterGeneral_Movies.Top + btnFilterMissing_Movies.Top) - pnlFilterMissingItems_Movies.Height)
                pnlFilterMissingItems_MovieSets.Location = New Point(pnlFilter_MovieSets.Left + tblFilter_MovieSets.Left + gbFilterGeneral_MovieSets.Left + tblFilterGeneral_MovieSets.Left + btnFilterMissing_MovieSets.Left + 1,
                                                                     (pnlFilter_MovieSets.Top + tblFilter_MovieSets.Top + gbFilterGeneral_MovieSets.Top + tblFilterGeneral_MovieSets.Top + btnFilterMissing_MovieSets.Top) - pnlFilterMissingItems_MovieSets.Height)
                pnlFilterMissingItems_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterGeneral_Shows.Left + tblFilterGeneral_Shows.Left + btnFilterMissing_Shows.Left + 1,
                                                                     (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterGeneral_Shows.Top + tblFilterGeneral_Shows.Top + btnFilterMissing_Shows.Top) - pnlFilterMissingItems_Shows.Height)
                pnlFilterSources_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterSource_Movies.Left + 1,
                                                                (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterSource_Movies.Top) - pnlFilterSources_Movies.Height)
                pnlFilterSources_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterSpecific_Shows.Left + tblFilterSpecific_Shows.Left + tblFilterSpecificData_Shows.Left + txtFilterSource_Shows.Left + 1,
                                                               (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterSpecific_Shows.Top + tblFilterSpecific_Shows.Top + tblFilterSpecificData_Shows.Top + txtFilterSource_Shows.Top) - pnlFilterSources_Shows.Height)
                pnlFilterTags_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterTag_Movies.Left + 1,
                                                               (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterTag_Movies.Top) - pnlFilterTags_Movies.Height)
                pnlFilterTags_Shows.Location = New Point(pnlFilter_Shows.Left + tblFilter_Shows.Left + gbFilterSpecific_Shows.Left + tblFilterSpecific_Shows.Left + tblFilterSpecificData_Shows.Left + txtFilterTag_Shows.Left + 1,
                                                              (pnlFilter_Shows.Top + tblFilter_Shows.Top + gbFilterSpecific_Shows.Top + tblFilterSpecific_Shows.Top + tblFilterSpecificData_Shows.Top + txtFilterTag_Shows.Top) - pnlFilterTags_Shows.Height)
                pnlFilterVideoSources_Movies.Location = New Point(pnlFilter_Movies.Left + tblFilter_Movies.Left + gbFilterSpecific_Movies.Left + tblFilterSpecific_Movies.Left + tblFilterSpecificData_Movies.Left + txtFilterVideoSource_Movies.Left + 1,
                                                                  (pnlFilter_Movies.Top + tblFilter_Movies.Top + gbFilterSpecific_Movies.Top + tblFilterSpecific_Movies.Top + tblFilterSpecificData_Movies.Top + txtFilterVideoSource_Movies.Top) - pnlFilterVideoSources_Movies.Height)

                Select Case tcMain.SelectedIndex
                    Case 0
                        dgvMovies.Focus()
                    Case 1
                        dgvMovieSets.Focus()
                    Case 2
                        dgvTVShows.Focus()
                End Select

                ResumeLayout(True)
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Private Sub MediaList_SplitContianer_TV_SplitterMoved(sender As Object, e As SplitterEventArgs)
        'fixing TV-Splitter issues
        Master.eSettings.GeneralSplitterDistanceTVShow = scTV.SplitterDistance
        Master.eSettings.GeneralSplitterDistanceTVSeason = scTVSeasonsEpisodes.SplitterDistance
    End Sub

    Private Sub ReloadContent_All_Movie()
        If dtMovies.Rows.Count > 0 Then
            Cursor = Cursors.WaitCursor
            SetControlsEnabled(False, True)
            tspbLoading.Style = ProgressBarStyle.Continuous
            Filter_Enable_Movie(False)
            Filter_Enable_Movieset(False)
            Filter_Enable_TVShow(False)

            tspbLoading.Maximum = dtMovies.Rows.Count + 1
            tspbLoading.Value = 0
            tslLoading.Text = String.Concat(Master.eLang.GetString(110, "Refreshing Media"), ":")
            tspbLoading.Visible = True
            tslLoading.Visible = True
            Application.DoEvents()
            bwReload_Movies.WorkerReportsProgress = True
            bwReload_Movies.WorkerSupportsCancellation = True
            bwReload_Movies.RunWorkerAsync()
        Else
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub ReloadContent_All_Movieset()
        If dtMovieSets.Rows.Count > 0 Then
            Cursor = Cursors.WaitCursor
            SetControlsEnabled(False, True)
            tspbLoading.Style = ProgressBarStyle.Continuous
            Filter_Enable_Movie(False)
            Filter_Enable_Movieset(False)
            Filter_Enable_TVShow(False)

            tspbLoading.Maximum = dtMovieSets.Rows.Count + 1
            tspbLoading.Value = 0
            tslLoading.Text = String.Concat(Master.eLang.GetString(110, "Refreshing Media"), ":")
            tspbLoading.Visible = True
            tslLoading.Visible = True
            Application.DoEvents()
            bwReload_MovieSets.WorkerReportsProgress = True
            bwReload_MovieSets.WorkerSupportsCancellation = True
            bwReload_MovieSets.RunWorkerAsync()
        Else
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub ReloadContent_All_TVShow(ByVal reloadFull As Boolean)
        If dtTVShows.Rows.Count > 0 Then
            Cursor = Cursors.WaitCursor
            SetControlsEnabled(False, True)
            tspbLoading.Style = ProgressBarStyle.Continuous
            Filter_Enable_Movie(False)
            Filter_Enable_Movieset(False)
            Filter_Enable_TVShow(False)

            tspbLoading.Maximum = dtTVShows.Rows.Count + 1
            tspbLoading.Value = 0
            tslLoading.Text = String.Concat(Master.eLang.GetString(110, "Refreshing Media"), ":")
            tspbLoading.Visible = True
            tslLoading.Visible = True
            Application.DoEvents()
            bwReload_TVShows.WorkerReportsProgress = True
            bwReload_TVShows.WorkerSupportsCancellation = True
            bwReload_TVShows.RunWorkerAsync(reloadFull)
        Else
            SetControlsEnabled(True)
        End If
    End Sub
    ''' <summary>
    ''' Reload movie from disc
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="batchMode"></param>
    ''' <param name="showMessage"></param>
    ''' <returns></returns>
    Private Function ReloadContent_Movie(ByVal id As Long, ByVal batchMode As Boolean, ByVal showMessage As Boolean) As Boolean
        Dim DBMovie As Database.DBElement = Master.DB.Load_Movie(id)

        If DBMovie.IsOnline OrElse FileUtils.Common.CheckOnlineStatus(DBMovie, Not showMessage) Then
            fScanner.Load_Movie(DBMovie, batchMode)
            If Not batchMode Then DataGridView_Row_Update_Movie(DBMovie.ID)
        Else
            If showMessage AndAlso MessageBox.Show(String.Concat(Master.eLang.GetString(587, "This file is no longer available"), ".", Environment.NewLine,
                                                         Master.eLang.GetString(703, "Whould you like to remove it from the library?")),
                                                     Master.eLang.GetString(654, "Remove movie from library"),
                                                     MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then
                Master.DB.Delete_Movie(id, batchMode)
                Return True
            Else
                Return False
            End If
        End If

        If Not batchMode Then
            DoTitleCheck()
        End If

        Return False
    End Function
    ''' <summary>
    ''' Reload movieset from disc
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="batchMode"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function ReloadContent_Movieset(ByVal id As Long, Optional ByVal batchMode As Boolean = False) As Boolean
        Dim DBMovieSet As Database.DBElement = Master.DB.Load_Movieset(id)

        fScanner.Load_MovieSet(DBMovieSet, batchMode)
        If Not batchMode Then DataGridView_Row_Update_Movieset(DBMovieSet.ID)

        Return False
    End Function
    ''' <summary>
    ''' Reload tv episode from disc
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="batchMode"></param>
    ''' <param name="showMessage"></param>
    ''' <returns></returns>
    Private Function ReloadContent_TVEpisode(ByVal id As Long, ByVal batchMode As Boolean, ByVal showMessage As Boolean) As Boolean
        Dim DBTVEpisode As Database.DBElement = Master.DB.Load_TVEpisode(id, True)
        Dim epCount As Integer = 0

        If DBTVEpisode.FilenameID = -1 Then Return False 'skipping missing episodes

        If DBTVEpisode.IsOnline OrElse FileUtils.Common.CheckOnlineStatus(DBTVEpisode, showMessage) Then
            fScanner.Load_TVEpisode(DBTVEpisode, False, batchMode, False)
            If Not batchMode Then DataGridView_Row_Update_TVEpisode(DBTVEpisode.ID)
        Else
            If showMessage AndAlso MessageBox.Show(String.Concat(Master.eLang.GetString(587, "This file is no longer available"), ".", Environment.NewLine,
                                                         Master.eLang.GetString(703, "Whould you like to remove it from the library?")),
                                                     Master.eLang.GetString(738, "Remove episode from library"),
                                                     MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then
                Master.DB.Delete_TVEpisode(DBTVEpisode.Filename, False, batchMode)
                Return True
            Else
                Return False
            End If
        End If

        Return False
    End Function
    ''' <summary>
    ''' Reload tv show from disc
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="batchMode"></param>
    ''' <param name="showMessage"></param>
    ''' <param name="reloadFull"></param>
    ''' <returns></returns>
    Private Function ReloadContent_TVSeason(ByVal id As Long, ByVal batchMode As Boolean, ByVal showMessage As Boolean, reloadFull As Boolean) As Boolean
        Dim DBTVSeason As Database.DBElement = Master.DB.Load_TVSeason(id, True, False)

        If DBTVSeason.IsOnline OrElse FileUtils.Common.CheckOnlineStatus(DBTVSeason, showMessage) Then
            fScanner.GetFolderContents_TVSeason(DBTVSeason)
            Master.DB.Save_TVSeason(DBTVSeason, batchMode, False, True)
            If Not batchMode Then DataGridView_Row_Update_TVSeason(DBTVSeason.ID)
        Else
            Return False
        End If

        Return False
    End Function
    ''' <summary>
    ''' Reload tv show from disc
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="batchMode"></param>
    ''' <param name="showMessage"></param>
    ''' <param name="reloadFull"></param>
    ''' <returns></returns>
    Private Function ReloadContent_TVShow(ByVal id As Long, ByVal batchMode As Boolean, ByVal showMessage As Boolean, ByVal reloadFull As Boolean) As Boolean
        Dim DBTVShow As Database.DBElement = Master.DB.Load_TVShow(id, reloadFull, reloadFull)

        If DBTVShow.IsOnline OrElse FileUtils.Common.CheckOnlineStatus(DBTVShow, showMessage) Then
            fScanner.Load_TVShow(DBTVShow, False, batchMode, False)
            If Not batchMode Then DataGridView_Row_Update_TVShow(DBTVShow.ID)
        Else
            If showMessage AndAlso MessageBox.Show(String.Concat(Master.eLang.GetString(719, "This path is no longer available"), ".", Environment.NewLine,
                                                         Master.eLang.GetString(703, "Whould you like to remove it from the library?")),
                                                     Master.eLang.GetString(776, "Remove tv show from library"),
                                                     MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then
                Master.DB.Delete_TVShow(id, batchMode)
                Return True
            Else
                Return False
            End If
        End If

        Return False
    End Function

    Private Sub ReloadContent_DoWork_Movie(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwReload_Movies.DoWork
        Dim iCount As Integer = 0
        Dim MovieIDs As New Dictionary(Of Long, String)
        Dim doFill As Boolean = False

        For Each sRow As DataRow In dtMovies.Rows
            MovieIDs.Add(Convert.ToInt64(sRow.Item("idMovie")), sRow.Item("ListTitle").ToString)
        Next

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each KVP As KeyValuePair(Of Long, String) In MovieIDs
                If bwReload_Movies.CancellationPending Then Return
                bwReload_Movies.ReportProgress(iCount, KVP.Value)
                If ReloadContent_Movie(KVP.Key, True, False) Then
                    doFill = True
                Else
                    bwReload_Movies.ReportProgress(-1, KVP.Key)
                End If
                iCount += 1
            Next
            SQLtransaction.Commit()
        End Using
        e.Result = New Results With {.doFill = doFill}
    End Sub

    Private Sub ReloadContent_DoWork_Movieset(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwReload_MovieSets.DoWork
        Dim iCount As Integer = 0
        Dim MovieSetIDs As New Dictionary(Of Long, String)
        Dim doFill As Boolean = False

        For Each sRow As DataRow In dtMovieSets.Rows
            MovieSetIDs.Add(Convert.ToInt64(sRow.Item("idSet")), sRow.Item("ListTitle").ToString)
        Next

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each KVP As KeyValuePair(Of Long, String) In MovieSetIDs
                If bwReload_MovieSets.CancellationPending Then Return
                bwReload_MovieSets.ReportProgress(iCount, KVP.Value)
                If ReloadContent_Movieset(KVP.Key, True) Then
                    doFill = True
                Else
                    bwReload_MovieSets.ReportProgress(-1, KVP.Key)
                End If
                iCount += 1
            Next
            SQLtransaction.Commit()
        End Using
        e.Result = New Results With {.doFill = doFill}
    End Sub

    Private Sub ReloadContent_DoWork_TVShow(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwReload_TVShows.DoWork
        Dim reloadFull As Boolean = DirectCast(e.Argument, Boolean)
        Dim iCount As Integer = 0
        Dim ShowIDs As New Dictionary(Of Long, String)
        Dim doFill As Boolean = False

        For Each sRow As DataRow In dtTVShows.Rows
            ShowIDs.Add(Convert.ToInt64(sRow.Item("idShow")), sRow.Item("ListTitle").ToString)
        Next

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each KVP As KeyValuePair(Of Long, String) In ShowIDs
                If bwReload_TVShows.CancellationPending Then Return
                bwReload_TVShows.ReportProgress(iCount, KVP.Value)
                If ReloadContent_TVShow(KVP.Key, True, False, reloadFull) Then
                    doFill = True
                Else
                    bwReload_TVShows.ReportProgress(-1, KVP.Key)
                End If
                iCount += 1
            Next
            SQLtransaction.Commit()
        End Using
        e.Result = New Results With {.doFill = doFill}
    End Sub

    Private Sub ReloadContent_ProgressChanged_Movie(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwReload_Movies.ProgressChanged
        If e.ProgressPercentage = -1 Then
            DataGridView_Row_Update_Movie(CLng(e.UserState))
        Else
            SetStatus(e.UserState.ToString)
            tspbLoading.Value = e.ProgressPercentage
        End If
    End Sub

    Private Sub ReloadContent_ProgressChanged_Movieset(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwReload_MovieSets.ProgressChanged
        If e.ProgressPercentage = -1 Then
            DataGridView_Row_Update_Movieset(CLng(e.UserState))
        Else
            SetStatus(e.UserState.ToString)
            tspbLoading.Value = e.ProgressPercentage
        End If
    End Sub

    Private Sub ReloadContent_ProgressChanged_TVShow(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwReload_TVShows.ProgressChanged
        If e.ProgressPercentage = -1 Then
            DataGridView_Row_Update_TVShow(CLng(e.UserState))
        Else
            SetStatus(e.UserState.ToString)
            tspbLoading.Value = e.ProgressPercentage
        End If
    End Sub

    Private Sub ReloadContent_RunWorkerCompleted_Movie(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwReload_Movies.RunWorkerCompleted
        Dim Res As Results = DirectCast(e.Result, Results)
        tslLoading.Text = String.Empty
        tspbLoading.Visible = False
        tslLoading.Visible = False

        If Res.doFill Then
            DataGridView_FillList_Main(True, True, False)
        Else
            DoTitleCheck()
            SetControlsEnabled(True)
        End If
        Cursor = Cursors.Default
    End Sub

    Private Sub ReloadContent_RunWorkerCompleted_Movieset(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwReload_MovieSets.RunWorkerCompleted
        Dim Res As Results = DirectCast(e.Result, Results)
        tslLoading.Text = String.Empty
        tspbLoading.Visible = False
        tslLoading.Visible = False

        If Res.doFill Then
            DataGridView_FillList_Main(False, True, False)
        Else
            DoTitleCheck()
            SetControlsEnabled(True)
        End If
        Cursor = Cursors.Default
    End Sub

    Private Sub ReloadContent_RunWorkerCompleted_TVShow(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwReload_TVShows.RunWorkerCompleted
        Dim Res As Results = DirectCast(e.Result, Results)
        tslLoading.Text = String.Empty
        tspbLoading.Visible = False
        tslLoading.Visible = False

        If Res.doFill Then
            DataGridView_FillList_Main(False, False, True)
        Else
            SetControlsEnabled(True)
        End If
        Cursor = Cursors.Default
    End Sub

    Private Sub RewriteContent_All_Movie(ByVal rewriteAll As Boolean)
        If dtMovies.Rows.Count > 0 Then
            SetControlsEnabled(False)
            tspbLoading.Style = ProgressBarStyle.Continuous
            Filter_Enable_Movie(False)
            Filter_Enable_Movieset(False)
            Filter_Enable_TVShow(False)

            btnCancel.Text = Master.eLang.GetString(1299, "Cancel Rewriting")
            lblCanceling.Text = Master.eLang.GetString(1300, "Canceling Rewriting...")
            btnCancel.Visible = True
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = True

            tspbLoading.Maximum = dtMovies.Rows.Count + 1
            tspbLoading.Value = 0
            tslLoading.Text = Master.eLang.GetString(1297, "Rewriting Media:")
            tspbLoading.Visible = True
            tslLoading.Visible = True
            Application.DoEvents()
            bwRewriteContent.WorkerReportsProgress = True
            bwRewriteContent.WorkerSupportsCancellation = True
            bwRewriteContent.RunWorkerAsync(New Arguments With {.ContentType = Enums.ContentType.Movie, .Trigger = rewriteAll})
        Else
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub RewriteContent_All_Movieset(ByVal rewriteAll As Boolean)
        If dtMovieSets.Rows.Count > 0 Then
            SetControlsEnabled(False)
            tspbLoading.Style = ProgressBarStyle.Continuous
            Filter_Enable_Movie(False)
            Filter_Enable_Movieset(False)
            Filter_Enable_TVShow(False)

            btnCancel.Text = Master.eLang.GetString(1299, "Cancel Rewriting")
            lblCanceling.Text = Master.eLang.GetString(1300, "Canceling Rewriting...")
            btnCancel.Visible = True
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = True

            tspbLoading.Maximum = dtMovieSets.Rows.Count + 1
            tspbLoading.Value = 0
            tslLoading.Text = Master.eLang.GetString(1297, "Rewriting Media:")
            tspbLoading.Visible = True
            tslLoading.Visible = True
            Application.DoEvents()
            bwRewriteContent.WorkerReportsProgress = True
            bwRewriteContent.WorkerSupportsCancellation = True
            bwRewriteContent.RunWorkerAsync(New Arguments With {.ContentType = Enums.ContentType.Movieset, .Trigger = rewriteAll})
        Else
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub RewriteContent_All_TVShow(ByVal rewriteAll As Boolean)
        If dtTVShows.Rows.Count > 0 Then
            SetControlsEnabled(False)
            tspbLoading.Style = ProgressBarStyle.Continuous
            Filter_Enable_Movie(False)
            Filter_Enable_Movieset(False)
            Filter_Enable_TVShow(False)

            btnCancel.Text = Master.eLang.GetString(1299, "Cancel Rewriting")
            lblCanceling.Text = Master.eLang.GetString(1300, "Canceling Rewriting...")
            btnCancel.Visible = True
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = True

            tspbLoading.Maximum = dtTVShows.Rows.Count + 1
            tspbLoading.Value = 0
            tslLoading.Text = Master.eLang.GetString(1297, "Rewriting Media:")
            tspbLoading.Visible = True
            tslLoading.Visible = True
            Application.DoEvents()
            bwRewriteContent.WorkerReportsProgress = True
            bwRewriteContent.WorkerSupportsCancellation = True
            bwRewriteContent.RunWorkerAsync(New Arguments With {.ContentType = Enums.ContentType.TV, .Trigger = rewriteAll})
        Else
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub RewriteContent_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwRewriteContent.DoWork
        Dim Args As Arguments = DirectCast(e.Argument, Arguments)
        Dim iCount As Integer = 0
        Dim dicIDs As New Dictionary(Of Long, String)

        Select Case Args.ContentType
            Case Enums.ContentType.Movie
                For Each sRow As DataRow In dtMovies.Rows
                    dicIDs.Add(Convert.ToInt64(sRow.Item("idMovie")), sRow.Item("ListTitle").ToString)
                Next

                Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                    For Each KVP As KeyValuePair(Of Long, String) In dicIDs
                        If bwRewriteContent.CancellationPending Then Return
                        bwRewriteContent.ReportProgress(iCount, KVP.Value)
                        RewriteContent_Save_Movie(KVP.Key, True, Args.Trigger)
                        iCount += 1
                    Next
                    SQLtransaction.Commit()
                End Using
            Case Enums.ContentType.Movieset
                For Each sRow As DataRow In dtMovieSets.Rows
                    dicIDs.Add(Convert.ToInt64(sRow.Item("idSet")), sRow.Item("ListTitle").ToString)
                Next

                Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                    For Each KVP As KeyValuePair(Of Long, String) In dicIDs
                        If bwRewriteContent.CancellationPending Then Return
                        bwRewriteContent.ReportProgress(iCount, KVP.Value)
                        RewriteContent_Save_Movieset(KVP.Key, True, Args.Trigger)
                        iCount += 1
                    Next
                    SQLtransaction.Commit()
                End Using
            Case Enums.ContentType.TV
                For Each sRow As DataRow In dtTVShows.Rows
                    dicIDs.Add(Convert.ToInt64(sRow.Item("idShow")), sRow.Item("ListTitle").ToString)
                Next

                Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                    For Each KVP As KeyValuePair(Of Long, String) In dicIDs
                        If bwRewriteContent.CancellationPending Then Return
                        bwRewriteContent.ReportProgress(iCount, KVP.Value)
                        RewriteContent_Save_TVShow(KVP.Key, True, Args.Trigger)
                        iCount += 1
                    Next
                    SQLtransaction.Commit()
                End Using
        End Select
    End Sub

    Private Sub RewriteContent_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwRewriteContent.ProgressChanged
        SetStatus(e.UserState.ToString)
        tspbLoading.Value = e.ProgressPercentage
    End Sub

    Private Sub RewriteContent_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwRewriteContent.RunWorkerCompleted
        tslLoading.Text = String.Empty
        tslLoading.Visible = False
        tspbLoading.Visible = False
        btnCancel.Visible = False
        lblCanceling.Visible = False
        prbCanceling.Visible = False
        pnlCancel.Visible = False

        DataGridView_FillList_Main(True, True, True)
    End Sub
    ''' <summary>
    ''' Load existing movie content and save it again with all selected filenames
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="batchMode"></param>
    ''' <param name="rewriteAll"></param>
    ''' <returns></returns>
    Private Function RewriteContent_Save_Movie(ByVal id As Long, ByVal batchMode As Boolean, ByVal rewriteAll As Boolean) As Boolean
        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(id)

        If tmpDBElement.IsOnline Then
            Master.DB.Save_Movie(tmpDBElement, batchMode, True, rewriteAll, True, False)
            Return True
        Else
            Return False
        End If
    End Function
    ''' <summary>
    ''' Load existing movieset content and save it again with all selected filenames
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="batchMode"></param>
    ''' <param name="bRewriteAll"></param>
    ''' <returns></returns>
    Private Function RewriteContent_Save_Movieset(ByVal id As Long, ByVal batchMode As Boolean, ByVal bRewriteAll As Boolean) As Boolean
        Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movieset(id)

        If tmpDBElement.IsOnline Then
            Master.DB.Save_Movieset(tmpDBElement, batchMode, True, bRewriteAll, True, True)
            Return True
        Else
            Return False
        End If
    End Function
    ''' <summary>
    ''' Load existing movieset content and save it again with all selected filenames
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="batchMode"></param>
    ''' <param name="rewriteAll"></param>
    ''' <returns></returns>
    Private Function RewriteContent_Save_TVShow(ByVal id As Long, ByVal batchMode As Boolean, ByVal rewriteAll As Boolean) As Boolean
        Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(id, True, True, False)

        If tmpDBElement.IsOnline Then
            Master.DB.Save_TVShow(tmpDBElement, batchMode, True, rewriteAll, True)
            Return True
        Else
            Return False
        End If
    End Function

    Public Sub Scanner_LoadMedia(ByVal options As Scanner.ScanOrCleanOptions, Optional ByVal sourceIDs As List(Of Long) = Nothing, Optional ByVal specifiedFolder As String = "")
        Try
            SetStatus(Master.eLang.GetString(116, "Performing Preliminary Tasks (Gathering Data)..."))
            tspbLoading.ProgressBar.Style = ProgressBarStyle.Marquee
            tspbLoading.Visible = True

            Application.DoEvents()

            SetControlsEnabled(False)

            fScanner.CancelAndWait()

            If options.Moviesets Then
                prevRow_MovieSet = -1
                dgvMovieSets.DataSource = Nothing
            End If

            fScanner.Start(options, sourceIDs, specifiedFolder)

        Catch ex As Exception
            LoadingDone = True
            Filter_Enable_Movie(True)
            Filter_Enable_Movieset(True)
            Filter_Enable_TVShow(True)
            SetControlsEnabled(True)
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Private Sub Scanner_ProgressChanged(ByVal eProgressValue As Scanner.ProgressValue)
        Select Case eProgressValue.EventType
            Case Enums.ScannerEventType.Added_Movie
                SetStatus(String.Concat(String.Concat(Master.eLang.GetString(815, "Added Movie"), ":"), " ", eProgressValue.Message))
                DataGridView_Row_Add_Movie(eProgressValue.ID)
            Case Enums.ScannerEventType.Added_TVEpisode
                SetStatus(String.Concat(String.Concat(Master.eLang.GetString(814, "Added Episode"), ":"), " ", eProgressValue.Message))
            Case Enums.ScannerEventType.Added_TVShow
                SetStatus(String.Concat(String.Concat(Master.eLang.GetString(1089, "Added TV Show"), ":"), " ", eProgressValue.Message))
                DataGridView_Row_Add_TVShow(eProgressValue.ID)
            Case Enums.ScannerEventType.CleaningDatabase
                SetStatus(Master.eLang.GetString(644, "Cleaning Database..."))
            Case Enums.ScannerEventType.CurrentSource
                SetStatus(String.Concat(String.Concat(Master.eLang.GetString(1131, "Scanning Source"), ":"), " ", eProgressValue.Message))
            Case Enums.ScannerEventType.PreliminaryTasks
                SetStatus(Master.eLang.GetString(116, "Performing Preliminary Tasks (Gathering Data)..."))
            Case Enums.ScannerEventType.Refresh_TVShow
                DataGridView_Row_Update_TVShow(eProgressValue.ID, True)
            Case Enums.ScannerEventType.ScannerEnded
                If Not Master.isCL Then
                    SetStatus(String.Empty)
                    DataGridView_FillList_Main(False, False, False) ' focusing on movies for now
                    tspbLoading.Visible = False
                    tslLoading.Visible = False
                    LoadingDone = True
                Else
                    DataGridView_FillList_Main(True, False, False) ' focusing on movies for now
                    LoadingDone = True
                End If
        End Select
    End Sub

    Private Sub Scraper_CreateList(ByVal selectionType As Enums.SelectionType,
                                   ByVal scrapeType As Enums.ScrapeType,
                                   ByVal scrapeOptions As Structures.ScrapeOptions,
                                   ByVal scrapeModifiers As Structures.ScrapeModifiers,
                                   ByVal contentType As Enums.ContentType)
        Dim DataRowList As New List(Of DataRow)
        Dim ScrapeList As New List(Of ScrapeItem)
        Dim IdList As New List(Of Long)
        Dim DataGridView As DataGridView = Nothing
        Dim DataTable As DataTable = Nothing

        Select Case contentType
            Case Enums.ContentType.Movie
                DataGridView = dgvMovies
                DataTable = dtMovies
            Case Enums.ContentType.Movieset
                DataGridView = dgvMovieSets
                DataTable = dtMovieSets
            Case Enums.ContentType.TVEpisode
                DataGridView = dgvTVEpisodes
                DataTable = dtTVEpisodes
            Case Enums.ContentType.TVSeason
                DataGridView = dgvTVSeasons
                DataTable = dtTVSeasons
            Case Enums.ContentType.TVShow
                DataGridView = dgvTVShows
                DataTable = dtTVShows
        End Select

        If DataGridView IsNot Nothing AndAlso DataTable IsNot Nothing Then
            Select Case selectionType
                Case Enums.SelectionType.Selected
                    'create snapshoot list of selected movies
                    For Each sRow As DataGridViewRow In DataGridView.SelectedRows
                        DataRowList.Add(DirectCast(sRow.DataBoundItem, DataRowView).Row)
                    Next
                Case Else
                    For Each sRow As DataRow In DataTable.Rows
                        DataRowList.Add(sRow)
                    Next
            End Select
        End If

        'create ScrapeList of movies acording to scrapetype
        For Each Row As DataRow In DataRowList
            If Convert.ToBoolean(Row.Item("Lock")) AndAlso Not scrapeType = Enums.ScrapeType.Manually Then Continue For
            IdList.Add(CLng(Row.Item("idMovie")))
        Next
        Dim Task As New TaskManager.TaskItem(TaskManager.TaskItem.TaskType.Scrape) With {
            .ContentType = Enums.ContentType.Movie,
            .ListOfID = IdList,
            .ScrapeModifiers = scrapeModifiers,
            .ScrapeOptions = scrapeOptions,
            .SelectionType = selectionType
        }
        fTaskManager.AddTask(Task)
    End Sub

    'Private Sub Scraper_CreateList_Movieset(ByVal sType As Enums.ScrapeType, ByVal ScrapeOptions As Structures.ScrapeOptions, ByVal ScrapeModifiers As Structures.ScrapeModifiers)
    'Dim DataRowList As New List(Of DataRow)
    'Dim ScrapeList As New List(Of ScrapeItem)

    'Select Case sType
    '    Case Enums.ScrapeType.SelectedAsk, Enums.ScrapeType.SelectedAuto, Enums.ScrapeType.SelectedSkip,
    '        Enums.ScrapeType.SingleAuto, Enums.ScrapeType.SingleField, Enums.ScrapeType.SingleScrape
    '        'create snapshoot list of selected moviesets
    '        For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
    '            DataRowList.Add(DirectCast(sRow.DataBoundItem, DataRowView).Row)
    '        Next
    '    Case Else
    '        For Each sRow As DataRow In dtMovieSets.Rows
    '            DataRowList.Add(sRow)
    '        Next
    'End Select

    'Dim BannerAllowed As Boolean = Master.eSettings.MovieSetBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainBanner)
    'Dim ClearArtAllowed As Boolean = Master.eSettings.MovieSetClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainClearArt)
    'Dim ClearLogoAllowed As Boolean = Master.eSettings.MovieSetClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainClearLogo)
    'Dim DiscArtAllowed As Boolean = Master.eSettings.MovieSetDiscArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainDiscArt)
    'Dim FanartAllowed As Boolean = Master.eSettings.MovieSetFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainFanart)
    'Dim KeyartAllowed As Boolean = Master.eSettings.MovieSetKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainKeyart)
    'Dim LandscapeAllowed As Boolean = Master.eSettings.MovieSetLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainLandscape)
    'Dim PosterAllowed As Boolean = Master.eSettings.MovieSetPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainPoster)

    ''create ScrapeList of moviesets acording to scrapetype
    'For Each drvRow As DataRow In DataRowList
    '    If Convert.ToBoolean(drvRow.Item("Lock")) AndAlso Not sType = Enums.ScrapeType.SingleScrape Then Continue For

    '    Dim sModifier As New Structures.ScrapeModifiers With {
    '        .DoSearch = ScrapeModifiers.DoSearch,
    '        .Banner = ScrapeModifiers.Banner AndAlso BannerAllowed,
    '        .Clearart = ScrapeModifiers.Clearart AndAlso ClearArtAllowed,
    '        .Clearlogo = ScrapeModifiers.Clearlogo AndAlso ClearLogoAllowed,
    '        .Discart = ScrapeModifiers.Discart AndAlso DiscArtAllowed,
    '        .Fanart = ScrapeModifiers.Fanart AndAlso FanartAllowed,
    '        .Keyart = ScrapeModifiers.Keyart AndAlso KeyartAllowed,
    '        .Landscape = ScrapeModifiers.Landscape AndAlso LandscapeAllowed,
    '        .Information = ScrapeModifiers.Information,
    '        .Poster = ScrapeModifiers.Poster AndAlso PosterAllowed
    '    }

    '    Select Case sType
    '        Case Enums.ScrapeType.NewAsk, Enums.ScrapeType.NewAuto, Enums.ScrapeType.NewSkip
    '            If Not Convert.ToBoolean(drvRow.Item("New")) Then Continue For
    '        Case Enums.ScrapeType.MarkedAsk, Enums.ScrapeType.MarkedAuto, Enums.ScrapeType.MarkedSkip
    '            If Not Convert.ToBoolean(drvRow.Item("Mark")) Then Continue For
    '        Case Enums.ScrapeType.FilterAsk, Enums.ScrapeType.FilterAuto, Enums.ScrapeType.FilterSkip
    '            Dim index As Integer = bsMovieSets.Find("idSet", drvRow.Item(0))
    '            If Not index >= 0 Then Continue For
    '        Case Enums.ScrapeType.MissingAsk, Enums.ScrapeType.MissingAuto, Enums.ScrapeType.MissingSkip
    '            If Not String.IsNullOrEmpty(drvRow.Item("BannerPath").ToString) Then sModifier.Banner = False
    '            If Not String.IsNullOrEmpty(drvRow.Item("ClearArtPath").ToString) Then sModifier.Clearart = False
    '            If Not String.IsNullOrEmpty(drvRow.Item("ClearLogoPath").ToString) Then sModifier.Clearlogo = False
    '            If Not String.IsNullOrEmpty(drvRow.Item("DiscArtPath").ToString) Then sModifier.Discart = False
    '            If Not String.IsNullOrEmpty(drvRow.Item("FanartPath").ToString) Then sModifier.Fanart = False
    '            If Not String.IsNullOrEmpty(drvRow.Item("KeyartPath").ToString) Then sModifier.Keyart = False
    '            If Not String.IsNullOrEmpty(drvRow.Item("LandscapePath").ToString) Then sModifier.Landscape = False
    '            If Not String.IsNullOrEmpty(drvRow.Item("NfoPath").ToString) Then sModifier.Information = False
    '            If Not String.IsNullOrEmpty(drvRow.Item("PosterPath").ToString) Then sModifier.Poster = False
    '    End Select
    '    If Functions.ScrapeModifiersAnyEnabled(sModifier) Then
    '        ScrapeList.Add(New ScrapeItem With {.DataRow = drvRow, .ScrapeModifiers = sModifier})
    '    End If
    'Next

    'If Not ScrapeList.Count = 0 Then
    '    SetControlsEnabled(False)

    '    tspbLoading.Value = 0
    '    If ScrapeList.Count > 1 Then
    '        tspbLoading.Style = ProgressBarStyle.Continuous
    '        tspbLoading.Maximum = ScrapeList.Count
    '    Else
    '        tspbLoading.Maximum = 100
    '        tspbLoading.Style = ProgressBarStyle.Marquee
    '    End If

    '    'Select Case sType
    '    '    Case Enums.ScrapeType.AllAsk
    '    '        tslLoading.Text = Master.eLang.GetString(1215, "Scraping Media (All MovieSets - Ask):")
    '    '    Case Enums.ScrapeType.AllAuto
    '    '        tslLoading.Text = Master.eLang.GetString(1216, "Scraping Media (All MovieSets - Auto):")
    '    '    Case Enums.ScrapeType.AllSkip
    '    '        tslLoading.Text = Master.eLang.GetString(1217, "Scraping Media (All MovieSets - Skip):")
    '    '    Case Enums.ScrapeType.MissingAuto
    '    '        tslLoading.Text = Master.eLang.GetString(1218, "Scraping Media (MovieSets Missing Items - Auto):")
    '    '    Case Enums.ScrapeType.MissingAsk
    '    '        tslLoading.Text = Master.eLang.GetString(1219, "Scraping Media (MovieSets Missing Items - Ask):")
    '    '    Case Enums.ScrapeType.MissingSkip
    '    '        tslLoading.Text = Master.eLang.GetString(1220, "Scraping Media (MovieSets Missing Items - Skip):")
    '    '    Case Enums.ScrapeType.NewAsk
    '    '        tslLoading.Text = Master.eLang.GetString(1221, "Scraping Media (New MovieSets - Ask):")
    '    '    Case Enums.ScrapeType.NewAuto
    '    '        tslLoading.Text = Master.eLang.GetString(1222, "Scraping Media (New MovieSets - Auto):")
    '    '    Case Enums.ScrapeType.NewSkip
    '    '        tslLoading.Text = Master.eLang.GetString(1223, "Scraping Media (New MovieSets - Skip):")
    '    '    Case Enums.ScrapeType.MarkedAsk
    '    '        tslLoading.Text = Master.eLang.GetString(1224, "Scraping Media (Marked MovieSets - Ask):")
    '    '    Case Enums.ScrapeType.MarkedAuto
    '    '        tslLoading.Text = Master.eLang.GetString(1225, "Scraping Media (Marked MovieSets - Auto):")
    '    '    Case Enums.ScrapeType.MarkedSkip
    '    '        tslLoading.Text = Master.eLang.GetString(1226, "Scraping Media (Marked MovieSets - Skip):")
    '    '    Case Enums.ScrapeType.FilterAsk
    '    '        tslLoading.Text = Master.eLang.GetString(622, "Scraping Media (Current Filter - Ask):")
    '    '    Case Enums.ScrapeType.FilterAuto
    '    '        tslLoading.Text = Master.eLang.GetString(623, "Scraping Media (Current Filter - Auto):")
    '    '    Case Enums.ScrapeType.FilterAuto
    '    '        tslLoading.Text = Master.eLang.GetString(1045, "Scraping Media (Current Filter - Skip):")
    '    '    Case Enums.ScrapeType.AllAsk
    '    '        tslLoading.Text = Master.eLang.GetString(1358, "Scraping Media (Selected MovieSets - Ask):")
    '    '    Case Enums.ScrapeType.AllAuto
    '    '        tslLoading.Text = Master.eLang.GetString(1359, "Scraping Media (Selected MovieSets - Auto):")
    '    '    Case Enums.ScrapeType.AllSkip
    '    '        tslLoading.Text = Master.eLang.GetString(1360, "Scraping Media (Selected MovieSets - Skip):")
    '    '    Case Enums.ScrapeType.SingleField
    '    '        tslLoading.Text = Master.eLang.GetString(1357, "Scraping Media (Selected MovieSets - Single Field):")
    '    '    Case Enums.ScrapeType.SingleScrape, Enums.ScrapeType.SingleAuto
    '    '        tslLoading.Text = Master.eLang.GetString(139, "Scraping:")
    '    'End Select


    '    If Not sType = Enums.ScrapeType.SingleScrape Then
    '        btnCancel.Text = Master.eLang.GetString(54, "Cancel Scraper")
    '        lblCanceling.Text = Master.eLang.GetString(53, "Canceling Scraper...")
    '        btnCancel.Visible = True
    '        lblCanceling.Visible = False
    '        prbCanceling.Visible = False
    '        pnlCancel.Visible = True
    '    End If

    '    tslLoading.Visible = True
    '    tspbLoading.Visible = True
    '    Application.DoEvents()
    '    bwMovieSetScraper.WorkerSupportsCancellation = True
    '    bwMovieSetScraper.WorkerReportsProgress = True
    '    bwMovieSetScraper.RunWorkerAsync(New Arguments With {.ScrapeOptions = ScrapeOptions, .ScrapeList = ScrapeList, .ScrapeType = sType})
    'End If
    'End Sub

    'Private Sub Scraper_CreateList_TVEpisode(ByVal sType As Enums.ScrapeType, ByVal ScrapeOptions As Structures.ScrapeOptions, ByVal ScrapeModifiers As Structures.ScrapeModifiers)
    '    Dim DataRowList As New List(Of DataRow)
    '    Dim ScrapeList As New List(Of ScrapeItem)

    '    Select Case sType
    '        Case Enums.ScrapeType.SelectedAsk, Enums.ScrapeType.SelectedAuto, Enums.ScrapeType.SelectedSkip,
    '            Enums.ScrapeType.SingleAuto, Enums.ScrapeType.SingleField, Enums.ScrapeType.SingleScrape
    '            'create snapshoot list of selected tv episode
    '            For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
    '                DataRowList.Add(DirectCast(sRow.DataBoundItem, DataRowView).Row)
    '            Next
    '        Case Else
    '            For Each sRow As DataRow In dtTVEpisodes.Rows
    '                DataRowList.Add(sRow)
    '            Next
    '    End Select

    '    Dim ActorThumbsAllowed As Boolean = Master.eSettings.TVEpisodeActorThumbsAnyEnabled
    '    Dim FanartAllowed As Boolean = Master.eSettings.TVEpisodeFanartAnyEnabled AndAlso (Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodeFanart) OrElse
    '                                                                                       Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainFanart))
    '    Dim PosterAllowed As Boolean = Master.eSettings.TVEpisodePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodePoster)

    '    'create ScrapeList of episodes acording to scrapetype
    '    For Each drvRow As DataRow In DataRowList
    '        If Convert.ToBoolean(drvRow.Item("Lock")) AndAlso Not sType = Enums.ScrapeType.SingleScrape Then Continue For

    '        Dim sModifier As New Structures.ScrapeModifiers With {
    '            .DoSearch = ScrapeModifiers.DoSearch,
    '            .Episodes = New Structures.ScrapeModifiersBase With {
    '            .Actorthumbs = ScrapeModifiers.Episodes.Actorthumbs AndAlso ActorThumbsAllowed,
    '            .Fanart = ScrapeModifiers.Episodes.Fanart AndAlso FanartAllowed,
    '            .Metadata = ScrapeModifiers.Episodes.Metadata,
    '            .Information = ScrapeModifiers.Episodes.Information,
    '            .Poster = ScrapeModifiers.Episodes.Poster AndAlso PosterAllowed}
    '        }

    '        Select Case sType
    '            Case Enums.ScrapeType.NewAsk, Enums.ScrapeType.NewAuto, Enums.ScrapeType.NewSkip
    '                If Not Convert.ToBoolean(drvRow.Item("New")) Then Continue For
    '            Case Enums.ScrapeType.MarkedAsk, Enums.ScrapeType.MarkedAuto, Enums.ScrapeType.MarkedSkip
    '                If Not Convert.ToBoolean(drvRow.Item("Mark")) Then Continue For
    '            Case Enums.ScrapeType.FilterAsk, Enums.ScrapeType.FilterAuto, Enums.ScrapeType.FilterSkip
    '                Dim index As Integer = bsTVEpisodes.Find("idEpisode", drvRow.Item(0))
    '                If Not index >= 0 Then Continue For
    '            Case Enums.ScrapeType.MissingAsk, Enums.ScrapeType.MissingAuto, Enums.ScrapeType.MissingSkip
    '                If Not String.IsNullOrEmpty(drvRow.Item("FanartPath").ToString) Then sModifier.Episodes.Fanart = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("NfoPath").ToString) Then sModifier.Episodes.Information = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("PosterPath").ToString) Then sModifier.Episodes.Poster = False
    '        End Select
    '        If Functions.ScrapeModifiersAnyEnabled(sModifier) Then
    '            ScrapeList.Add(New ScrapeItem With {.DataRow = drvRow, .ScrapeModifiers = sModifier})
    '        End If
    '    Next

    '    If Not ScrapeList.Count = 0 Then
    '        SetControlsEnabled(False)

    '        tspbLoading.Value = 0
    '        If ScrapeList.Count > 1 Then
    '            tspbLoading.Style = ProgressBarStyle.Continuous
    '            tspbLoading.Maximum = ScrapeList.Count
    '        Else
    '            tspbLoading.Maximum = 100
    '            tspbLoading.Style = ProgressBarStyle.Marquee
    '        End If

    '        'Select Case sType
    '        '    Case Enums.ScrapeType.AllAsk
    '        '        tslLoading.Text = Master.eLang.GetString(127, "Scraping Media (All Movies - Ask):")
    '        '    Case Enums.ScrapeType.AllAuto
    '        '        tslLoading.Text = Master.eLang.GetString(128, "Scraping Media (All Movies - Auto):")
    '        '    Case Enums.ScrapeType.AllSkip
    '        '        tslLoading.Text = Master.eLang.GetString(853, "Scraping Media (All Movies - Skip):")
    '        '    Case Enums.ScrapeType.MissingAuto
    '        '        tslLoading.Text = Master.eLang.GetString(132, "Scraping Media (Movies Missing Items - Auto):")
    '        '    Case Enums.ScrapeType.MissingAsk
    '        '        tslLoading.Text = Master.eLang.GetString(133, "Scraping Media (Movies Missing Items - Ask):")
    '        '    Case Enums.ScrapeType.MissingSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1042, "Scraping Media (Movies Missing Items - Skip):")
    '        '    Case Enums.ScrapeType.NewAsk
    '        '        tslLoading.Text = Master.eLang.GetString(134, "Scraping Media (New Movies - Ask):")
    '        '    Case Enums.ScrapeType.NewAuto
    '        '        tslLoading.Text = Master.eLang.GetString(135, "Scraping Media (New Movies - Auto):")
    '        '    Case Enums.ScrapeType.NewSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1043, "Scraping Media (New Movies - Skip):")
    '        '    Case Enums.ScrapeType.MarkedAsk
    '        '        tslLoading.Text = Master.eLang.GetString(136, "Scraping Media (Marked Movies - Ask):")
    '        '    Case Enums.ScrapeType.MarkedAuto
    '        '        tslLoading.Text = Master.eLang.GetString(137, "Scraping Media (Marked Movies - Auto):")
    '        '    Case Enums.ScrapeType.MarkedSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1044, "Scraping Media (Marked Movies - Skip):")
    '        '    Case Enums.ScrapeType.FilterAsk
    '        '        tslLoading.Text = Master.eLang.GetString(622, "Scraping Media (Current Filter - Ask):")
    '        '    Case Enums.ScrapeType.FilterAuto
    '        '        tslLoading.Text = Master.eLang.GetString(623, "Scraping Media (Current Filter - Auto):")
    '        '    Case Enums.ScrapeType.FilterAuto
    '        '        tslLoading.Text = Master.eLang.GetString(1045, "Scraping Media (Current Filter - Skip):")
    '        '    Case Enums.ScrapeType.AllAsk
    '        '        tslLoading.Text = Master.eLang.GetString(1128, "Scraping Media (Selected Movies - Ask):")
    '        '    Case Enums.ScrapeType.AllAuto
    '        '        tslLoading.Text = Master.eLang.GetString(1129, "Scraping Media (Selected Movies - Auto):")
    '        '    Case Enums.ScrapeType.AllSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1130, "Scraping Media (Selected Movies - Skip):")
    '        '    Case Enums.ScrapeType.SingleField
    '        '        tslLoading.Text = Master.eLang.GetString(1127, "Scraping Media (Selected Movies - Single Field):")
    '        '    Case Enums.ScrapeType.SingleScrape, Enums.ScrapeType.SingleAuto
    '        '        tslLoading.Text = Master.eLang.GetString(139, "Scraping:")
    '        'End Select

    '        If Not sType = Enums.ScrapeType.SingleScrape Then
    '            btnCancel.Text = Master.eLang.GetString(54, "Cancel Scraper")
    '            lblCanceling.Text = Master.eLang.GetString(53, "Canceling Scraper...")
    '            btnCancel.Visible = True
    '            lblCanceling.Visible = False
    '            prbCanceling.Visible = False
    '            pnlCancel.Visible = True
    '        End If

    '        tslLoading.Visible = True
    '        tspbLoading.Visible = True
    '        Application.DoEvents()
    '        bwTVEpisodeScraper.WorkerSupportsCancellation = True
    '        bwTVEpisodeScraper.WorkerReportsProgress = True
    '        bwTVEpisodeScraper.RunWorkerAsync(New Arguments With {.ScrapeOptions = ScrapeOptions, .ScrapeList = ScrapeList, .ScrapeType = sType})
    '    End If
    'End Sub

    'Private Sub Scraper_CreateList_TVSeason(ByVal sType As Enums.ScrapeType, ByVal ScrapeOptions As Structures.ScrapeOptions, ByVal ScrapeModifiers As Structures.ScrapeModifiers)
    '    Dim DataRowList As New List(Of DataRow)
    '    Dim ScrapeList As New List(Of ScrapeItem)

    '    Select Case sType
    '        Case Enums.ScrapeType.SelectedAsk, Enums.ScrapeType.SelectedAuto, Enums.ScrapeType.SelectedSkip,
    '            Enums.ScrapeType.SingleAuto, Enums.ScrapeType.SingleField, Enums.ScrapeType.SingleScrape
    '            'create snapshoot list of selected tv season
    '            For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
    '                DataRowList.Add(DirectCast(sRow.DataBoundItem, DataRowView).Row)
    '            Next
    '        Case Else
    '            For Each sRow As DataRow In dtTVSeasons.Rows
    '                DataRowList.Add(sRow)
    '            Next
    '    End Select

    '    Dim AllSeasonsBannerAllowed As Boolean = Master.eSettings.TVAllSeasonsBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsBanner)
    '    Dim AllSeasonsFanartAllowed As Boolean = Master.eSettings.TVAllSeasonsFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsFanart)
    '    Dim AllSeasonsLandscapeAllowed As Boolean = Master.eSettings.TVAllSeasonsLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsLandscape)
    '    Dim AllSeasonsPosterAllowed As Boolean = Master.eSettings.TVAllSeasonsPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsPoster)
    '    Dim SeasonBannerAllowed As Boolean = Master.eSettings.TVSeasonBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonBanner)
    '    Dim SeasonFanartAllowed As Boolean = Master.eSettings.TVSeasonFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonFanart)
    '    Dim SeasonLandscapeAllowed As Boolean = Master.eSettings.TVSeasonLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonLandscape)
    '    Dim SeasonPosterAllowed As Boolean = Master.eSettings.TVSeasonPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonPoster)

    '    'create ScrapeList of tv seasons acording to scrapetype
    '    For Each drvRow As DataRow In DataRowList
    '        If Convert.ToBoolean(drvRow.Item("Lock")) AndAlso Not sType = Enums.ScrapeType.SingleScrape Then Continue For

    '        Dim sModifier As New Structures.ScrapeModifiers With {
    '            .DoSearch = ScrapeModifiers.DoSearch,
    '            .AllSeasonsBanner = ScrapeModifiers.AllSeasonsBanner AndAlso AllSeasonsBannerAllowed AndAlso CInt(drvRow.Item("Season")) = -1,
    '            .AllSeasonsFanart = ScrapeModifiers.AllSeasonsFanart AndAlso AllSeasonsFanartAllowed AndAlso CInt(drvRow.Item("Season")) = -1,
    '            .AllSeasonsLandscape = ScrapeModifiers.AllSeasonsLandscape AndAlso AllSeasonsLandscapeAllowed AndAlso CInt(drvRow.Item("Season")) = -1,
    '            .AllSeasonsPoster = ScrapeModifiers.AllSeasonsPoster AndAlso AllSeasonsPosterAllowed AndAlso CInt(drvRow.Item("Season")) = -1,
    '            .Seasons = New Structures.ScrapeModifiersBase With {
    '            .Banner = ScrapeModifiers.Seasons.Banner AndAlso SeasonBannerAllowed AndAlso Not CInt(drvRow.Item("Season")) = -1,
    '            .Fanart = ScrapeModifiers.Seasons.Fanart AndAlso SeasonFanartAllowed AndAlso Not CInt(drvRow.Item("Season")) = -1,
    '            .Landscape = ScrapeModifiers.Seasons.Landscape AndAlso SeasonLandscapeAllowed AndAlso Not CInt(drvRow.Item("Season")) = -1,
    '            .Information = ScrapeModifiers.Information,
    '            .Poster = ScrapeModifiers.Seasons.Poster AndAlso SeasonPosterAllowed AndAlso Not CInt(drvRow.Item("Season")) = -1}
    '        }

    '        Select Case sType
    '            Case Enums.ScrapeType.NewAsk, Enums.ScrapeType.NewAuto, Enums.ScrapeType.NewSkip
    '                If Not Convert.ToBoolean(drvRow.Item("New")) Then Continue For
    '            Case Enums.ScrapeType.MarkedAsk, Enums.ScrapeType.MarkedAuto, Enums.ScrapeType.MarkedSkip
    '                If Not Convert.ToBoolean(drvRow.Item("Mark")) Then Continue For
    '            Case Enums.ScrapeType.FilterAsk, Enums.ScrapeType.FilterAuto, Enums.ScrapeType.FilterSkip
    '                Dim index As Integer = bsTVShows.Find("idShow", drvRow.Item(0))
    '                If Not index >= 0 Then Continue For
    '            Case Enums.ScrapeType.MissingAsk, Enums.ScrapeType.MissingAuto, Enums.ScrapeType.MissingSkip
    '                If Not String.IsNullOrEmpty(drvRow.Item("BannerPath").ToString) Then sModifier.Seasons.Banner = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("FanartPath").ToString) Then sModifier.Seasons.Fanart = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("LandscapePath").ToString) Then sModifier.Seasons.Landscape = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("PosterPath").ToString) Then sModifier.Seasons.Poster = False
    '        End Select
    '        If Functions.ScrapeModifiersAnyEnabled(sModifier) Then
    '            ScrapeList.Add(New ScrapeItem With {.DataRow = drvRow, .ScrapeModifiers = sModifier})
    '        End If
    '    Next

    '    If Not ScrapeList.Count = 0 Then
    '        SetControlsEnabled(False)

    '        tspbLoading.Value = 0
    '        If ScrapeList.Count > 1 Then
    '            tspbLoading.Style = ProgressBarStyle.Continuous
    '            tspbLoading.Maximum = ScrapeList.Count
    '        Else
    '            tspbLoading.Maximum = 100
    '            tspbLoading.Style = ProgressBarStyle.Marquee
    '        End If

    '        'Select Case sType
    '        '    Case Enums.ScrapeType.AllAsk
    '        '        tslLoading.Text = Master.eLang.GetString(127, "Scraping Media (All Movies - Ask):")
    '        '    Case Enums.ScrapeType.AllAuto
    '        '        tslLoading.Text = Master.eLang.GetString(128, "Scraping Media (All Movies - Auto):")
    '        '    Case Enums.ScrapeType.AllSkip
    '        '        tslLoading.Text = Master.eLang.GetString(853, "Scraping Media (All Movies - Skip):")
    '        '    Case Enums.ScrapeType.MissingAuto
    '        '        tslLoading.Text = Master.eLang.GetString(132, "Scraping Media (Movies Missing Items - Auto):")
    '        '    Case Enums.ScrapeType.MissingAsk
    '        '        tslLoading.Text = Master.eLang.GetString(133, "Scraping Media (Movies Missing Items - Ask):")
    '        '    Case Enums.ScrapeType.MissingSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1042, "Scraping Media (Movies Missing Items - Skip):")
    '        '    Case Enums.ScrapeType.NewAsk
    '        '        tslLoading.Text = Master.eLang.GetString(134, "Scraping Media (New Movies - Ask):")
    '        '    Case Enums.ScrapeType.NewAuto
    '        '        tslLoading.Text = Master.eLang.GetString(135, "Scraping Media (New Movies - Auto):")
    '        '    Case Enums.ScrapeType.NewSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1043, "Scraping Media (New Movies - Skip):")
    '        '    Case Enums.ScrapeType.MarkedAsk
    '        '        tslLoading.Text = Master.eLang.GetString(136, "Scraping Media (Marked Movies - Ask):")
    '        '    Case Enums.ScrapeType.MarkedAuto
    '        '        tslLoading.Text = Master.eLang.GetString(137, "Scraping Media (Marked Movies - Auto):")
    '        '    Case Enums.ScrapeType.MarkedSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1044, "Scraping Media (Marked Movies - Skip):")
    '        '    Case Enums.ScrapeType.FilterAsk
    '        '        tslLoading.Text = Master.eLang.GetString(622, "Scraping Media (Current Filter - Ask):")
    '        '    Case Enums.ScrapeType.FilterAuto
    '        '        tslLoading.Text = Master.eLang.GetString(623, "Scraping Media (Current Filter - Auto):")
    '        '    Case Enums.ScrapeType.FilterAuto
    '        '        tslLoading.Text = Master.eLang.GetString(1045, "Scraping Media (Current Filter - Skip):")
    '        '    Case Enums.ScrapeType.SelectedAsk
    '        '        tslLoading.Text = Master.eLang.GetString(1128, "Scraping Media (Selected Movies - Ask):")
    '        '    Case Enums.ScrapeType.SelectedAuto
    '        '        tslLoading.Text = Master.eLang.GetString(1129, "Scraping Media (Selected Movies - Auto):")
    '        '    Case Enums.ScrapeType.SelectedSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1130, "Scraping Media (Selected Movies - Skip):")
    '        '    Case Enums.ScrapeType.SingleField
    '        '        tslLoading.Text = Master.eLang.GetString(1127, "Scraping Media (Selected Movies - Single Field):")
    '        '    Case Enums.ScrapeType.SingleScrape, Enums.ScrapeType.SingleAuto
    '        '        tslLoading.Text = Master.eLang.GetString(139, "Scraping:")
    '        'End Select

    '        If Not sType = Enums.ScrapeType.SingleScrape Then
    '            btnCancel.Text = Master.eLang.GetString(54, "Cancel Scraper")
    '            lblCanceling.Text = Master.eLang.GetString(53, "Canceling Scraper...")
    '            btnCancel.Visible = True
    '            lblCanceling.Visible = False
    '            prbCanceling.Visible = False
    '            pnlCancel.Visible = True
    '        End If

    '        tslLoading.Visible = True
    '        tspbLoading.Visible = True
    '        Application.DoEvents()
    '        bwTVSeasonScraper.WorkerSupportsCancellation = True
    '        bwTVSeasonScraper.WorkerReportsProgress = True
    '        bwTVSeasonScraper.RunWorkerAsync(New Arguments With {.ScrapeOptions = ScrapeOptions, .ScrapeList = ScrapeList, .ScrapeType = sType})
    '    End If
    'End Sub

    'Private Sub Scraper_CreateList_TVShow(ByVal scrapeType As Enums.ScrapeType, ByVal selectionType As Enums.SelectionType, ByVal scrapeOptions As Structures.ScrapeOptions, ByVal scrapeModifiers As Structures.ScrapeModifiers)
    '    Dim DataRowList As New List(Of DataRow)
    '    Dim ScrapeList As New List(Of ScrapeItem)

    '    Select Case selectionType
    '        Case Enums.SelectionType.Selected
    '            'create snapshoot list of selected tv show
    '            For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
    '                DataRowList.Add(DirectCast(sRow.DataBoundItem, DataRowView).Row)
    '            Next
    '        Case Else
    '            For Each sRow As DataRow In dtTVShows.Rows
    '                DataRowList.Add(sRow)
    '            Next
    '    End Select

    '    Dim AllSeasonsBannerAllowed As Boolean = Master.eSettings.TVAllSeasonsBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsBanner)
    '    Dim AllSeasonsFanartAllowed As Boolean = Master.eSettings.TVAllSeasonsFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsFanart)
    '    Dim AllSeasonsLandscapeAllowed As Boolean = Master.eSettings.TVAllSeasonsLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsLandscape)
    '    Dim AllSeasonsPosterAllowed As Boolean = Master.eSettings.TVAllSeasonsPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.AllSeasonsPoster)
    '    Dim EpisodeActorThumbsAllowed As Boolean = Master.eSettings.TVEpisodeActorThumbsAnyEnabled
    '    Dim EpisodeFanartAllowed As Boolean = Master.eSettings.TVEpisodeFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodeFanart)
    '    Dim EpisodeMetaAllowed As Boolean = Master.eSettings.TVScraperMetaDataScan
    '    Dim EpisodePosterAllowed As Boolean = Master.eSettings.TVEpisodePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodePoster)
    '    Dim MainActorThumbsAllowed As Boolean = Master.eSettings.TVShowActorThumbsAnyEnabled
    '    Dim MainBannerAllowed As Boolean = Master.eSettings.TVShowBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainBanner)
    '    Dim MainCharacterArtAllowed As Boolean = Master.eSettings.TVShowCharacterArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainCharacterArt)
    '    Dim MainClearArtAllowed As Boolean = Master.eSettings.TVShowClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainClearArt)
    '    Dim MainClearLogoAllowed As Boolean = Master.eSettings.TVShowClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainClearLogo)
    '    Dim MainExtrafanartsAllowed As Boolean = Master.eSettings.TVShowExtrafanartsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainFanart)
    '    Dim MainFanartAllowed As Boolean = Master.eSettings.TVShowFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainFanart)
    '    Dim MainKeyartAllowed As Boolean = Master.eSettings.TVShowKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainKeyart)
    '    Dim MainLandscapeAllowed As Boolean = Master.eSettings.TVShowLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainLandscape)
    '    Dim MainPosterAllowed As Boolean = Master.eSettings.TVShowPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainPoster)
    '    Dim MainThemeAllowed As Boolean = Master.eSettings.TvShowThemeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Theme_TV()
    '    Dim SeasonBannerAllowed As Boolean = Master.eSettings.TVSeasonBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonBanner)
    '    Dim SeasonFanartAllowed As Boolean = Master.eSettings.TVSeasonFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonFanart)
    '    Dim SeasonLandscapeAllowed As Boolean = Master.eSettings.TVSeasonLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonLandscape)
    '    Dim SeasonPosterAllowed As Boolean = Master.eSettings.TVSeasonPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonPoster)

    '    'create ScrapeList of tv shows acording to scrapetype
    '    For Each drvRow As DataRow In DataRowList
    '        If Convert.ToBoolean(drvRow.Item("Lock")) AndAlso Not selectionType = Enums.SelectionType.Selected Then Continue For

    '        Dim sModifier As New Structures.ScrapeModifiers With {
    '            .DoSearch = scrapeModifiers.DoSearch,
    '            .AllSeasonsBanner = scrapeModifiers.AllSeasonsBanner AndAlso AllSeasonsBannerAllowed,
    '            .AllSeasonsFanart = scrapeModifiers.AllSeasonsFanart AndAlso AllSeasonsFanartAllowed,
    '            .AllSeasonsLandscape = scrapeModifiers.AllSeasonsLandscape AndAlso AllSeasonsLandscapeAllowed,
    '            .AllSeasonsPoster = scrapeModifiers.AllSeasonsPoster AndAlso AllSeasonsPosterAllowed,
    '            .Episodes = New Structures.ScrapeModifiersBase With {
    '            .Actorthumbs = scrapeModifiers.Episodes.Actorthumbs AndAlso EpisodeActorThumbsAllowed,
    '            .Fanart = scrapeModifiers.Episodes.Fanart AndAlso EpisodeFanartAllowed,
    '            .Metadata = scrapeModifiers.Episodes.Metadata AndAlso EpisodeMetaAllowed,
    '            .Information = scrapeModifiers.Episodes.Information,
    '            .Poster = scrapeModifiers.Episodes.Poster AndAlso EpisodePosterAllowed},
    '            .Actorthumbs = scrapeModifiers.Actorthumbs AndAlso MainActorThumbsAllowed,
    '            .Banner = scrapeModifiers.Banner AndAlso MainBannerAllowed,
    '            .Characterart = scrapeModifiers.Characterart AndAlso MainCharacterArtAllowed,
    '            .Clearart = scrapeModifiers.Clearart AndAlso MainClearArtAllowed,
    '            .Clearlogo = scrapeModifiers.Clearlogo AndAlso MainClearLogoAllowed,
    '            .Extrafanarts = scrapeModifiers.Extrafanarts AndAlso MainExtrafanartsAllowed,
    '            .Fanart = scrapeModifiers.Fanart AndAlso MainFanartAllowed,
    '            .Keyart = scrapeModifiers.Keyart AndAlso MainKeyartAllowed,
    '            .Landscape = scrapeModifiers.Landscape AndAlso MainLandscapeAllowed,
    '            .Information = scrapeModifiers.Information,
    '            .Poster = scrapeModifiers.Poster AndAlso MainPosterAllowed,
    '            .Theme = scrapeModifiers.Theme AndAlso MainThemeAllowed,
    '            .Seasons = New Structures.ScrapeModifiersBase With {
    '            .Banner = scrapeModifiers.Seasons.Banner AndAlso SeasonBannerAllowed,
    '            .Fanart = scrapeModifiers.Seasons.Fanart AndAlso SeasonFanartAllowed,
    '            .Landscape = scrapeModifiers.Seasons.Landscape AndAlso SeasonLandscapeAllowed,
    '            .Poster = scrapeModifiers.Seasons.Poster AndAlso SeasonPosterAllowed},
    '            .withEpisodes = scrapeModifiers.withEpisodes,
    '            .withSeasons = scrapeModifiers.withSeasons
    '        }

    '        Select Case scrapeType
    '            Case Enums.SelectionType.[New], Enums.SelectionType.[New], Enums.SelectionType.[New]
    '                If Not Convert.ToBoolean(drvRow.Item("New")) Then Continue For
    '            Case Enums.ScrapeType.MarkedAsk, Enums.ScrapeType.MarkedAuto, Enums.ScrapeType.MarkedSkip
    '                If Not Convert.ToBoolean(drvRow.Item("Mark")) Then Continue For
    '            Case Enums.ScrapeType.FilterAsk, Enums.ScrapeType.FilterAuto, Enums.ScrapeType.FilterSkip
    '                Dim index As Integer = bsTVShows.Find("idShow", drvRow.Item(0))
    '                If Not index >= 0 Then Continue For
    '            Case Enums.ScrapeType.MissingAsk, Enums.ScrapeType.MissingAuto, Enums.ScrapeType.MissingSkip
    '                If Not String.IsNullOrEmpty(drvRow.Item("BannerPath").ToString) Then sModifier.Banner = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("CharacterArtPath").ToString) Then sModifier.Characterart = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("ClearArtPath").ToString) Then sModifier.Clearart = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("ClearLogoPath").ToString) Then sModifier.Clearlogo = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("EFanartsPath").ToString) Then sModifier.Extrafanarts = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("FanartPath").ToString) Then sModifier.Fanart = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("KeyartPath").ToString) Then sModifier.Keyart = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("LandscapePath").ToString) Then sModifier.Landscape = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("NfoPath").ToString) Then sModifier.Information = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("PosterPath").ToString) Then sModifier.Poster = False
    '                If Not String.IsNullOrEmpty(drvRow.Item("ThemePath").ToString) Then sModifier.Theme = False
    '        End Select
    '        If Functions.ScrapeModifiersAnyEnabled(sModifier) Then
    '            ScrapeList.Add(New ScrapeItem With {.DataRow = drvRow, .ScrapeModifiers = sModifier})
    '        End If
    '    Next

    '    If Not ScrapeList.Count = 0 Then
    '        SetControlsEnabled(False)

    '        tspbLoading.Value = 0
    '        If ScrapeList.Count > 1 Then
    '            tspbLoading.Style = ProgressBarStyle.Continuous
    '            tspbLoading.Maximum = ScrapeList.Count
    '        Else
    '            tspbLoading.Maximum = 100
    '            tspbLoading.Style = ProgressBarStyle.Marquee
    '        End If

    '        'Select Case scrapeType
    '        '    Case Enums.ScrapeType.AllAsk
    '        '        tslLoading.Text = Master.eLang.GetString(127, "Scraping Media (All Movies - Ask):")
    '        '    Case Enums.ScrapeType.AllAuto
    '        '        tslLoading.Text = Master.eLang.GetString(128, "Scraping Media (All Movies - Auto):")
    '        '    Case Enums.ScrapeType.AllSkip
    '        '        tslLoading.Text = Master.eLang.GetString(853, "Scraping Media (All Movies - Skip):")
    '        '    Case Enums.ScrapeType.MissingAuto
    '        '        tslLoading.Text = Master.eLang.GetString(132, "Scraping Media (Movies Missing Items - Auto):")
    '        '    Case Enums.ScrapeType.MissingAsk
    '        '        tslLoading.Text = Master.eLang.GetString(133, "Scraping Media (Movies Missing Items - Ask):")
    '        '    Case Enums.ScrapeType.MissingSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1042, "Scraping Media (Movies Missing Items - Skip):")
    '        '    Case Enums.ScrapeType.NewAsk
    '        '        tslLoading.Text = Master.eLang.GetString(134, "Scraping Media (New Movies - Ask):")
    '        '    Case Enums.ScrapeType.NewAuto
    '        '        tslLoading.Text = Master.eLang.GetString(135, "Scraping Media (New Movies - Auto):")
    '        '    Case Enums.ScrapeType.NewSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1043, "Scraping Media (New Movies - Skip):")
    '        '    Case Enums.ScrapeType.MarkedAsk
    '        '        tslLoading.Text = Master.eLang.GetString(136, "Scraping Media (Marked Movies - Ask):")
    '        '    Case Enums.ScrapeType.MarkedAuto
    '        '        tslLoading.Text = Master.eLang.GetString(137, "Scraping Media (Marked Movies - Auto):")
    '        '    Case Enums.ScrapeType.MarkedSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1044, "Scraping Media (Marked Movies - Skip):")
    '        '    Case Enums.ScrapeType.FilterAsk
    '        '        tslLoading.Text = Master.eLang.GetString(622, "Scraping Media (Current Filter - Ask):")
    '        '    Case Enums.ScrapeType.FilterAuto
    '        '        tslLoading.Text = Master.eLang.GetString(623, "Scraping Media (Current Filter - Auto):")
    '        '    Case Enums.ScrapeType.FilterAuto
    '        '        tslLoading.Text = Master.eLang.GetString(1045, "Scraping Media (Current Filter - Skip):")
    '        '    Case Enums.ScrapeType.SelectedAsk
    '        '        tslLoading.Text = Master.eLang.GetString(1128, "Scraping Media (Selected Movies - Ask):")
    '        '    Case Enums.ScrapeType.SelectedAuto
    '        '        tslLoading.Text = Master.eLang.GetString(1129, "Scraping Media (Selected Movies - Auto):")
    '        '    Case Enums.ScrapeType.SelectedSkip
    '        '        tslLoading.Text = Master.eLang.GetString(1130, "Scraping Media (Selected Movies - Skip):")
    '        '    Case Enums.ScrapeType.SingleField
    '        '        tslLoading.Text = Master.eLang.GetString(1127, "Scraping Media (Selected Movies - Single Field):")
    '        '    Case Enums.ScrapeType.SingleScrape, Enums.ScrapeType.SingleAuto
    '        '        tslLoading.Text = Master.eLang.GetString(139, "Scraping:")
    '        'End Select

    '        If Not scrapeType = Enums.ScrapeType.SingleScrape Then
    '            btnCancel.Text = Master.eLang.GetString(54, "Cancel Scraper")
    '            lblCanceling.Text = Master.eLang.GetString(53, "Canceling Scraper...")
    '            btnCancel.Visible = True
    '            lblCanceling.Visible = False
    '            prbCanceling.Visible = False
    '            pnlCancel.Visible = True
    '        End If

    '        tslLoading.Visible = True
    '        tspbLoading.Visible = True
    '        Application.DoEvents()
    '        bwTVScraper.WorkerSupportsCancellation = True
    '        bwTVScraper.WorkerReportsProgress = True
    '        bwTVScraper.RunWorkerAsync(New Arguments With {.ScrapeOptions = scrapeOptions, .ScrapeList = ScrapeList, .ScrapeType = scrapeType})
    '    End If
    'End Sub

    'Private Sub Scraper_DoWork_Movie(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwMovieScraper.DoWork
    '    Dim Args As Arguments = DirectCast(e.Argument, Arguments)
    '    Dim Cancelled As Boolean = False
    '    Dim DBScrapeMovie As New Database.DBElement(Enums.ContentType.Movie)

    '    logger.Trace(String.Format("[Movie Scraper] [Start] Movies Count [{0}]", Args.ScrapeList.Count.ToString))

    '    For Each tScrapeItem As ScrapeItem In Args.ScrapeList
    '        Dim Theme As New MediaContainers.MediaFile
    '        Dim tURL As String = String.Empty
    '        Dim OldTitle As String = String.Empty
    '        Dim NewTitle As String = String.Empty

    '        Cancelled = False

    '        If bwMovieScraper.CancellationPending Then Exit For
    '        OldTitle = tScrapeItem.DataRow.Item("Title").ToString
    '        bwMovieScraper.ReportProgress(1, OldTitle)

    '        Dim dScrapeRow As DataRow = tScrapeItem.DataRow

    '        logger.Trace(String.Format("[Movie Scraper] [Start] Scraping {0}", OldTitle))

    '        DBScrapeMovie = Master.DB.Load_Movie(Convert.ToInt64(tScrapeItem.DataRow.Item("idMovie")))

    '        If tScrapeItem.ScrapeModifiers.Information Then
    '            If Not Addons.Instance.ScrapeData_Movie(DBScrapeMovie, tScrapeItem.ScrapeModifiers, Args.ScrapeType, Args.ScrapeOptions, Args.ScrapeList.Count = 1) Then
    '                logger.Trace(String.Format("[Movie Scraper] [Cancelled] Scraping {0}", OldTitle))
    '                Cancelled = True
    '                If Args.ScrapeType = Enums.ScrapeType.SingleAuto OrElse Args.ScrapeType = Enums.ScrapeType.SingleField OrElse Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                    bwMovieScraper.CancelAsync()
    '                End If
    '            End If
    '        Else
    '            ' if we do not have the movie ID we need to retrive it even if is just a Poster/Fanart/Trailer/Actors update
    '            If Not DBScrapeMovie.MainDetails.UniqueIDsSpecified AndAlso (
    '                tScrapeItem.ScrapeModifiers.Actorthumbs Or
    '                tScrapeItem.ScrapeModifiers.Banner Or
    '                tScrapeItem.ScrapeModifiers.Clearart Or
    '                tScrapeItem.ScrapeModifiers.Clearlogo Or
    '                tScrapeItem.ScrapeModifiers.Discart Or
    '                tScrapeItem.ScrapeModifiers.Extrafanarts Or
    '                tScrapeItem.ScrapeModifiers.Extrathumbs Or
    '                tScrapeItem.ScrapeModifiers.Fanart Or
    '                tScrapeItem.ScrapeModifiers.Keyart Or
    '                tScrapeItem.ScrapeModifiers.Landscape Or
    '                tScrapeItem.ScrapeModifiers.Poster Or
    '                tScrapeItem.ScrapeModifiers.Theme Or
    '                tScrapeItem.ScrapeModifiers.Trailer) Then
    '                Dim tModifiers As New Structures.ScrapeModifiers With {.Information = True}
    '                Dim tOptions As New Structures.ScrapeOptions 'set all values to false to not override any field. ID's are always determined.
    '                If Not Addons.Instance.ScrapeData_Movie(DBScrapeMovie, tModifiers, Args.ScrapeType, tOptions, Args.ScrapeList.Count = 1) Then
    '                    logger.Trace(String.Format("[Movie Scraper] [Cancelled] Scraping {0}", OldTitle))
    '                    Cancelled = True
    '                    If Args.ScrapeType = Enums.ScrapeType.SingleAuto OrElse Args.ScrapeType = Enums.ScrapeType.SingleField OrElse Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                        bwMovieScraper.CancelAsync()
    '                    End If
    '                End If
    '            End If
    '        End If

    '        If bwMovieScraper.CancellationPending Then Exit For

    '        If Not Cancelled Then
    '            If Master.eSettings.MovieScraperMetaDataScan AndAlso tScrapeItem.ScrapeModifiers.Metadata Then
    '                bwMovieScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(140, "Scanning Meta Data"), ":"))
    '                MediaInfo.UpdateMediaInfo(DBScrapeMovie)
    '            End If
    '            If bwMovieScraper.CancellationPending Then Exit For

    '            NewTitle = DBScrapeMovie.MainDetails.Title

    '            If Not NewTitle = OldTitle Then
    '                bwMovieScraper.ReportProgress(0, String.Format(Master.eLang.GetString(812, "Old Title: {0} | New Title: {1}"), OldTitle, NewTitle))
    '            End If

    '            'get all images 
    '            If tScrapeItem.ScrapeModifiers.Banner OrElse
    '                tScrapeItem.ScrapeModifiers.Clearart OrElse
    '                tScrapeItem.ScrapeModifiers.Clearlogo OrElse
    '                tScrapeItem.ScrapeModifiers.Discart OrElse
    '                tScrapeItem.ScrapeModifiers.Extrafanarts OrElse
    '                tScrapeItem.ScrapeModifiers.Extrathumbs OrElse
    '                tScrapeItem.ScrapeModifiers.Fanart OrElse
    '                tScrapeItem.ScrapeModifiers.Keyart OrElse
    '                tScrapeItem.ScrapeModifiers.Landscape OrElse
    '                tScrapeItem.ScrapeModifiers.Poster Then

    '                Dim SearchResultsContainer As New MediaContainers.SearchResultsContainer
    '                bwMovieScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(254, "Scraping Images"), ":"))
    '                If Addons.Instance.ScrapeImage_Movie(DBScrapeMovie, SearchResultsContainer, tScrapeItem.ScrapeModifiers, Args.ScrapeList.Count = 1) Then
    '                    If Args.ScrapeType = Enums.ScrapeType.SingleScrape AndAlso Master.eSettings.MovieImagesDisplayImageSelect Then
    '                        Using dImgSelect As New dlgImgSelect
    '                            If dImgSelect.ShowDialog(DBScrapeMovie, SearchResultsContainer, tScrapeItem.ScrapeModifiers) = DialogResult.OK Then
    '                                Images.SetPreferredImages(DBScrapeMovie, dImgSelect.Result)
    '                            End If
    '                        End Using
    '                    Else
    '                        'autoscraping
    '                        Images.SetPreferredImages(DBScrapeMovie, SearchResultsContainer, tScrapeItem.ScrapeModifiers, IsAutoScraper:=True)
    '                    End If
    '                End If
    '            End If

    '            If bwMovieScraper.CancellationPending Then Exit For

    '            'Theme
    '            If tScrapeItem.ScrapeModifiers.Theme Then
    '                bwMovieScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(266, "Scraping Themes"), ":"))
    '                Dim SearchResults As New List(Of MediaContainers.MediaFile)
    '                If Addons.Instance.ScrapeTheme_Movie(DBScrapeMovie, Enums.ModifierType.MainTheme, SearchResults) Then
    '                    If Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                        Using dThemeSelect As New dlgMediaFileSelect(Enums.ModifierType.MainTheme, True)
    '                            If dThemeSelect.ShowDialog(DBScrapeMovie, SearchResults) = DialogResult.OK Then
    '                                DBScrapeMovie.Theme = dThemeSelect.Result
    '                            End If
    '                        End Using

    '                        'autoscraping
    '                    ElseIf Not Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                        Dim newPreferredTheme As New MediaContainers.MediaFile
    '                        If MediaFiles.GetPreferredTheme(SearchResults, newPreferredTheme, DBScrapeMovie.ContentType) Then
    '                            DBScrapeMovie.Theme = newPreferredTheme
    '                        End If
    '                    End If
    '                End If
    '            End If

    '            If bwMovieScraper.CancellationPending Then Exit For

    '            'Trailer
    '            If tScrapeItem.ScrapeModifiers.Trailer Then
    '                bwMovieScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(574, "Scraping Trailers"), ":"))
    '                Dim SearchResults As New List(Of MediaContainers.MediaFile)
    '                If Addons.Instance.ScrapeTrailer_Movie(DBScrapeMovie, Enums.ModifierType.MainTrailer, SearchResults) Then
    '                    If Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                        Using dTrailerSelect As New dlgMediaFileSelect(Enums.ModifierType.MainTrailer, True)
    '                            If dTrailerSelect.ShowDialog(DBScrapeMovie, SearchResults) = DialogResult.OK Then
    '                                DBScrapeMovie.Trailer = dTrailerSelect.Result
    '                            End If
    '                        End Using

    '                        'autoscraping
    '                    ElseIf Not Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                        Dim newPreferredTrailer As New MediaContainers.MediaFile
    '                        If MediaFiles.GetPreferredMovieTrailer(SearchResults, newPreferredTrailer, DBScrapeMovie.ContentType) Then
    '                            DBScrapeMovie.Trailer = newPreferredTrailer
    '                        End If
    '                    End If
    '                End If
    '            End If

    '            If bwMovieScraper.CancellationPending Then Exit For

    '            If Not (Args.ScrapeType = Enums.ScrapeType.SingleScrape) Then
    '                Addons.Instance.Run(Enums.AddonEventType.ScraperMulti_Movie, Nothing, Nothing, False, DBScrapeMovie)
    '                bwMovieScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":"))
    '                Master.DB.Save_Movie(DBScrapeMovie, False, tScrapeItem.ScrapeModifiers.Information OrElse tScrapeItem.ScrapeModifiers.Metadata, True, True, False)
    '                bwMovieScraper.ReportProgress(-2, DBScrapeMovie.ID)
    '                bwMovieScraper.ReportProgress(-1, If(Not OldTitle = NewTitle, String.Format(Master.eLang.GetString(812, "Old Title: {0} | New Title: {1}"), OldTitle, NewTitle), NewTitle))
    '            End If
    '            logger.Trace(String.Format("[Movie Scraper] [Done] Scraping {0}", OldTitle))
    '        Else
    '            logger.Trace(String.Format("[Movie Scraper] [Cancelled] Scraping {0}", OldTitle))
    '        End If
    '    Next

    '    e.Result = New Results With {.DBElement = DBScrapeMovie, .ScrapeType = Args.ScrapeType, .Cancelled = bwMovieScraper.CancellationPending}
    '    logger.Trace(String.Format("[Movie Scraper] [Done] Scraping"))
    'End Sub

    'Private Sub Scraper_DoWork_Movieset(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwMovieSetScraper.DoWork
    '    Dim Args As Arguments = DirectCast(e.Argument, Arguments)
    '    Dim Cancelled As Boolean = False
    '    Dim DBScrapeMovieSet As New Database.DBElement(Enums.ContentType.MovieSet)

    '    logger.Trace(String.Format("[MovieSet Scraper] [Start] MovieSets Count [{0}]", Args.ScrapeList.Count.ToString))

    '    For Each tScrapeItem As ScrapeItem In Args.ScrapeList
    '        Dim aContainer As New MediaContainers.SearchResultsContainer
    '        Dim NewTitle As String = String.Empty
    '        Dim OldTMDBColID As String = String.Empty
    '        Dim OldTitle As String = String.Empty
    '        Dim efList As New List(Of String)
    '        Dim etList As New List(Of String)
    '        Dim tURL As String = String.Empty

    '        Cancelled = False

    '        If bwMovieSetScraper.CancellationPending Then Exit For
    '        OldTitle = tScrapeItem.DataRow.Item("Title").ToString
    '        OldTMDBColID = tScrapeItem.DataRow.Item("TMDBColID").ToString
    '        bwMovieSetScraper.ReportProgress(1, OldTitle)

    '        Dim dScrapeRow As DataRow = tScrapeItem.DataRow

    '        logger.Trace(String.Format("[MovieSet Scraper] [Start] Scraping {0}", OldTitle))

    '        DBScrapeMovieSet = Master.DB.Load_Movieset(Convert.ToInt64(tScrapeItem.DataRow.Item("idSet")))

    '        'ModulesManager.Instance.RunGeneric(Enums.ModuleEventType.BeforeEditMovieSet, Nothing, DBScrapeMovieSet)

    '        If tScrapeItem.ScrapeModifiers.Information Then
    '            bwMovieSetScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(253, "Scraping Data"), ":"))
    '            If Not Addons.Instance.ScrapeData_Movieset(DBScrapeMovieSet, tScrapeItem.ScrapeModifiers, Args.ScrapeType, Args.ScrapeOptions, Args.ScrapeList.Count = 1) Then
    '                logger.Trace(String.Format("[MovieSet Scraper] [Cancelled] Scraping {0}", OldTitle))
    '                Cancelled = True
    '                If Args.ScrapeType = Enums.ScrapeType.SingleAuto OrElse Args.ScrapeType = Enums.ScrapeType.SingleField OrElse Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                    bwMovieSetScraper.CancelAsync()
    '                End If
    '            End If
    '        Else
    '            ' if we do not have the movie set ID we need to retrive it even if is just a Poster/Fanart/Trailer/Actors update
    '            If Not DBScrapeMovieSet.MainDetails.UniqueIDsSpecified AndAlso (
    '                tScrapeItem.ScrapeModifiers.Banner Or
    '                tScrapeItem.ScrapeModifiers.Clearart Or
    '                tScrapeItem.ScrapeModifiers.Clearlogo Or
    '                tScrapeItem.ScrapeModifiers.Discart Or
    '                tScrapeItem.ScrapeModifiers.Fanart Or
    '                tScrapeItem.ScrapeModifiers.Keyart Or
    '                tScrapeItem.ScrapeModifiers.Landscape Or
    '                tScrapeItem.ScrapeModifiers.Poster) Then
    '                Dim tOpt As New Structures.ScrapeOptions 'all false value not to override any field
    '                If Not Addons.Instance.ScrapeData_Movieset(DBScrapeMovieSet, tScrapeItem.ScrapeModifiers, Args.ScrapeType, tOpt, Args.ScrapeList.Count = 1) Then
    '                    logger.Trace(String.Format("[MovieSet Scraper] [Cancelled] Scraping {0}", OldTitle))
    '                    Exit For
    '                End If
    '            End If
    '        End If

    '        If bwMovieSetScraper.CancellationPending Then Exit For

    '        If Not Cancelled Then

    '            NewTitle = DBScrapeMovieSet.MainDetails.Title

    '            If Not NewTitle = OldTitle Then
    '                bwMovieSetScraper.ReportProgress(0, String.Format(Master.eLang.GetString(812, "Old Title: {0} | New Title: {1}"), OldTitle, NewTitle))
    '            End If

    '            'get all images
    '            If tScrapeItem.ScrapeModifiers.Banner OrElse
    '                tScrapeItem.ScrapeModifiers.Clearart OrElse
    '                tScrapeItem.ScrapeModifiers.Clearlogo OrElse
    '                tScrapeItem.ScrapeModifiers.Discart OrElse
    '                tScrapeItem.ScrapeModifiers.Extrafanarts OrElse
    '                tScrapeItem.ScrapeModifiers.Fanart OrElse
    '                tScrapeItem.ScrapeModifiers.Keyart OrElse
    '                tScrapeItem.ScrapeModifiers.Landscape OrElse
    '                tScrapeItem.ScrapeModifiers.Poster Then

    '                Dim SearchResultsContainer As New MediaContainers.SearchResultsContainer
    '                bwMovieSetScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(254, "Scraping Images"), ":"))
    '                If Addons.Instance.ScrapeImage_Movieset(DBScrapeMovieSet, SearchResultsContainer, tScrapeItem.ScrapeModifiers) Then
    '                    If Args.ScrapeType = Enums.ScrapeType.SingleScrape AndAlso Master.eSettings.MovieImagesDisplayImageSelect Then
    '                        Using dImgSelect As New dlgImgSelect
    '                            If dImgSelect.ShowDialog(DBScrapeMovieSet, SearchResultsContainer, tScrapeItem.ScrapeModifiers) = DialogResult.OK Then
    '                                Images.SetPreferredImages(DBScrapeMovieSet, dImgSelect.Result)
    '                            End If
    '                        End Using
    '                    Else
    '                        'autoscraping
    '                        Images.SetPreferredImages(DBScrapeMovieSet, SearchResultsContainer, tScrapeItem.ScrapeModifiers, IsAutoScraper:=True)
    '                    End If
    '                End If
    '            End If

    '            If bwMovieScraper.CancellationPending Then Exit For

    '            If Not (Args.ScrapeType = Enums.ScrapeType.SingleScrape) Then
    '                bwMovieSetScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":"))
    '                Master.DB.Save_MovieSet(DBScrapeMovieSet, True, True, True, True, True)
    '                bwMovieSetScraper.ReportProgress(-2, DBScrapeMovieSet.ID)
    '                bwMovieSetScraper.ReportProgress(-1, If(Not OldTitle = NewTitle, String.Format(Master.eLang.GetString(812, "Old Title: {0} | New Title: {1}"), OldTitle, NewTitle), NewTitle))
    '            End If
    '            logger.Trace(String.Format("[MovieSet Scraper] [Done] Scraping {0}", OldTitle))
    '        Else
    '            logger.Trace(String.Format("[MovieSet Scraper] [Cancelled] Scraping {0}", OldTitle))
    '        End If
    '    Next

    '    e.Result = New Results With {.DBElement = DBScrapeMovieSet, .ScrapeType = Args.ScrapeType, .Cancelled = bwMovieSetScraper.CancellationPending}
    '    logger.Trace(String.Format("[MovieSet Scraper] [Done] Scraping"))
    'End Sub

    'Private Sub Scraper_DoWork_TVEpisode(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwTVEpisodeScraper.DoWork
    '    Dim Args As Arguments = DirectCast(e.Argument, Arguments)
    '    Dim Cancelled As Boolean = False
    '    Dim DBScrapeEpisode As New Database.DBElement(Enums.ContentType.TVEpisode)

    '    logger.Trace(String.Format("[TVEpisode] [Start] Episodes Count [{0}]", Args.ScrapeList.Count.ToString))

    '    For Each tScrapeItem As ScrapeItem In Args.ScrapeList
    '        Dim OldEpisodeTitle As String = String.Empty
    '        Dim NewEpisodeTitle As String = String.Empty

    '        Cancelled = False

    '        If bwTVEpisodeScraper.CancellationPending Then Exit For
    '        OldEpisodeTitle = tScrapeItem.DataRow.Item("Title").ToString
    '        bwTVEpisodeScraper.ReportProgress(1, OldEpisodeTitle)

    '        Dim dScrapeRow As DataRow = tScrapeItem.DataRow

    '        logger.Trace(String.Format("[TVEpisodeScraper] [Start] Scraping {0}", OldEpisodeTitle))

    '        DBScrapeEpisode = Master.DB.Load_TVEpisode(Convert.ToInt64(tScrapeItem.DataRow.Item("idEpisode")), True)
    '        'ModulesManager.Instance.RunGeneric(Enums.ModuleEventType.BeforeEdit_Movie, Nothing, DBScrapeMovie)

    '        If tScrapeItem.ScrapeModifiers.Episodes.Information Then
    '            bwTVEpisodeScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(253, "Scraping Data"), ":"))
    '            If Not Addons.Instance.ScrapeData_TVEpisode(DBScrapeEpisode, Args.ScrapeOptions, Args.ScrapeList.Count = 1) Then
    '                Cancelled = True
    '                If Args.ScrapeType = Enums.ScrapeType.SingleAuto OrElse Args.ScrapeType = Enums.ScrapeType.SingleField OrElse Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                    logger.Trace(String.Concat("Canceled scraping: ", OldEpisodeTitle))
    '                    bwTVEpisodeScraper.CancelAsync()
    '                End If
    '            End If
    '        Else
    '            ' if we do not have the episode ID we need to retrive it even if is just a Poster/Fanart/Trailer/Actors update
    '            If Not DBScrapeEpisode.MainDetails.UniqueIDsSpecified AndAlso (
    '                tScrapeItem.ScrapeModifiers.Actorthumbs Or
    '                tScrapeItem.ScrapeModifiers.Banner Or
    '                tScrapeItem.ScrapeModifiers.Characterart Or
    '                tScrapeItem.ScrapeModifiers.Clearart Or
    '                tScrapeItem.ScrapeModifiers.Clearlogo Or
    '                tScrapeItem.ScrapeModifiers.Extrafanarts Or
    '                tScrapeItem.ScrapeModifiers.Fanart Or
    '                tScrapeItem.ScrapeModifiers.Keyart Or
    '                tScrapeItem.ScrapeModifiers.Landscape Or
    '                tScrapeItem.ScrapeModifiers.Poster Or
    '                tScrapeItem.ScrapeModifiers.Theme) Then
    '                Dim tOpt As New Structures.ScrapeOptions 'all false value not to override any field
    '                If Not Addons.Instance.ScrapeData_TVEpisode(DBScrapeEpisode, tOpt, Args.ScrapeList.Count = 1) Then
    '                    Exit For
    '                End If
    '            End If
    '        End If

    '        If bwTVEpisodeScraper.CancellationPending Then Exit For

    '        If Not Cancelled Then
    '            If Master.eSettings.TVScraperMetaDataScan AndAlso tScrapeItem.ScrapeModifiers.Episodes.Metadata Then
    '                MediaInfo.UpdateTVMediaInfo(DBScrapeEpisode)
    '            End If
    '            If bwTVEpisodeScraper.CancellationPending Then Exit For

    '            NewEpisodeTitle = DBScrapeEpisode.MainDetails.Title

    '            If Not NewEpisodeTitle = OldEpisodeTitle Then
    '                bwTVEpisodeScraper.ReportProgress(0, String.Format(Master.eLang.GetString(812, "Old Title: {0} | New Title: {1}"), OldEpisodeTitle, NewEpisodeTitle))
    '            End If

    '            'get all images
    '            If tScrapeItem.ScrapeModifiers.Episodes.Fanart OrElse
    '                tScrapeItem.ScrapeModifiers.Episodes.Poster Then
    '                Dim SearchResultsContainer As New MediaContainers.SearchResultsContainer
    '                bwTVEpisodeScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(265, "Scraping Episode Images"), ":"))
    '                If Addons.Instance.ScrapeImage_TV(DBScrapeEpisode, SearchResultsContainer, tScrapeItem.ScrapeModifiers, Args.ScrapeList.Count = 1) Then
    '                    If Args.ScrapeType = Enums.ScrapeType.SingleScrape AndAlso Master.eSettings.TVImagesDisplayImageSelect Then
    '                        Using dImgSelect As New dlgImgSelect
    '                            If dImgSelect.ShowDialog(DBScrapeEpisode, SearchResultsContainer, tScrapeItem.ScrapeModifiers) = DialogResult.OK Then
    '                                Images.SetPreferredImages(DBScrapeEpisode, dImgSelect.Result)
    '                            End If
    '                        End Using
    '                    Else
    '                        'autoscraping
    '                        Images.SetPreferredImages(DBScrapeEpisode, SearchResultsContainer, tScrapeItem.ScrapeModifiers, IsAutoScraper:=True)
    '                    End If
    '                End If
    '            End If

    '            If bwTVEpisodeScraper.CancellationPending Then Exit For

    '            If Not (Args.ScrapeType = Enums.ScrapeType.SingleScrape) Then
    '                Addons.Instance.Run(Enums.AddonEventType.ScraperMulti_TVEpisode, Nothing, Nothing, False, DBScrapeEpisode)
    '                bwTVEpisodeScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":"))
    '                Master.DB.Save_TVEpisode(DBScrapeEpisode, False, tScrapeItem.ScrapeModifiers.Episodes.Information OrElse tScrapeItem.ScrapeModifiers.Episodes.Metadata, True, True, True)
    '                bwTVEpisodeScraper.ReportProgress(-2, DBScrapeEpisode.ID)
    '                bwTVEpisodeScraper.ReportProgress(-1, If(Not OldEpisodeTitle = NewEpisodeTitle, String.Format(Master.eLang.GetString(812, "Old Title: {0} | New Title: {1}"), OldEpisodeTitle, NewEpisodeTitle), NewEpisodeTitle))
    '            End If
    '        End If

    '        logger.Trace(String.Concat("Ended scraping: ", OldEpisodeTitle))
    '    Next

    '    e.Result = New Results With {.DBElement = DBScrapeEpisode, .ScrapeType = Args.ScrapeType, .Cancelled = bwTVEpisodeScraper.CancellationPending}
    '    logger.Trace("Ended EPISODE scrape")
    'End Sub

    'Private Sub Scraper_DoWork_TVSeason(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwTVSeasonScraper.DoWork
    '    Dim Args As Arguments = DirectCast(e.Argument, Arguments)
    '    Dim Cancelled As Boolean = False
    '    Dim DBScrapeSeason As New Database.DBElement(Enums.ContentType.TVSeason)

    '    logger.Trace(String.Format("[TVSeason Scraper] [Start] Seasons Count [{0}]", Args.ScrapeList.Count.ToString))

    '    For Each tScrapeItem As ScrapeItem In Args.ScrapeList
    '        Dim tURL As String = String.Empty

    '        Cancelled = False

    '        If bwTVSeasonScraper.CancellationPending Then Exit For

    '        Dim dScrapeRow As DataRow = tScrapeItem.DataRow

    '        DBScrapeSeason = Master.DB.Load_TVSeason(Convert.ToInt64(tScrapeItem.DataRow.Item("idSeason")), True, False)
    '        'ModulesManager.Instance.RunGeneric(Enums.ModuleEventType.BeforeEdit_Movie, Nothing, DBScrapeMovie)

    '        logger.Trace(String.Format("Start scraping: {0}: Season {1}", DBScrapeSeason.TVShowDetails.Title, DBScrapeSeason.MainDetails.Season))

    '        If tScrapeItem.ScrapeModifiers.Seasons.Information Then
    '            bwTVSeasonScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(253, "Scraping Data"), ":"))
    '            If Addons.Instance.ScrapeData_TVSeason(DBScrapeSeason, Args.ScrapeOptions, Args.ScrapeList.Count = 1) Then
    '                Cancelled = True
    '                If Args.ScrapeType = Enums.ScrapeType.SingleAuto OrElse Args.ScrapeType = Enums.ScrapeType.SingleField OrElse Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                    logger.Trace(String.Format("Canceled scraping: {0}: Season {1}", DBScrapeSeason.TVShowDetails.Title, DBScrapeSeason.MainDetails.Season))
    '                    bwTVSeasonScraper.CancelAsync()
    '                End If
    '            End If
    '        Else
    '            ' if we do not have the tvshow ID we need to retrive it even if is just a Poster/Fanart/Trailer/Actors update
    '            If Not DBScrapeSeason.MainDetails.UniqueIDsSpecified AndAlso (
    '                tScrapeItem.ScrapeModifiers.Seasons.Banner Or
    '                tScrapeItem.ScrapeModifiers.Seasons.Fanart Or
    '                tScrapeItem.ScrapeModifiers.Seasons.Landscape Or
    '                tScrapeItem.ScrapeModifiers.Seasons.Poster) Then
    '                Dim tOpt As New Structures.ScrapeOptions 'all false value not to override any field
    '                If Addons.Instance.ScrapeData_TVSeason(DBScrapeSeason, tOpt, Args.ScrapeList.Count = 1) Then
    '                    Exit For
    '                End If
    '            End If
    '        End If

    '        If bwTVSeasonScraper.CancellationPending Then Exit For

    '        If Not Cancelled Then
    '            'get all images
    '            If tScrapeItem.ScrapeModifiers.AllSeasonsBanner OrElse
    '                tScrapeItem.ScrapeModifiers.AllSeasonsFanart OrElse
    '                tScrapeItem.ScrapeModifiers.AllSeasonsLandscape OrElse
    '                tScrapeItem.ScrapeModifiers.AllSeasonsPoster OrElse
    '                tScrapeItem.ScrapeModifiers.Seasons.Banner OrElse
    '                tScrapeItem.ScrapeModifiers.Seasons.Fanart OrElse
    '                tScrapeItem.ScrapeModifiers.Seasons.Landscape OrElse
    '                tScrapeItem.ScrapeModifiers.Seasons.Poster Then

    '                Dim SearchResultsContainer As New MediaContainers.SearchResultsContainer
    '                bwTVSeasonScraper.ReportProgress(-3, "Scraping Season Images:")
    '                If Addons.Instance.ScrapeImage_TV(DBScrapeSeason, SearchResultsContainer, tScrapeItem.ScrapeModifiers, Args.ScrapeList.Count = 1) Then
    '                    If Args.ScrapeType = Enums.ScrapeType.SingleScrape AndAlso Master.eSettings.TVImagesDisplayImageSelect Then
    '                        Using dImgSelect As New dlgImgSelect
    '                            If dImgSelect.ShowDialog(DBScrapeSeason, SearchResultsContainer, tScrapeItem.ScrapeModifiers) = DialogResult.OK Then
    '                                Images.SetPreferredImages(DBScrapeSeason, dImgSelect.Result)
    '                            End If
    '                        End Using
    '                    Else
    '                        'autoscraping
    '                        Images.SetPreferredImages(DBScrapeSeason, SearchResultsContainer, tScrapeItem.ScrapeModifiers, IsAutoScraper:=True)
    '                    End If
    '                End If
    '            End If

    '            If bwTVSeasonScraper.CancellationPending Then Exit For

    '            If Not (Args.ScrapeType = Enums.ScrapeType.SingleScrape) Then
    '                Addons.Instance.Run(Enums.AddonEventType.ScraperMulti_TVSeason, Nothing, Nothing, False, DBScrapeSeason)
    '                bwTVSeasonScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":"))
    '                Master.DB.Save_TVSeason(DBScrapeSeason, False, True, True)
    '                bwTVSeasonScraper.ReportProgress(-2, DBScrapeSeason.ID)
    '            End If
    '        End If

    '        logger.Trace(String.Format("Ended scraping: {0}: Season {1}", DBScrapeSeason.TVShowDetails.Title, DBScrapeSeason.MainDetails.Season))
    '    Next

    '    e.Result = New Results With {.DBElement = DBScrapeSeason, .ScrapeType = Args.ScrapeType, .Cancelled = bwTVSeasonScraper.CancellationPending}
    '    logger.Trace("Ended TV Season scrape")
    'End Sub

    'Private Sub Scraper_DoWork_TVShow(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwTVScraper.DoWork
    '    Dim Args As Arguments = DirectCast(e.Argument, Arguments)
    '    Dim Cancelled As Boolean = False
    '    Dim DBScrapeShow As New Database.DBElement(Enums.ContentType.TVShow)

    '    logger.Trace(String.Format("[TVScraper] [Start] TV Shows Count [{0}]", Args.ScrapeList.Count.ToString))

    '    For Each tScrapeItem As ScrapeItem In Args.ScrapeList
    '        Dim Theme As New MediaContainers.MediaFile
    '        Dim tURL As String = String.Empty
    '        Dim OldTitle As String = String.Empty
    '        Dim NewTitle As String = String.Empty

    '        Cancelled = False

    '        If bwTVScraper.CancellationPending Then Exit For
    '        OldTitle = tScrapeItem.DataRow.Item("ListTitle").ToString
    '        bwTVScraper.ReportProgress(1, OldTitle)

    '        Dim dScrapeRow As DataRow = tScrapeItem.DataRow

    '        logger.Trace(String.Format("[TVScraper] [Start] Scraping {0}", OldTitle))

    '        DBScrapeShow = Master.DB.Load_TVShow_Full(Convert.ToInt64(tScrapeItem.DataRow.Item("idShow")))
    '        'ModulesManager.Instance.RunGeneric(Enums.ModuleEventType.BeforeEdit_Movie, Nothing, DBScrapeMovie)

    '        If (tScrapeItem.ScrapeModifiers.Information OrElse
    '            (tScrapeItem.ScrapeModifiers.withEpisodes AndAlso tScrapeItem.ScrapeModifiers.Episodes.Information) OrElse
    '            (tScrapeItem.ScrapeModifiers.withSeasons AndAlso tScrapeItem.ScrapeModifiers.Seasons.Information)) Then
    '            bwTVScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(253, "Scraping Data"), ":"))
    '            If Not Addons.Instance.ScrapeData_TVShow(DBScrapeShow, tScrapeItem.ScrapeModifiers, Args.ScrapeType, Args.ScrapeOptions, Args.ScrapeList.Count = 1) Then
    '                Cancelled = True
    '                If Args.ScrapeType = Enums.ScrapeType.SingleAuto OrElse Args.ScrapeType = Enums.ScrapeType.SingleField OrElse Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                    logger.Trace(String.Concat("Canceled scraping: ", OldTitle))
    '                    bwTVScraper.CancelAsync()
    '                End If
    '            End If
    '        Else
    '            ' if we do not have the tvshow ID we need to retrive it even if is just a Poster/Fanart/Trailer/Actors update
    '            If Not DBScrapeShow.TVShowDetails.UniqueIDsSpecified AndAlso (
    '                tScrapeItem.ScrapeModifiers.Actorthumbs Or
    '                tScrapeItem.ScrapeModifiers.Banner Or
    '                tScrapeItem.ScrapeModifiers.Characterart Or
    '                tScrapeItem.ScrapeModifiers.Clearart Or
    '                tScrapeItem.ScrapeModifiers.Clearlogo Or
    '                tScrapeItem.ScrapeModifiers.Extrafanarts Or
    '                tScrapeItem.ScrapeModifiers.Fanart Or
    '                tScrapeItem.ScrapeModifiers.Keyart Or
    '                tScrapeItem.ScrapeModifiers.Landscape Or
    '                tScrapeItem.ScrapeModifiers.Poster Or
    '                tScrapeItem.ScrapeModifiers.Theme) Then
    '                Dim tOpt As New Structures.ScrapeOptions 'all false value not to override any field
    '                If Not Addons.Instance.ScrapeData_TVShow(DBScrapeShow, tScrapeItem.ScrapeModifiers, Args.ScrapeType, tOpt, Args.ScrapeList.Count = 1) Then
    '                    Exit For
    '                End If
    '            End If
    '        End If

    '        If bwTVScraper.CancellationPending Then Exit For

    '        If Not Cancelled Then
    '            NewTitle = DBScrapeShow.TVShowDetails.Title

    '            If Not NewTitle = OldTitle Then
    '                bwTVScraper.ReportProgress(0, String.Format(Master.eLang.GetString(812, "Old Title: {0} | New Title: {1}"), OldTitle, NewTitle))
    '            End If

    '            'get all images
    '            Dim SearchResultsContainer As New MediaContainers.SearchResultsContainer
    '            bwTVScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(254, "Scraping Images"), ":"))
    '            If Addons.Instance.ScrapeImage_TV(DBScrapeShow, SearchResultsContainer, tScrapeItem.ScrapeModifiers, Args.ScrapeList.Count = 1) Then
    '                If Args.ScrapeType = Enums.ScrapeType.SingleScrape AndAlso Master.eSettings.TVImagesDisplayImageSelect Then
    '                    Using dImgSelect As New dlgImgSelect
    '                        If dImgSelect.ShowDialog(DBScrapeShow, SearchResultsContainer, tScrapeItem.ScrapeModifiers) = DialogResult.OK Then
    '                            Images.SetPreferredImages(DBScrapeShow, dImgSelect.Result)
    '                        End If
    '                    End Using
    '                Else
    '                    'autoscraping
    '                    Images.SetPreferredImages(DBScrapeShow, SearchResultsContainer, tScrapeItem.ScrapeModifiers, IsAutoScraper:=True)
    '                End If
    '            End If

    '            If bwTVScraper.CancellationPending Then Exit For

    '            'Theme
    '            If tScrapeItem.ScrapeModifiers.Theme Then
    '                bwTVScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(266, "Scraping Themes"), ":"))
    '                Dim SearchResults As New List(Of MediaContainers.MediaFile)
    '                If Addons.Instance.ScrapeTheme_TVShow(DBScrapeShow, Enums.ModifierType.MainTheme, SearchResults) Then
    '                    If Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                        Using dThemeSelect As New dlgMediaFileSelect(Enums.ModifierType.MainTheme, True)
    '                            If dThemeSelect.ShowDialog(DBScrapeShow, SearchResults) = DialogResult.OK Then
    '                                DBScrapeShow.Theme = dThemeSelect.Result
    '                            End If
    '                        End Using

    '                        'autoscraping
    '                    ElseIf Not Args.ScrapeType = Enums.ScrapeType.SingleScrape Then
    '                        Dim newPreferredTheme As New MediaContainers.MediaFile
    '                        If MediaFiles.GetPreferredTheme(SearchResults, newPreferredTheme, DBScrapeShow.ContentType) Then
    '                            DBScrapeShow.Theme = newPreferredTheme
    '                        End If
    '                    End If
    '                End If
    '            End If

    '            If bwTVScraper.CancellationPending Then Exit For

    '            'Episode Meta Data
    '            If tScrapeItem.ScrapeModifiers.withEpisodes AndAlso tScrapeItem.ScrapeModifiers.Episodes.Metadata AndAlso Master.eSettings.TVScraperMetaDataScan Then
    '                bwTVScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(140, "Scanning Meta Data"), ":"))
    '                For Each tEpisode In DBScrapeShow.Episodes.Where(Function(f) f.FilenameSpecified)
    '                    MediaInfo.UpdateTVMediaInfo(tEpisode)
    '                Next
    '            End If

    '            If Not (Args.ScrapeType = Enums.ScrapeType.SingleScrape) Then
    '                Addons.Instance.Run(Enums.AddonEventType.ScraperMulti_TVShow, Nothing, Nothing, False, DBScrapeShow)
    '                bwTVScraper.ReportProgress(-3, String.Concat(Master.eLang.GetString(399, "Downloading and Saving Contents into Database"), ":"))
    '                Master.DB.Save_TVShow(DBScrapeShow, False, tScrapeItem.ScrapeModifiers.Information OrElse tScrapeItem.ScrapeModifiers.Metadata, True, tScrapeItem.ScrapeModifiers.withEpisodes)
    '                bwTVScraper.ReportProgress(-2, DBScrapeShow.ID)
    '                bwTVScraper.ReportProgress(-1, If(Not OldTitle = NewTitle, String.Format(Master.eLang.GetString(812, "Old Title: {0} | New Title: {1}"), OldTitle, NewTitle), NewTitle))
    '            End If
    '        End If

    '        logger.Trace(String.Concat("Ended scraping: ", OldTitle))
    '    Next

    '    e.Result = New Results With {.DBElement = DBScrapeShow, .ScrapeType = Args.ScrapeType, .Cancelled = bwTVScraper.CancellationPending}
    '    logger.Trace("Ended TV SHOW scrape")
    'End Sub

    Private Sub Scraper_ProgressChanged_Movie(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwMovieScraper.ProgressChanged
        If e.ProgressPercentage = -1 Then
            Notifications.NewNotification(Notifications.Type.Scraped_Movie, e.UserState.ToString)
        ElseIf e.ProgressPercentage = -2 Then
            DataGridView_Row_Update_Movie(CLng(e.UserState))
        ElseIf e.ProgressPercentage = -3 Then
            tslLoading.Text = e.UserState.ToString
        Else
            tspbLoading.Value += e.ProgressPercentage
            SetStatus(e.UserState.ToString)
        End If
    End Sub

    Private Sub Scraper_ProgressChanged_Movieset(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwMovieSetScraper.ProgressChanged
        If e.ProgressPercentage = -1 Then
            Notifications.NewNotification(Notifications.Type.Scraped_Movieset, e.UserState.ToString)
        ElseIf e.ProgressPercentage = -2 Then
            DataGridView_Row_Update_Movieset(CLng(e.UserState))
        ElseIf e.ProgressPercentage = -3 Then
            tslLoading.Text = e.UserState.ToString
        Else
            tspbLoading.Value += e.ProgressPercentage
            SetStatus(e.UserState.ToString)
        End If
    End Sub

    Private Sub Scraper_ProgressChanged_TVEpisode(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwTVEpisodeScraper.ProgressChanged
        If e.ProgressPercentage = -1 Then
            Notifications.NewNotification(Notifications.Type.Scraped_TVEpisode, e.UserState.ToString)
        ElseIf e.ProgressPercentage = -2 Then
            DataGridView_Row_Update_TVEpisode(CLng(e.UserState))
        ElseIf e.ProgressPercentage = -3 Then
            tslLoading.Text = e.UserState.ToString
        Else
            tspbLoading.Value += e.ProgressPercentage
            SetStatus(e.UserState.ToString)
        End If
    End Sub

    Private Sub Scraper_ProgressChanged_TVSeason(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwTVSeasonScraper.ProgressChanged
        If e.ProgressPercentage = -1 Then
            Notifications.NewNotification(Notifications.Type.Scraped_TVSeason, e.UserState.ToString)
        ElseIf e.ProgressPercentage = -2 Then
            DataGridView_Row_Update_TVSeason(CLng(e.UserState))
        ElseIf e.ProgressPercentage = -3 Then
            tslLoading.Text = e.UserState.ToString
        Else
            tspbLoading.Value += e.ProgressPercentage
            SetStatus(e.UserState.ToString)
        End If
    End Sub

    Private Sub Scraper_ProgressChanged_TVShow(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwTVScraper.ProgressChanged
        If e.ProgressPercentage = -1 Then
            Notifications.NewNotification(Notifications.Type.Scraped_TVShow, e.UserState.ToString)
        ElseIf e.ProgressPercentage = -2 Then
            DataGridView_Row_Update_TVShow(CLng(e.UserState))
        ElseIf e.ProgressPercentage = -3 Then
            tslLoading.Text = e.UserState.ToString
        Else
            tspbLoading.Value += e.ProgressPercentage
            SetStatus(e.UserState.ToString)
        End If
    End Sub

    Private Sub Scraper_RunWorkerCompleted_Movie(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwMovieScraper.RunWorkerCompleted
        Dim Res As Results = DirectCast(e.Result, Results)

        If Res.ScrapeType = Enums.ScrapeType.Manually AndAlso Not Res.Cancelled Then
            Scraper_Finishing_Movie(Res.DBElement)
        ElseIf Res.Cancelled Then
            'Reload last partially scraped Movie from disk to get clean informations in DB
            ReloadContent_Movie(Res.DBElement.ID, False, True)
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        Else
            DataGridView_FillList_Main(False, True, False)
            If dgvMovies.SelectedRows.Count > 0 Then
                DataGridView_Row_Select_Movie(dgvMovies.SelectedRows(0).Index)
            Else
                InfoScreen_Clear()
            End If
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub Scraper_RunWorkerCompleted_Movieset(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwMovieSetScraper.RunWorkerCompleted
        Dim Res As Results = DirectCast(e.Result, Results)

        If Res.ScrapeType = Enums.ScrapeType.Manually AndAlso Not Res.Cancelled Then
            Scraper_Finishing_Movieset(Res.DBElement)
        ElseIf Res.Cancelled Then
            'Reload last partially scraped MovieSet from disk to get clean informations in DB
            ReloadContent_Movieset(Res.DBElement.ID)
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        Else
            If dgvMovieSets.SelectedRows.Count > 0 Then
                DataGridView_Row_Select_Movieset(dgvMovieSets.SelectedRows(0).Index)
            Else
                InfoScreen_Clear()
            End If
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub Scraper_RunWorkerCompleted_TVEpisode(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwTVEpisodeScraper.RunWorkerCompleted
        Dim Res As Results = DirectCast(e.Result, Results)

        If Res.ScrapeType = Enums.ScrapeType.Manually AndAlso Not Res.Cancelled Then
            Scraper_Finishing_TVEpisode(Res.DBElement)
        ElseIf Res.Cancelled Then
            'Reload last partially scraped Episode from disk to get clean informations in DB
            ReloadContent_TVEpisode(Res.DBElement.ID, False, True)
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        Else
            If dgvTVEpisodes.SelectedRows.Count > 0 Then
                DataGridView_Row_Select_TVEpisode(dgvTVShows.SelectedRows(0).Index)
            Else
                InfoScreen_Clear()
            End If
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub Scraper_RunWorkerCompleted_TVSeason(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwTVSeasonScraper.RunWorkerCompleted
        Dim Res As Results = DirectCast(e.Result, Results)

        If Res.ScrapeType = Enums.ScrapeType.Manually AndAlso Not Res.Cancelled Then
            Scraper_Finishing_TVSeason(Res.DBElement)
        ElseIf Res.Cancelled Then
            'Reload last partially scraped TVSeason from disk to get clean informations in DB
            ReloadContent_TVSeason(Res.DBElement.ID, False, True, False)
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        Else
            If dgvTVSeasons.SelectedRows.Count > 0 Then
                DataGridView_Row_Select_TVSeason(dgvTVSeasons.SelectedRows(0).Index)
            Else
                InfoScreen_Clear()
            End If
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub Scraper_RunWorkerCompleted_TVShow(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwTVScraper.RunWorkerCompleted
        Dim Res As Results = DirectCast(e.Result, Results)

        If Res.ScrapeType = Enums.ScrapeType.Manually AndAlso Not Res.Cancelled Then
            Scraper_Finishing_TVShow(Res.DBElement)
        ElseIf Res.Cancelled Then
            'Reload last partially scraped TVShow from disk to get clean informations in DB
            ReloadContent_TVShow(Res.DBElement.ID, False, True, True)
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        Else
            If dgvTVShows.SelectedRows.Count > 0 Then
                DataGridView_Row_Select_TVShow(dgvTVShows.SelectedRows(0).Index)
            Else
                InfoScreen_Clear()
            End If
            tslLoading.Visible = False
            tspbLoading.Visible = False
            btnCancel.Visible = False
            lblCanceling.Visible = False
            prbCanceling.Visible = False
            pnlCancel.Visible = False
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub Scraper_Finishing_Movie(ByRef DBMovie As Database.DBElement)
        If Not String.IsNullOrEmpty(DBMovie.MainDetails.Title) Then
            tslLoading.Text = Master.eLang.GetString(576, "Verifying Movie Details:")
            Application.DoEvents()

            Edit_Movie(DBMovie, Enums.AddonEventType.ScraperSingle_Movie)
        End If

        pnlCancel.Visible = False
        tslLoading.Visible = False
        tspbLoading.Visible = False
        SetStatus(String.Empty)
        SetControlsEnabled(True)
        Filter_Enable_Movie(True)
    End Sub

    Private Sub Scraper_Finishing_Movieset(ByRef DBMovieSet As Database.DBElement)
        If DBMovieSet.MainDetails.TitleSpecified Then
            tslLoading.Text = Master.eLang.GetString(1205, "Verifying MovieSet Details:")
            Application.DoEvents()
            Edit_MovieSet(DBMovieSet)
        End If

        pnlCancel.Visible = False
        tslLoading.Visible = False
        tspbLoading.Visible = False
        SetStatus(String.Empty)
        SetControlsEnabled(True)
        Filter_Enable_Movieset(True)
    End Sub

    Private Sub Scraper_Finishing_TVEpisode(ByRef DBTVEpisode As Database.DBElement)
        If Not String.IsNullOrEmpty(DBTVEpisode.MainDetails.Title) Then
            tslLoading.Text = Master.eLang.GetString(762, "Verifying TV Episode Details:")
            Application.DoEvents()
            Edit_TVEpisode(DBTVEpisode, Enums.AddonEventType.ScraperSingle_TVEpisode)
        End If

        pnlCancel.Visible = False
        tslLoading.Visible = False
        tspbLoading.Visible = False
        SetStatus(String.Empty)
        SetControlsEnabled(True)
        Filter_Enable_TVShow(True)
    End Sub

    Private Sub Scraper_Finishing_TVSeason(ByRef DBTVSeason As Database.DBElement)
        If DBTVSeason.MainDetails.TitleSpecified Then
            tslLoading.Text = Master.eLang.GetString(80, "Verifying TV Season Details:")
            Application.DoEvents()
            Edit_TVSeason(DBTVSeason, Enums.AddonEventType.ScraperSingle_TVSeason)
        End If

        pnlCancel.Visible = False
        tslLoading.Visible = False
        tspbLoading.Visible = False
        SetStatus(String.Empty)
        SetControlsEnabled(True)
        Filter_Enable_TVShow(True)
    End Sub

    Private Sub Scraper_Finishing_TVShow(ByRef DBTVShow As Database.DBElement)
        If DBTVShow.MainDetails.TitleSpecified Then
            tslLoading.Text = Master.eLang.GetString(761, "Verifying TV Show Details:")
            Application.DoEvents()
            Edit_TVShow(DBTVShow, Enums.AddonEventType.ScraperSingle_TVShow)
        End If

        pnlCancel.Visible = False
        tslLoading.Visible = False
        tspbLoading.Visible = False
        SetStatus(String.Empty)
        SetControlsEnabled(True)
        Filter_Enable_TVShow(True)
    End Sub

    Sub Settings_HideLoadingDialog()
        If Not pnlLoadSettings.InvokeRequired Then
            pnlLoadSettings.Visible = False
        End If
    End Sub
    ''' <summary>
    ''' Triggers the display of the Settings dialog
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub Settings_ShowDialog()
        While Addons.Instance.QueryAnyAddonIsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(50)
        End While

        Using dSettings As New dlgSettings
            Invoke(New Delegate_SettingsDialog(AddressOf Settings_ShowDialog), dSettings)
        End Using
    End Sub
    ''' <summary>
    ''' Display the settings dialog (passed as parameter) and process the results.
    ''' </summary>
    ''' <param name="dlg"></param>
    ''' <remarks></remarks>
    Private Sub Settings_ShowDialog(ByVal dlg As dlgSettings)
        AddHandler dlg.LoadEnd, AddressOf Settings_HideLoadingDialog
        Dim dresult As Structures.SettingsResult = dlg.ShowDialog()
        RemoveHandler dlg.LoadEnd, AddressOf Settings_HideLoadingDialog
        mnuMainEditSettings.Enabled = True
        pnlLoadSettings.Visible = False
        cmnuTraySettings.Enabled = True
        cmnuTrayExit.Enabled = True

        'set all lists back to default before run "FillList"
        currList_Movies = "movielist"
        currList_Moviesets = "moviesetlist"
        currList_TVShows = "tvshowlist"

        If Not dresult.DidCancel Then

            Setup(True)

            'TODO: make it more generic
            If dgvMovies.RowCount > 0 Then
                dgvMovies.Columns("BannerPath").Visible = Not DataGridView_CheckColumnHide_Movie("BannerPath")
                dgvMovies.Columns("ClearArtPath").Visible = Not DataGridView_CheckColumnHide_Movie("ClearArtPath")
                dgvMovies.Columns("ClearLogoPath").Visible = Not DataGridView_CheckColumnHide_Movie("ClearLogoPath")
                dgvMovies.Columns("DiscArtPath").Visible = Not DataGridView_CheckColumnHide_Movie("DiscArtPath")
                dgvMovies.Columns("EFanartsPath").Visible = Not DataGridView_CheckColumnHide_Movie("EFanartsPath")
                dgvMovies.Columns("EThumbsPath").Visible = Not DataGridView_CheckColumnHide_Movie("EThumbsPath")
                dgvMovies.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_Movie("FanartPath")
                dgvMovies.Columns("HasSet").Visible = Not DataGridView_CheckColumnHide_Movie("HasSet")
                dgvMovies.Columns("HasSub").Visible = Not DataGridView_CheckColumnHide_Movie("HasSub")
                dgvMovies.Columns("iLastPlayed").Visible = Not DataGridView_CheckColumnHide_Movie("iLastPlayed")
                dgvMovies.Columns("Imdb").Visible = Not DataGridView_CheckColumnHide_Movie("Imdb")
                dgvMovies.Columns("LandscapePath").Visible = Not DataGridView_CheckColumnHide_Movie("LandscapePath")
                dgvMovies.Columns("MPAA").Visible = Not DataGridView_CheckColumnHide_Movie("MPAA")
                dgvMovies.Columns("NfoPath").Visible = Not DataGridView_CheckColumnHide_Movie("NfoPath")
                dgvMovies.Columns("OriginalTitle").Visible = Not DataGridView_CheckColumnHide_Movie("OriginalTitle")
                dgvMovies.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_Movie("PosterPath")
                dgvMovies.Columns("Rating").Visible = Not DataGridView_CheckColumnHide_Movie("Rating")
                dgvMovies.Columns("ThemePath").Visible = Not DataGridView_CheckColumnHide_Movie("ThemePath")
                dgvMovies.Columns("TMDB").Visible = Not DataGridView_CheckColumnHide_Movie("TMDB")
                dgvMovies.Columns("TrailerPath").Visible = Not DataGridView_CheckColumnHide_Movie("TrailerPath")
                dgvMovies.Columns("Year").Visible = Not DataGridView_CheckColumnHide_Movie("Year")
            End If

            If dgvMovieSets.RowCount > 0 Then
                dgvMovieSets.Columns("BannerPath").Visible = Not DataGridView_CheckColumnHide_Movieset("BannerPath")
                dgvMovieSets.Columns("ClearArtPath").Visible = Not DataGridView_CheckColumnHide_Movieset("ClearArtPath")
                dgvMovieSets.Columns("ClearLogoPath").Visible = Not DataGridView_CheckColumnHide_Movieset("ClearLogoPath")
                dgvMovieSets.Columns("DiscArtPath").Visible = Not DataGridView_CheckColumnHide_Movieset("DiscArtPath")
                dgvMovieSets.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_Movieset("FanartPath")
                dgvMovieSets.Columns("LandscapePath").Visible = Not DataGridView_CheckColumnHide_Movieset("LandscapePath")
                dgvMovieSets.Columns("NfoPath").Visible = Not DataGridView_CheckColumnHide_Movieset("NfoPath")
                dgvMovieSets.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_Movieset("PosterPath")
            End If

            If dgvTVShows.RowCount > 0 Then
                dgvTVShows.Columns("BannerPath").Visible = Not DataGridView_CheckColumnHide_TVShow("BannerPath")
                dgvTVShows.Columns("CharacterArtPath").Visible = Not DataGridView_CheckColumnHide_TVShow("CharacterArtPath")
                dgvTVShows.Columns("ClearArtPath").Visible = Not DataGridView_CheckColumnHide_TVShow("ClearArtPath")
                dgvTVShows.Columns("ClearLogoPath").Visible = Not DataGridView_CheckColumnHide_TVShow("ClearLogoPath")
                dgvTVShows.Columns("EFanartsPath").Visible = Not DataGridView_CheckColumnHide_TVShow("EFanartsPath")
                dgvTVShows.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_TVShow("FanartPath")
                dgvTVShows.Columns("LandscapePath").Visible = Not DataGridView_CheckColumnHide_TVShow("LandscapePath")
                dgvTVShows.Columns("NfoPath").Visible = Not DataGridView_CheckColumnHide_TVShow("NfoPath")
                dgvTVShows.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_TVShow("PosterPath")
                dgvTVShows.Columns("Status").Visible = Not DataGridView_CheckColumnHide_TVShow("Status")
                dgvTVShows.Columns("ThemePath").Visible = Not DataGridView_CheckColumnHide_TVShow("ThemePath")
            End If

            If dgvTVSeasons.RowCount > 0 Then
                dgvTVSeasons.Columns("BannerPath").Visible = Not DataGridView_CheckColumnHide_TVSeason("BannerPath")
                dgvTVSeasons.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_TVSeason("FanartPath")
                dgvTVSeasons.Columns("LandscapePath").Visible = Not DataGridView_CheckColumnHide_TVSeason("LandscapePath")
                dgvTVSeasons.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_TVSeason("PosterPath")
            End If

            If dgvTVEpisodes.RowCount > 0 Then
                dgvTVEpisodes.Columns("FanartPath").Visible = Not DataGridView_CheckColumnHide_TVEpisode("FanartPath")
                dgvTVEpisodes.Columns("PosterPath").Visible = Not DataGridView_CheckColumnHide_TVEpisode("PosterPath")
                dgvTVEpisodes.Columns("HasSub").Visible = Not DataGridView_CheckColumnHide_TVEpisode("HasSub")
                dgvTVEpisodes.Columns("Playcount").Visible = Not DataGridView_CheckColumnHide_TVEpisode("Playcount")
            End If

            'might as well wait for these
            While bwDownloadPic.IsBusy
                Application.DoEvents()
                Threading.Thread.Sleep(50)
            End While

            If dresult.AnythingToDo Then
                If dresult.NeedsDBClean_Movie OrElse dresult.NeedsDBClean_TV Then
                    If MessageBox.Show(String.Format(Master.eLang.GetString(1007, "You've changed a setting that makes it necessary that the database is cleaned up. Please make sure that all sources are available!{0}{0}Should the process be continued?"), Environment.NewLine), Master.eLang.GetString(356, "Warning"), MessageBoxButtons.YesNo, MessageBoxIcon.Warning) = DialogResult.Yes Then
                        While bwLoadImages_Movie.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwReload_Movies.IsBusy OrElse
                            bwLoadImages_Movieset.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse
                            bwLoadImages_TVEpisode.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwReload_TVShows.IsBusy OrElse bwCleanDB.IsBusy
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                        'it's not necessary to clean the DB if we clean it anyway after DB update
                        Dim DBCleaner As New Scanner.ScanOrCleanOptions With {
                            .Movies = dresult.NeedsDBClean_Movie AndAlso Not (dresult.NeedsDBUpdate_Movie.Count > 0 AndAlso Master.eSettings.MovieCleanDB),
                            .TV = dresult.NeedsDBClean_TV AndAlso Not (dresult.NeedsDBUpdate_TV.Count > 0 AndAlso Master.eSettings.TVCleanDB)
                        }
                        Database_Clean(DBCleaner)
                    End If
                End If

                If dresult.NeedsReload_Movie Then
                    If Not fScanner.IsBusy Then
                        While bwLoadImages_Movie.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwReload_Movies.IsBusy OrElse
                            bwLoadImages_Movieset.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse
                            bwLoadImages_TVEpisode.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwReload_TVShows.IsBusy OrElse bwCleanDB.IsBusy
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                        ReloadContent_All_Movie()
                    End If
                End If
                If dresult.NeedsReload_Movieset Then
                    If Not fScanner.IsBusy Then
                        While bwLoadImages_Movie.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwReload_Movies.IsBusy OrElse
                            bwLoadImages_Movieset.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse
                            bwLoadImages_TVEpisode.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwReload_TVShows.IsBusy OrElse bwCleanDB.IsBusy
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                        ReloadContent_All_Movieset()
                    End If
                End If
                If dresult.NeedsReload_TVEpisode OrElse dresult.NeedsReload_TVShow Then
                    If Not fScanner.IsBusy Then
                        While bwLoadImages_Movie.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwReload_Movies.IsBusy OrElse
                            bwLoadImages_Movieset.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse
                            bwLoadImages_TVEpisode.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwReload_TVShows.IsBusy OrElse bwCleanDB.IsBusy
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                        ReloadContent_All_TVShow(dresult.NeedsReload_TVEpisode)
                    End If
                End If
                If dresult.NeedsDBUpdate_Movie.Count > 0 Then
                    If dresult.NeedsDBUpdate_Movie.Contains(-1) Then
                        fTaskManager.AddTask(New TaskManager.TaskItem(TaskManager.TaskItem.TaskType.Scan) With {
                                             .ScanOrCleanOptions = New Scanner.ScanOrCleanOptions With {.Movies = True}
                                             })
                    Else
                        fTaskManager.AddTask(New TaskManager.TaskItem(TaskManager.TaskItem.TaskType.Scan) With {
                                             .ListOfID = dresult.NeedsDBUpdate_Movie,
                                             .ScanOrCleanOptions = New Scanner.ScanOrCleanOptions With {.Movies = True}
                                             })
                    End If
                End If
                If dresult.NeedsDBUpdate_TV.Count > 0 Then
                    If dresult.NeedsDBUpdate_TV.Contains(-1) Then
                        fTaskManager.AddTask(New TaskManager.TaskItem(TaskManager.TaskItem.TaskType.Scan) With {
                                             .ScanOrCleanOptions = New Scanner.ScanOrCleanOptions With {.TV = True}
                                             })
                    Else
                        fTaskManager.AddTask(New TaskManager.TaskItem(TaskManager.TaskItem.TaskType.Scan) With {
                                             .ListOfID = dresult.NeedsDBUpdate_TV,
                                             .ScanOrCleanOptions = New Scanner.ScanOrCleanOptions With {.TV = True}
                                             })
                    End If
                End If
            End If

            If Not fScanner.IsBusy AndAlso Not bwLoadImages_Movie.IsBusy AndAlso Not bwMovieScraper.IsBusy AndAlso Not bwReload_Movies.IsBusy AndAlso
                    Not bwLoadImages_Movieset.IsBusy AndAlso Not bwMovieSetScraper.IsBusy AndAlso Not bwReload_MovieSets.IsBusy AndAlso
                    Not bwLoadImages_TVEpisode.IsBusy AndAlso Not bwLoadImages_TVSeason.IsBusy AndAlso Not bwLoadImages_TVShow.IsBusy AndAlso Not bwReload_TVShows.IsBusy AndAlso Not bwCleanDB.IsBusy Then
                DataGridView_FillList_Main(True, False, False) ' only doing movies for now
            End If

            SetMenus(True)

            If dresult.NeedsRestart Then
                While bwLoadImages_Movie.IsBusy OrElse bwMovieScraper.IsBusy OrElse bwReload_Movies.IsBusy OrElse
                    bwLoadImages_Movieset.IsBusy OrElse bwMovieSetScraper.IsBusy OrElse bwReload_MovieSets.IsBusy OrElse
                    bwLoadImages_TVEpisode.IsBusy OrElse bwLoadImages_TVSeason.IsBusy OrElse bwLoadImages_TVShow.IsBusy OrElse bwReload_TVShows.IsBusy OrElse bwCleanDB.IsBusy
                    Application.DoEvents()
                    Threading.Thread.Sleep(50)
                End While
                Dim dRestart As New dlgRestart
                If dRestart.ShowDialog = DialogResult.OK Then
                    Application.Restart()
                End If
            End If
        Else
            SetMenus(False)
            SetControlsEnabled(True)
        End If
    End Sub

    Private Sub TagManager_Click(sender As Object, e As EventArgs) Handles mnuMainToolsTagManager.Click
        SetControlsEnabled(False)
        Using dTagManager As New dlgTagManager
            dTagManager.ShowDialog()
        End Using
        SetControlsEnabled(True)
    End Sub

    Private Sub TaskManager_CreateTask(ByVal tContentType As Enums.ContentType, ByVal tSelectionType As Enums.SelectionType, ByVal tTaskType As TaskManager.TaskItem.TaskType, ByVal bBooleanValue As Boolean, ByVal strStringValue As String)
        Dim lItemsToChange As New List(Of Long)
        Dim nDataGridView As DataGridView = Nothing
        Dim strIDName As String = String.Empty

        Select Case tContentType
            Case Enums.ContentType.Movie
                nDataGridView = dgvMovies
                strIDName = "idMovie"
            Case Enums.ContentType.Movieset
                nDataGridView = dgvMovieSets
                strIDName = "idSet"
            Case Enums.ContentType.TVEpisode
                nDataGridView = dgvTVEpisodes
                strIDName = "idEpisode"
            Case Enums.ContentType.TVSeason
                nDataGridView = dgvTVSeasons
                strIDName = "idSeason"
            Case Enums.ContentType.TVShow, Enums.ContentType.TV
                nDataGridView = dgvTVShows
                strIDName = "idShow"
        End Select

        If nDataGridView IsNot Nothing AndAlso Not String.IsNullOrEmpty(strIDName) Then
            Select Case tSelectionType
                Case Enums.SelectionType.All
                    If nDataGridView.Rows.Count > 0 Then
                        For Each sRow As DataGridViewRow In nDataGridView.Rows
                            lItemsToChange.Add(Convert.ToInt64(sRow.Cells(strIDName).Value))
                        Next

                        fTaskManager.AddTask(New TaskManager.TaskItem(tTaskType) With {
                                             .CommonBooleanValue = bBooleanValue,
                                             .CommonStringValue = strStringValue,
                                             .ListOfID = lItemsToChange,
                                             .ContentType = tContentType
                                             })
                    End If

                Case Enums.SelectionType.Selected
                    If nDataGridView.SelectedRows.Count > 0 Then
                        For Each sRow As DataGridViewRow In nDataGridView.SelectedRows
                            lItemsToChange.Add(Convert.ToInt64(sRow.Cells(strIDName).Value))
                        Next

                        fTaskManager.AddTask(New TaskManager.TaskItem(tTaskType) With {
                                             .CommonBooleanValue = bBooleanValue,
                                             .CommonStringValue = strStringValue,
                                             .ListOfID = lItemsToChange,
                                             .ContentType = tContentType
                                             })
                    End If
            End Select
        End If
    End Sub

    Private Sub TaskManager_ProgressChanged(ByVal progressValue As TaskManager.ProgressValue)
        Select Case progressValue.EventType

            Case Enums.TaskManagerEventType.RefreshRow
                Select Case progressValue.ContentType
                    Case Enums.ContentType.Movie
                        DataGridView_Row_Update_Movie(progressValue.ID)
                    Case Enums.ContentType.Movieset
                        DataGridView_Row_Update_Movieset(progressValue.ID)
                    Case Enums.ContentType.TVEpisode
                        DataGridView_Row_Update_TVEpisode(progressValue.ID)
                    Case Enums.ContentType.TVSeason
                        DataGridView_Row_Update_TVSeason(progressValue.ID)
                    Case Enums.ContentType.TVShow
                        DataGridView_Row_Update_TVShow(progressValue.ID)
                End Select

            Case Enums.TaskManagerEventType.SimpleMessage
                SetStatus(progressValue.Message)
                'tspbLoading.Value = e.ProgressPercentage

            Case Enums.TaskManagerEventType.TaskManagerEnded
                ChangeToolStripLabel(tslLoading, False, String.Empty)
                ChangeToolStripProgressBar(tspbLoading, False, 0, 0, 0, ProgressBarStyle.Marquee)

            Case Enums.TaskManagerEventType.TaskManagerStarted
                ChangeToolStripLabel(tslLoading, True, progressValue.Message)
                ChangeToolStripProgressBar(tspbLoading, True, 100, 0, 0, ProgressBarStyle.Marquee)

            Case Else
                logger.Warn("Callback for <{0}> with no handler.", progressValue.EventType)
        End Select
    End Sub

    Private Sub TaskManager_RunCallBack(ByVal eventType As Enums.AddonEventType, ByRef parameters As List(Of Object))
        TaskList.Add(New Task With {.mType = eventType, .Params = parameters})
        If TasksDone Then
            tmrRunTasks.Start()
            TasksDone = False
        End If
    End Sub

    Private Sub TaskManager_Timer_RunTasks(ByVal sender As Object, ByVal e As EventArgs) Handles tmrRunTasks.Tick
        tmrRunTasks.Enabled = False
        TasksDone = False
        While TaskList.Count > 0
            GenericRunCallBack(TaskList.Item(0).mType, TaskList.Item(0).Params)
            TaskList.RemoveAt(0)
        End While
        TasksDone = True
    End Sub

    Private Sub Theme_Apply(ByVal tType As Enums.ContentType)
        pnlInfoPanel.SuspendLayout()

        currThemeType = tType

        tTheme.ApplyTheme(tType)

        Dim iState As Integer
        Select Case currThemeType
            Case Enums.ContentType.Movie
                iState = InfoPanelState_Movie
            Case Enums.ContentType.Movieset
                iState = InfoPanelState_MovieSet
            Case Enums.ContentType.TVEpisode
                iState = InfoPanelState_TVEpisode
            Case Enums.ContentType.TVSeason
                iState = InfoPanelState_TVSeason
            Case Enums.ContentType.TVShow
                iState = InfoPanelState_TVShow
        End Select
        Select Case iState
            Case 1
                If btnMid.Visible Then
                    pnlInfoPanel.Height = InfoPanelMidHeight
                    btnUp.Enabled = True
                    btnMid.Enabled = False
                    btnDown.Enabled = True
                ElseIf btnUp.Visible Then
                    pnlInfoPanel.Height = InfoPanelUpHeight
                    btnUp.Enabled = False
                    btnMid.Enabled = True
                    btnDown.Enabled = True
                    Select Case currThemeType
                        Case Enums.ContentType.Movie
                            InfoPanelState_Movie = 2
                        Case Enums.ContentType.Movieset
                            InfoPanelState_MovieSet = 2
                        Case Enums.ContentType.TVEpisode
                            InfoPanelState_TVEpisode = 2
                        Case Enums.ContentType.TVSeason
                            InfoPanelState_TVSeason = 2
                        Case Enums.ContentType.TVShow
                            InfoPanelState_TVShow = 2
                    End Select
                Else
                    pnlInfoPanel.Height = 32
                    btnUp.Enabled = True
                    btnMid.Enabled = True
                    btnDown.Enabled = False
                    Select Case currThemeType
                        Case Enums.ContentType.Movie
                            InfoPanelState_Movie = 0
                        Case Enums.ContentType.Movieset
                            InfoPanelState_MovieSet = 0
                        Case Enums.ContentType.TVEpisode
                            InfoPanelState_TVEpisode = 0
                        Case Enums.ContentType.TVSeason
                            InfoPanelState_TVSeason = 0
                        Case Enums.ContentType.TVShow
                            InfoPanelState_TVShow = 0
                    End Select
                End If
            Case 2
                If btnUp.Visible Then
                    pnlInfoPanel.Height = InfoPanelUpHeight
                    btnUp.Enabled = False
                    btnMid.Enabled = True
                    btnDown.Enabled = True
                ElseIf btnMid.Visible Then
                    pnlInfoPanel.Height = InfoPanelMidHeight
                    btnUp.Enabled = True
                    btnMid.Enabled = False
                    btnDown.Enabled = True
                    Select Case currThemeType
                        Case Enums.ContentType.Movie
                            InfoPanelState_Movie = 1
                        Case Enums.ContentType.Movieset
                            InfoPanelState_MovieSet = 1
                        Case Enums.ContentType.TVEpisode
                            InfoPanelState_TVEpisode = 1
                        Case Enums.ContentType.TVSeason
                            InfoPanelState_TVSeason = 1
                        Case Enums.ContentType.TVShow
                            InfoPanelState_TVShow = 1
                    End Select
                Else
                    pnlInfoPanel.Height = 32
                    btnUp.Enabled = True
                    btnMid.Enabled = True
                    btnDown.Enabled = False
                    Select Case currThemeType
                        Case Enums.ContentType.Movie
                            InfoPanelState_Movie = 0
                        Case Enums.ContentType.Movieset
                            InfoPanelState_MovieSet = 0
                        Case Enums.ContentType.TVEpisode
                            InfoPanelState_TVEpisode = 0
                        Case Enums.ContentType.TVSeason
                            InfoPanelState_TVSeason = 0
                        Case Enums.ContentType.TVShow
                            InfoPanelState_TVShow = 0
                    End Select
                End If
            Case Else '0
                pnlInfoPanel.Height = 32
                btnUp.Enabled = True
                btnMid.Enabled = True
                btnDown.Enabled = False
                Select Case currThemeType
                    Case Enums.ContentType.Movie
                        InfoPanelState_Movie = 0
                    Case Enums.ContentType.Movieset
                        InfoPanelState_MovieSet = 0
                    Case Enums.ContentType.TVEpisode
                        InfoPanelState_TVEpisode = 0
                    Case Enums.ContentType.TVSeason
                        InfoPanelState_TVSeason = 0
                    Case Enums.ContentType.TVShow
                        InfoPanelState_TVShow = 0
                End Select
        End Select

        pbActorsLoad.Visible = False
        pbActors.Image = My.Resources.actor_silhouette
        pbGuestStarsLoad.Visible = False
        pbGuestStars.Image = My.Resources.actor_silhouette

        pnlInfoPanel.ResumeLayout()
    End Sub

    Private Sub UpdateDb_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuUpdate.ButtonClick
        Scanner_LoadMedia(New Scanner.ScanOrCleanOptions With {.Movies = True, .Moviesets = True, .TV = True})
    End Sub

    Private Sub UpdateDb_SourceSub_Closing(sender As Object, e As ToolStripDropDownClosingEventArgs)
        If e.CloseReason = ToolStripDropDownCloseReason.ItemClicked Then
            e.Cancel = True
        Else
            For Each item In DirectCast(sender, ToolStripDropDownMenu).Items
                If TypeOf item Is ToolStripMenuItem Then
                    DirectCast(item, ToolStripMenuItem).Checked = False
                End If
            Next
        End If
    End Sub

    Private Sub UpdateDb_SourceSub_All_Click_Movie(ByVal sender As Object, ByVal e As EventArgs)
        Scanner_LoadMedia(New Scanner.ScanOrCleanOptions With {.Movies = True}, Nothing)
        mnuUpdate.DropDown.Close()
    End Sub

    Private Sub UpdateDb_SourceSub_All_Click_TVShow(ByVal sender As Object, ByVal e As EventArgs)
        Scanner_LoadMedia(New Scanner.ScanOrCleanOptions With {.TV = True}, Nothing)
        mnuUpdate.DropDown.Close()
    End Sub

    Private Sub UpdateDb_SourceSub_Selected_Click_Movie(ByVal sender As Object, ByVal e As EventArgs)
        Dim SourceIDs As New List(Of Long)
        Dim MenuItem = DirectCast(sender, ToolStripMenuItem)

        For Each item In MenuItem.GetCurrentParent.Items
            If TypeOf item Is ToolStripMenuItem Then
                If DirectCast(item, ToolStripMenuItem).Checked Then SourceIDs.Add(Convert.ToInt64(DirectCast(item, ToolStripMenuItem).Tag))
            End If
        Next

        Scanner_LoadMedia(New Scanner.ScanOrCleanOptions With {.Movies = True}, If(SourceIDs.Count > 0, SourceIDs, Nothing))
        mnuUpdate.DropDown.Close()
    End Sub

    Private Sub UpdateDb_SourceSub_Selected_Click_TVShow(ByVal sender As Object, ByVal e As EventArgs)
        Dim SourceIDs As New List(Of Long)
        Dim MenuItem = DirectCast(sender, ToolStripMenuItem)

        For Each item In MenuItem.GetCurrentParent.Items
            If TypeOf item Is ToolStripMenuItem Then
                If DirectCast(item, ToolStripMenuItem).Checked Then SourceIDs.Add(Convert.ToInt64(DirectCast(item, ToolStripMenuItem).Tag))
            End If
        Next

        Scanner_LoadMedia(New Scanner.ScanOrCleanOptions With {.TV = True}, If(SourceIDs.Count > 0, SourceIDs, Nothing))
        mnuUpdate.DropDown.Close()
    End Sub

    Private Sub UpdateDb_SourceSub_Single_DoubleClick_Movie(ByVal sender As Object, ByVal e As EventArgs)
        Dim SourceIDs As New List(Of Long)

        If DirectCast(sender, ToolStripMenuItem).Tag IsNot Nothing Then
            SourceIDs.Add(Convert.ToInt64(DirectCast(sender, ToolStripItem).Tag))
        End If

        Scanner_LoadMedia(New Scanner.ScanOrCleanOptions With {.Movies = True}, If(SourceIDs.Count > 0, SourceIDs, Nothing))
        mnuUpdate.DropDown.Close()
    End Sub

    Private Sub UpdateDb_SourceSub_Single_DoubleClick_TVShow(ByVal sender As Object, ByVal e As EventArgs)
        Dim SourceIDs As New List(Of Long)

        If DirectCast(sender, ToolStripMenuItem).Tag IsNot Nothing Then
            SourceIDs.Add(Convert.ToInt64(DirectCast(sender, ToolStripItem).Tag))
        End If

        Scanner_LoadMedia(New Scanner.ScanOrCleanOptions With {.TV = True}, If(SourceIDs.Count > 0, SourceIDs, Nothing))
        mnuUpdate.DropDown.Close()
    End Sub

    Private Sub DoTitleCheck()
        fTaskManager.AddTask(New TaskManager.TaskItem(TaskManager.TaskItem.TaskType.DoTitleCheck) With {.ContentType = Enums.ContentType.Movie})
    End Sub

    Private Sub mnuMainDonatePatreon_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainDonatePatreon.Click
        Process.Start("https://www.patreon.com/embermediamanager")
    End Sub

    Private Sub mnuMainDonatePayPal_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainDonatePayPal.Click
        Process.Start("https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=VWVJCUV3KAUX2&lc=CH&item_name=Ember%20Media%20Manager&currency_code=CHF&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted")
    End Sub

    Private Sub mnuMainError_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainError.Click
        dlgErrorViewer.Show(Me)
    End Sub

    Private Sub mnuMainFileExit_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainFileExit.Click, cmnuTrayExit.Click
        If Master.isCL Then
            'fLoading.SetLoadingMesg("Canceling ...")
            Master.fLoading.SetLoadingMesg(Master.eLang.GetString(370, "Canceling Load..."))
            If bwMovieScraper.IsBusy Then bwMovieScraper.CancelAsync()
            If bwReload_Movies.IsBusy Then bwReload_Movies.CancelAsync()
            While bwMovieScraper.IsBusy OrElse bwReload_Movies.IsBusy OrElse bwMovieScraper.IsBusy
                Application.DoEvents()
                Threading.Thread.Sleep(50)
            End While
        Else
            Close()
            Application.Exit()
        End If
    End Sub

    Private Sub EditDataFields_Click(sender As Object, e As EventArgs) Handles cmnuShowEditDataFields.Click, cmnuSeasonEditDataFields.Click, cmnuMovieSetEditDataFields.Click, cmnuMovieEditDataFields.Click, cmnuEpisodeEditDataFields.Click

        Dim strContentType As String = DirectCast(sender, ToolStripMenuItem).Tag.ToString

        If Not String.IsNullOrEmpty(strContentType) Then
            Dim eContentType As Enums.ContentType

            Select Case strContentType
                Case "movie"
                    eContentType = Enums.ContentType.Movie
                Case "movieset"
                    eContentType = Enums.ContentType.Movieset
                Case "tvepisode"
                    eContentType = Enums.ContentType.TVEpisode
                Case "tvseason"
                    eContentType = Enums.ContentType.TVSeason
                Case "tvshow"
                    eContentType = Enums.ContentType.TVShow
                Case Else
                    eContentType = Enums.ContentType.None
            End Select

            If Not eContentType = Enums.ContentType.None Then
                Using dEditDataField As New dlgClearOrReplace
                    If dEditDataField.ShowDialog(eContentType) = DialogResult.OK Then
                        Dim nTaskItem = dEditDataField.Result
                        nTaskItem.ListOfID = New List(Of Long)
                        Select Case eContentType
                            Case Enums.ContentType.Movie
                                For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                                    nTaskItem.ListOfID.Add(Convert.ToInt64(sRow.Cells("idMovie").Value))
                                Next
                            Case Enums.ContentType.Movieset
                                For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
                                    nTaskItem.ListOfID.Add(Convert.ToInt64(sRow.Cells("idSet").Value))
                                Next
                            Case Enums.ContentType.TVEpisode
                                For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                                    nTaskItem.ListOfID.Add(Convert.ToInt64(sRow.Cells("idEpisode").Value))
                                Next
                            Case Enums.ContentType.TVSeason
                                For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                                    nTaskItem.ListOfID.Add(Convert.ToInt64(sRow.Cells("idSeason").Value))
                                Next
                            Case Enums.ContentType.TVShow
                                For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                                    nTaskItem.ListOfID.Add(Convert.ToInt64(sRow.Cells("idShow").Value))
                                Next
                        End Select

                        fTaskManager.AddTask(nTaskItem)
                    End If
                End Using
            End If
        End If
    End Sub
    ''' <summary>
    ''' This is a generic callback function.
    ''' </summary>
    ''' <param name="mType"></param>
    ''' <param name="_params"></param>
    ''' <remarks></remarks>
    Private Sub GenericRunCallBack(ByVal mType As Enums.AddonEventType, ByRef _params As List(Of Object))
        Select Case mType

            Case Enums.AddonEventType.CommandLine
                Select Case _params(0).ToString
                    Case "addmoviesource"
                        Using dSource As New dlgSource_Movie(Master.DB.LoadAll_Sources_Movie)
                            If dSource.ShowDialog(CStr(_params(1)), CStr(_params(1))) = DialogResult.OK Then
                                SetMenus(True)
                            End If
                        End Using
                    Case "addtvshowsource"
                        Using dSource As New dlgSource_TVShow(Master.DB.LoadAll_Sources_TVShow)
                            If dSource.ShowDialog(CStr(_params(1)), CStr(_params(1))) = DialogResult.OK Then
                                SetMenus(True)
                            End If
                        End Using
                    Case "cleanvideodb"
                        Master.fLoading.SetProgressBarStyle(ProgressBarStyle.Marquee)
                        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(644, "Cleaning Database..."))
                        Database_Clean(New Scanner.ScanOrCleanOptions With {.Movies = True, .Moviesets = True, .TV = True})
                        While bwCleanDB.IsBusy
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                    Case "loadmedia"
                        Master.fLoading.SetProgressBarStyle(ProgressBarStyle.Marquee)
                        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(860, "Loading Media..."))
                        LoadingDone = False
                        Scanner_LoadMedia(CType(_params(1), Scanner.ScanOrCleanOptions), New List(Of Long) From {Convert.ToInt64(_params(2))}, CStr(_params(3)))
                        While Not LoadingDone
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                    Case "run"
                        Master.fLoading.SetProgressBarStyle(ProgressBarStyle.Marquee)
                        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(859, "Running Module..."))
                        Dim strAddonName As String = CStr(_params(1))
                        Dim oParameters As List(Of Object) = CType(_params(2), List(Of Object))
                        Dim gModule = Addons.Instance.Addons.FirstOrDefault(Function(f) f.AssemblyName = strAddonName)
                        If gModule IsNot Nothing Then
                            gModule.AddonInterface.Run(Nothing, Enums.AddonEventType.CommandLine, oParameters) 'TODO: check if correct
                        End If
                    Case "scrapemovies"
                        Master.fLoading.SetProgressBarStyle(ProgressBarStyle.Marquee)
                        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(861, "Command Line Scraping..."))
                        Dim ScrapeModifiers As Structures.ScrapeModifiers = CType(_params(2), Structures.ScrapeModifiers)
                        'TODO: Scraper_CreateList_Movie(CType(_params(1), Enums.ScrapeType), Master.DefaultOptions_Movie, ScrapeModifiers)
                        While bwMovieScraper.IsBusy
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                    Case "scrapemoviesets"
                        Master.fLoading.SetProgressBarStyle(ProgressBarStyle.Marquee)
                        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(861, "Command Line Scraping..."))
                        Dim ScrapeModifiers As Structures.ScrapeModifiers = CType(_params(2), Structures.ScrapeModifiers)
                        'TODO: Scraper_CreateList_Movieset(CType(_params(1), Enums.ScrapeType), Master.DefaultOptions_MovieSet, ScrapeModifiers)
                        While bwMovieSetScraper.IsBusy
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                    Case "scrapetvshows"
                        Master.fLoading.SetProgressBarStyle(ProgressBarStyle.Marquee)
                        Master.fLoading.SetLoadingMesg(Master.eLang.GetString(861, "Command Line Scraping..."))
                        Dim ScrapeModifiers As Structures.ScrapeModifiers = CType(_params(2), Structures.ScrapeModifiers)
                        'TODO: Scraper_CreateList_TVShow(CType(_params(1), Enums.ScrapeType), Master.DefaultOptions_TV, ScrapeModifiers)
                        While bwTVScraper.IsBusy
                            Application.DoEvents()
                            Threading.Thread.Sleep(50)
                        End While
                End Select

            Case Enums.AddonEventType.Generic
                Select Case _params(0).ToString
                    Case "controlsenabled"
                        SetControlsEnabled(Convert.ToBoolean(_params(1)), If(_params.Count = 3, Convert.ToBoolean(_params(2)), False))
                    Case "filllist"
                        DataGridView_FillList_Main(CBool(_params(1)), CBool(_params(2)), CBool(_params(3)))
                End Select

            Case Enums.AddonEventType.AfterEdit_Movie
                DataGridView_Row_Update_Movie(Convert.ToInt64(_params(0)))

            Case Enums.AddonEventType.AfterEdit_TVEpisode
                DataGridView_Row_Update_TVEpisode(Convert.ToInt64(_params(0)))

            Case Enums.AddonEventType.AfterEdit_TVShow
                DataGridView_Row_Update_TVShow(Convert.ToInt64(_params(0)))

            Case Enums.AddonEventType.Remove_Movie
                DataGridView_Row_Remove_Movie(Convert.ToInt64(_params(0)))

            Case Enums.AddonEventType.Remove_MovieSet
                DataGridView_Row_Remove_Movieset(Convert.ToInt64(_params(0)))

            Case Enums.AddonEventType.Remove_TVEpisode
                DataGridView_Row_Remove_TVEpisode(Convert.ToInt64(_params(0)))

            Case Enums.AddonEventType.Remove_TVSeason
                DataGridView_Row_Remove_TVSeason(Convert.ToInt64(_params(0)))

            Case Enums.AddonEventType.Remove_TVShow
                DataGridView_Row_Remove_TVShow(Convert.ToInt64(_params(0)))

        End Select
    End Sub

    Public Sub ChangeToolStripLabel(control As ToolStripLabel, bVisible As Boolean, strValue As String)
        If control.Owner.InvokeRequired Then
            control.Owner.BeginInvoke(New Delegate_ChangeToolStripLabel(AddressOf ChangeToolStripLabel), New Object() {control, bVisible, strValue})
        Else
            control.Text = strValue
            control.Visible = bVisible
        End If
    End Sub

    Private Sub ChangeToolStripProgressBar(control As ToolStripProgressBar,
                                           bVisible As Boolean,
                                           iMaximum As Integer,
                                           iMinimum As Integer,
                                           iValue As Integer,
                                           tStyle As ProgressBarStyle)
        If control.Owner.InvokeRequired Then
            control.Owner.BeginInvoke(New Delegate_ChangeToolStripProgressBar(AddressOf ChangeToolStripProgressBar), New Object() {control, bVisible, iMaximum, iMinimum, iValue, tStyle})
        Else
            control.Maximum = iMaximum
            control.Minimum = iMinimum
            control.Style = tStyle
            control.Value = iValue
            control.Visible = bVisible
        End If
    End Sub

    Private Sub mnuGenresAdd_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuGenresAdd.Click
        Dim strGenre As String = String.Empty
        If Not String.IsNullOrEmpty(mnuGenresNew.Text) Then
            strGenre = mnuGenresNew.Text.Trim
        ElseIf Not String.IsNullOrEmpty(mnuGenresGenre.Text.Trim) Then
            strGenre = mnuGenresGenre.Text.Trim
        End If

        If Not String.IsNullOrEmpty(strGenre) Then
            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                Select Case _SelectedContentType
                    Case "movie"
                        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(Convert.ToInt64(sRow.Cells("idMovie").Value))
                            If Not tmpDBElement.MainDetails.Genres.Contains(strGenre) Then
                                tmpDBElement.MainDetails.Genres.Add(strGenre)
                                Master.DB.Save_Movie(tmpDBElement, True, True, False, True, False)
                                DataGridView_Row_Update_Movie(tmpDBElement.ID)
                            End If
                        Next
                    Case "tvshow"
                        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value), False, False)
                            If Not tmpDBElement.MainDetails.Genres.Contains(strGenre) Then
                                tmpDBElement.MainDetails.Genres.Add(strGenre)
                                Master.DB.Save_TVShow(tmpDBElement, True, True, False, False)
                                DataGridView_Row_Update_TVShow(tmpDBElement.ID)
                            End If
                        Next
                End Select
                SQLtransaction.Commit()
            End Using
        End If
    End Sub

    Private Sub mnuGenresGenre_DropDown(ByVal sender As Object, ByVal e As EventArgs) Handles mnuGenresGenre.DropDown
        mnuGenresGenre.Items.Clear()
        Dim mGenre() As Object = APIXML.GetGenreList
        mnuGenresGenre.Items.AddRange(mGenre)

        mnuGenresNew.Text = String.Empty
    End Sub

    Private Sub mnuGenresGenre_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles mnuGenresGenre.SelectedIndexChanged
        Dim iSelectedRowsCount As Integer = 0
        Select Case _SelectedContentType
            Case "movie"
                iSelectedRowsCount = dgvMovies.SelectedRows.Count
            Case "tvshow"
                iSelectedRowsCount = dgvTVShows.SelectedRows.Count
        End Select

        If iSelectedRowsCount > 1 Then
            mnuGenresRemove.Enabled = True
            mnuGenresAdd.Enabled = True
        Else
            mnuGenresRemove.Enabled = mnuGenresGenre.Tag.ToString.Contains(mnuGenresGenre.Text)
            mnuGenresAdd.Enabled = Not mnuGenresGenre.Tag.ToString.Contains(mnuGenresGenre.Text)
        End If
        mnuGenresSet.Enabled = True
    End Sub

    Private Sub mnuGenresNew_TextChanged(ByVal sender As Object, ByVal e As EventArgs) Handles mnuGenresNew.TextChanged
        If Not String.IsNullOrEmpty(mnuGenresNew.Text) Then
            If Not mnuGenresGenre.Items.Contains(String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")) Then
                mnuGenresGenre.Items.Insert(0, String.Concat(Master.eLang.GetString(27, "Select Genre"), "..."))
            End If
            mnuGenresGenre.SelectedItem = String.Concat(Master.eLang.GetString(27, "Select Genre"), "...")
        End If

        If Not String.IsNullOrEmpty(mnuGenresNew.Text) Then
            mnuGenresAdd.Enabled = True
            mnuGenresRemove.Enabled = False
            mnuGenresSet.Enabled = True
        Else
            mnuGenresAdd.Enabled = False
            mnuGenresRemove.Enabled = False
            mnuGenresSet.Enabled = False
        End If
    End Sub

    Private Sub mnuGenresRemove_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuGenresRemove.Click
        Dim strGenre As String = String.Empty
        If Not String.IsNullOrEmpty(mnuGenresNew.Text) Then
            strGenre = mnuGenresNew.Text.Trim
        ElseIf Not String.IsNullOrEmpty(mnuGenresGenre.Text.Trim) Then
            strGenre = mnuGenresGenre.Text.Trim
        End If

        If Not String.IsNullOrEmpty(strGenre) Then
            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                Select Case _SelectedContentType
                    Case "movie"
                        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(Convert.ToInt64(sRow.Cells("idMovie").Value))
                            If tmpDBElement.MainDetails.Genres.Contains(strGenre) Then
                                tmpDBElement.MainDetails.Genres.Remove(strGenre)
                                Master.DB.Save_Movie(tmpDBElement, True, True, False, True, False)
                                DataGridView_Row_Update_Movie(tmpDBElement.ID)
                            End If
                        Next
                    Case "tvshow"
                        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value), False, False)
                            If tmpDBElement.MainDetails.Genres.Contains(strGenre) Then
                                tmpDBElement.MainDetails.Genres.Remove(strGenre)
                                Master.DB.Save_TVShow(tmpDBElement, True, True, False, False)
                                DataGridView_Row_Update_TVShow(tmpDBElement.ID)
                            End If
                        Next
                End Select
                SQLtransaction.Commit()
            End Using
        End If
    End Sub

    Private Sub mnuGenresSet_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuGenresSet.Click
        Dim strGenre As String = String.Empty
        If Not String.IsNullOrEmpty(mnuGenresNew.Text) Then
            strGenre = mnuGenresNew.Text.Trim
        ElseIf Not String.IsNullOrEmpty(mnuGenresGenre.Text.Trim) Then
            strGenre = mnuGenresGenre.Text.Trim
        End If

        If Not String.IsNullOrEmpty(strGenre) Then
            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                Select Case _SelectedContentType
                    Case "movie"
                        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(Convert.ToInt64(sRow.Cells("idMovie").Value))
                            tmpDBElement.MainDetails.Genres.Clear()
                            tmpDBElement.MainDetails.Genres.Add(strGenre)
                            Master.DB.Save_Movie(tmpDBElement, True, True, False, True, False)
                            DataGridView_Row_Update_Movie(tmpDBElement.ID)
                        Next
                    Case "tvshow"
                        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value), False, False)
                            tmpDBElement.MainDetails.Genres.Clear()
                            tmpDBElement.MainDetails.Genres.Add(strGenre)
                            Master.DB.Save_TVShow(tmpDBElement, True, True, False, False)
                            DataGridView_Row_Update_TVShow(tmpDBElement.ID)
                        Next
                End Select
                SQLtransaction.Commit()
            End Using
        End If
    End Sub

    Private Sub mnuLanguagesLanguage_DropDown(ByVal sender As Object, ByVal e As EventArgs) Handles mnuLanguagesLanguage.DropDown
        If mnuLanguagesLanguage.Items.Contains(String.Concat(Master.eLang.GetString(1199, "Select Language"), "...")) Then
            mnuLanguagesLanguage.Items.Remove(String.Concat(Master.eLang.GetString(1199, "Select Language"), "..."))
        End If
    End Sub

    Private Sub mnuLanguagesLanguage_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles mnuLanguagesLanguage.SelectedIndexChanged
        mnuLanguagesSet.Enabled = True
    End Sub

    Private Sub mnuLanguagesSet_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuLanguagesSet.Click
        Dim strLanguage As String = String.Empty
        If Not String.IsNullOrEmpty(mnuLanguagesLanguage.Text.Trim) Then
            strLanguage = mnuLanguagesLanguage.Text.Trim
        End If

        If Not String.IsNullOrEmpty(strLanguage) Then
            Select Case _SelectedContentType
                Case "movie"
                    TaskManager_CreateTask(Enums.ContentType.Movie, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLanguage, False, strLanguage)
                Case "movieset"
                    TaskManager_CreateTask(Enums.ContentType.Movieset, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLanguage, False, strLanguage)
                Case "tvshow"
                    TaskManager_CreateTask(Enums.ContentType.TVShow, Enums.SelectionType.Selected, TaskManager.TaskItem.TaskType.SetLanguage, False, strLanguage)
            End Select
        End If
    End Sub

    Private Sub mnuMainFileProfile_Click(sender As Object, e As EventArgs) Handles mnuMainFileProfile.Click
        Using dProfileSelect As New dlgProfileSelect
            Select Case dProfileSelect.ShowDialog
                'TODO: add restart with commandline
                '    Case DialogResult.OK
                '        If Not Master.SettingsPath = dProfileSelect.SelectedProfileFullPath Then
                '            If MessageBox.Show(Master.eLang.GetString(1112, "Do you want to restart Ember Media Manager and load the selected profile?"),
                '                               Master.eLang.GetString(298, "Restart Ember Media Manager?"),
                '                               MessageBoxButtons.YesNo,
                '                               MessageBoxIcon.Question) = DialogResult.Yes Then
                '                Application.Restart()
                '            End If
                '        End If
            End Select
        End Using
    End Sub

    Private Sub mnuMainToolsReloadMovies_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsReloadMovies.Click, cmnuTrayToolsReloadMovies.Click
        ReloadContent_All_Movie()
    End Sub

    Private Sub mnuMainToolsReloadMovieSets_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsReloadMovieSets.Click
        ReloadContent_All_Movieset()
    End Sub

    Private Sub mnuMainToolsReloadTVShows_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsReloadTVShows.Click
        ReloadContent_All_TVShow(True)
    End Sub

    Private Sub mnuMainToolsRewriteContentMovieAll_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsRewriteContentMovieAll.Click
        RewriteContent_All_Movie(True)
    End Sub

    Private Sub mnuMainToolsRewriteContentMovieNFO_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsRewriteContentMovieNFO.Click
        RewriteContent_All_Movie(False)
    End Sub

    Private Sub mnuMainToolsRewriteContentMovieSetAll_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsRewriteContentMovieSetAll.Click
        RewriteContent_All_Movieset(True)
    End Sub

    Private Sub mnuMainToolsRewriteContentMovieSetNFO_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsRewriteContentMovieSetNFO.Click
        RewriteContent_All_Movieset(False)
    End Sub

    Private Sub mnuMainToolsRewriteContentTVShowAll_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsRewriteContentTVShowAll.Click
        RewriteContent_All_TVShow(True)
    End Sub

    Private Sub mnuMainToolsRewriteContentTVShowNFO_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsRewriteContentTVShowNFO.Click
        RewriteContent_All_TVShow(False)
    End Sub

    Private Sub mnuTagsAdd_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuTagsAdd.Click
        Dim strTag As String = String.Empty
        If Not String.IsNullOrEmpty(mnuTagsNew.Text) Then
            strTag = mnuTagsNew.Text.Trim
        ElseIf Not String.IsNullOrEmpty(mnuTagsTag.Text.Trim) Then
            strTag = mnuTagsTag.Text.Trim
        End If

        If Not String.IsNullOrEmpty(strTag) Then
            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                Select Case _SelectedContentType
                    Case "movie"
                        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(Convert.ToInt64(sRow.Cells("idMovie").Value))
                            If Not tmpDBElement.MainDetails.Tags.Contains(strTag) Then
                                tmpDBElement.MainDetails.Tags.Add(strTag)
                                Master.DB.Save_Movie(tmpDBElement, True, True, False, True, False)
                                DataGridView_Row_Update_Movie(tmpDBElement.ID)
                            End If
                        Next
                    Case "tvshow"
                        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value), False, False)
                            If Not tmpDBElement.MainDetails.Tags.Contains(strTag) Then
                                tmpDBElement.MainDetails.Tags.Add(strTag)
                                Master.DB.Save_TVShow(tmpDBElement, True, True, False, False)
                                DataGridView_Row_Update_TVShow(tmpDBElement.ID)
                            End If
                        Next
                End Select
                SQLtransaction.Commit()
            End Using
        End If
    End Sub

    Private Sub mnuTagsNew_TextChanged(ByVal sender As Object, ByVal e As EventArgs) Handles mnuTagsNew.TextChanged
        If Not String.IsNullOrEmpty(mnuTagsNew.Text) Then
            If Not mnuTagsTag.Items.Contains(String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")) Then
                mnuTagsTag.Items.Insert(0, String.Concat(Master.eLang.GetString(1021, "Select Tag"), "..."))
            End If
            mnuTagsTag.SelectedItem = String.Concat(Master.eLang.GetString(1021, "Select Tag"), "...")
        End If

        If Not String.IsNullOrEmpty(mnuTagsNew.Text) Then
            mnuTagsAdd.Enabled = True
            mnuTagsRemove.Enabled = False
            mnuTagsSet.Enabled = True
        Else
            mnuTagsAdd.Enabled = False
            mnuTagsRemove.Enabled = False
            mnuTagsSet.Enabled = False
        End If
    End Sub

    Private Sub mnuTagsRemove_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuTagsRemove.Click
        Dim strTag As String = String.Empty
        If Not String.IsNullOrEmpty(mnuTagsNew.Text) Then
            strTag = mnuTagsNew.Text.Trim
        ElseIf Not String.IsNullOrEmpty(mnuTagsTag.Text.Trim) Then
            strTag = mnuTagsTag.Text.Trim
        End If

        If Not String.IsNullOrEmpty(strTag) Then
            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                Select Case _SelectedContentType
                    Case "movie"
                        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(Convert.ToInt64(sRow.Cells("idMovie").Value))
                            If tmpDBElement.MainDetails.Tags.Contains(strTag) Then
                                tmpDBElement.MainDetails.Tags.Remove(strTag)
                                Master.DB.Save_Movie(tmpDBElement, True, True, False, True, False)
                                DataGridView_Row_Update_Movie(tmpDBElement.ID)
                            End If
                        Next
                    Case "tvshow"
                        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value), False, False)
                            If tmpDBElement.MainDetails.Tags.Contains(strTag) Then
                                tmpDBElement.MainDetails.Tags.Remove(strTag)
                                Master.DB.Save_TVShow(tmpDBElement, True, True, False, False)
                                DataGridView_Row_Update_TVShow(tmpDBElement.ID)
                            End If
                        Next
                End Select
                SQLtransaction.Commit()
            End Using
        End If
    End Sub

    Private Sub mnuTagsSet_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuTagsSet.Click
        Dim strTag As String = String.Empty
        If Not String.IsNullOrEmpty(mnuTagsNew.Text) Then
            strTag = mnuTagsNew.Text.Trim
        ElseIf Not String.IsNullOrEmpty(mnuTagsTag.Text.Trim) Then
            strTag = mnuTagsTag.Text.Trim
        End If

        If Not String.IsNullOrEmpty(strTag) Then
            Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
                Select Case _SelectedContentType
                    Case "movie"
                        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_Movie(Convert.ToInt64(sRow.Cells("idMovie").Value))
                            tmpDBElement.MainDetails.Tags.Clear()
                            tmpDBElement.MainDetails.Tags.Add(strTag)
                            Master.DB.Save_Movie(tmpDBElement, True, True, False, True, False)
                            DataGridView_Row_Update_Movie(tmpDBElement.ID)
                        Next
                    Case "tvshow"
                        For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                            Dim tmpDBElement As Database.DBElement = Master.DB.Load_TVShow(Convert.ToInt64(sRow.Cells("idShow").Value), False, False)
                            tmpDBElement.MainDetails.Tags.Clear()
                            tmpDBElement.MainDetails.Tags.Add(strTag)
                            Master.DB.Save_TVShow(tmpDBElement, True, True, False, False)
                            DataGridView_Row_Update_TVShow(tmpDBElement.ID)
                        Next
                End Select
                SQLtransaction.Commit()
            End Using
        End If
    End Sub

    Private Sub mnuTagsTag_DropDown(ByVal sender As Object, ByVal e As EventArgs) Handles mnuTagsTag.DropDown
        mnuTagsTag.Items.Clear()
        Dim mTag() As Object = Master.DB.GetAll_Tags
        mnuTagsTag.Items.AddRange(mTag)

        mnuTagsNew.Text = String.Empty
    End Sub

    Private Sub mnuTagsTag_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles mnuTagsTag.SelectedIndexChanged
        Dim iSelectedRowsCount As Integer = 0
        Select Case _SelectedContentType
            Case "movie"
                iSelectedRowsCount = dgvMovies.SelectedRows.Count
            Case "tvshow"
                iSelectedRowsCount = dgvTVShows.SelectedRows.Count
        End Select

        If iSelectedRowsCount > 1 Then
            mnuTagsRemove.Enabled = True
            mnuTagsAdd.Enabled = True
        Else
            mnuTagsRemove.Enabled = mnuTagsTag.Tag.ToString.Contains(mnuTagsTag.Text)
            mnuTagsAdd.Enabled = Not mnuTagsTag.Tag.ToString.Contains(mnuTagsTag.Text)
        End If
        mnuTagsSet.Enabled = True
    End Sub

    Private Sub cmnuMovieSetSortMethodMethods_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetEditSortMethodMethods.SelectedIndexChanged
        cmnuMovieSetEditSortMethodSet.Enabled = True
    End Sub

    Private Sub mnuContextMenuStrip_Opened(sender As Object, e As EventArgs) Handles mnuTags.Opened, mnuScrapeSubmenu.Opened, mnuLanguages.Opened, mnuGenres.Opened
        Dim tContextMenuStrip As ContextMenuStrip = CType(sender, ContextMenuStrip)
        If tContextMenuStrip IsNot Nothing AndAlso tContextMenuStrip.OwnerItem IsNot Nothing AndAlso tContextMenuStrip.OwnerItem.Tag IsNot Nothing Then
            _SelectedContentType = tContextMenuStrip.OwnerItem.Tag.ToString
        End If
    End Sub

    Private Sub mnuScrapeMovies_ButtonClick(ByVal sender As Object, ByVal e As EventArgs) Handles mnuScrapeMovies.ButtonClick
        If Master.eSettings.MovieGeneralCustomScrapeButtonEnabled Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Master.eSettings.MovieGeneralCustomScrapeButtonModifierType, True)
            Scraper_CreateList(
                Master.eSettings.MovieGeneralCustomScrapeButtonSelectionType,
                Master.eSettings.MovieGeneralCustomScrapeButtonScrapeType,
                Master.DefaultOptions_Movie, ScrapeModifiers,
                Enums.ContentType.Movie
                )
        Else
            mnuScrapeMovies.ShowDropDown()
        End If
    End Sub

    Private Sub mnuScrapeMovieSets_ButtonClick(ByVal sender As Object, ByVal e As EventArgs) Handles mnuScrapeMovieSets.ButtonClick
        If Master.eSettings.MovieSetGeneralCustomScrapeButtonEnabled Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Master.eSettings.MovieSetGeneralCustomScrapeButtonModifierType, True)
            Scraper_CreateList(
                Master.eSettings.MovieSetGeneralCustomScrapeButtonSelectionType,
                Master.eSettings.MovieSetGeneralCustomScrapeButtonScrapeType,
                Master.DefaultOptions_Movieset,
                ScrapeModifiers,
                Enums.ContentType.Movieset
                )
        Else
            mnuScrapeMovieSets.ShowDropDown()
        End If
    End Sub

    Private Sub mnuScrapeTVShows_ButtonClick(ByVal sender As Object, ByVal e As EventArgs) Handles mnuScrapeTVShows.ButtonClick
        If Master.eSettings.TVGeneralCustomScrapeButtonEnabled Then
            Dim ScrapeModifiers As New Structures.ScrapeModifiers
            Functions.SetScrapeModifiers(ScrapeModifiers, Master.eSettings.TVGeneralCustomScrapeButtonModifierType, True)
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.withEpisodes, True)
            Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.withSeasons, True)
            Scraper_CreateList(
                Master.eSettings.TVGeneralCustomScrapeButtonSelectionType,
                Master.eSettings.TVGeneralCustomScrapeButtonScrapeType,
                Master.DefaultOptions_TV,
                ScrapeModifiers,
                Enums.ContentType.TVShow
                )
        Else
            mnuScrapeTVShows.ShowDropDown()
        End If
    End Sub

    Private Sub mnuScrapeOption_Opened(sender As Object, e As EventArgs) Handles mnuScrapeOption.Opened
        _SelectedContentType = mnuScrapeOption.OwnerItem.Tag.ToString

        Select Case _SelectedContentType
            Case "movie"
                With Master.eSettings.Movie.InformationSettings
                    mnuScrapeOptionActors.Enabled = .Actors.Enabled
                    mnuScrapeOptionActors.Visible = True
                    mnuScrapeOptionAired.Enabled = False
                    mnuScrapeOptionAired.Visible = False
                    mnuScrapeOptionCertifications.Enabled = .Certifications.Enabled
                    mnuScrapeOptionCertifications.Visible = True
                    mnuScrapeOptionCollectionID.Enabled = .Collection.Enabled
                    mnuScrapeOptionCollectionID.Visible = True
                    mnuScrapeOptionCountries.Enabled = .Countries.Enabled
                    mnuScrapeOptionCountries.Visible = True
                    mnuScrapeOptionCreators.Enabled = False
                    mnuScrapeOptionCreators.Visible = False
                    mnuScrapeOptionDirectors.Enabled = .Directors.Enabled
                    mnuScrapeOptionDirectors.Visible = True
                    mnuScrapeOptionEpiGuideURL.Enabled = False
                    mnuScrapeOptionEpiGuideURL.Visible = False
                    mnuScrapeOptionGenres.Enabled = .Genres.Enabled
                    mnuScrapeOptionGenres.Visible = True
                    mnuScrapeOptionGuestStars.Enabled = False
                    mnuScrapeOptionGuestStars.Visible = False
                    mnuScrapeOptionMPAA.Enabled = .MPAA.Enabled
                    mnuScrapeOptionMPAA.Visible = True
                    mnuScrapeOptionOriginalTitle.Enabled = .OriginalTitle.Enabled
                    mnuScrapeOptionOriginalTitle.Visible = True
                    mnuScrapeOptionOutline.Enabled = .Outline.Enabled
                    mnuScrapeOptionOutline.Visible = True
                    mnuScrapeOptionPlot.Enabled = .Plot.Enabled
                    mnuScrapeOptionPlot.Visible = True
                    mnuScrapeOptionPremiered.Enabled = .Premiered.Enabled
                    mnuScrapeOptionPremiered.Visible = True
                    mnuScrapeOptionRating.Enabled = .Ratings.Enabled
                    mnuScrapeOptionRating.Visible = True
                    mnuScrapeOptionRuntime.Enabled = .Runtime.Enabled
                    mnuScrapeOptionRuntime.Visible = True
                    mnuScrapeOptionStatus.Enabled = False
                    mnuScrapeOptionStatus.Visible = False
                    mnuScrapeOptionStudios.Enabled = .Studios.Enabled
                    mnuScrapeOptionStudios.Visible = True
                    mnuScrapeOptionTagline.Enabled = .Tagline.Enabled
                    mnuScrapeOptionTagline.Visible = True
                    mnuScrapeOptionTitle.Enabled = .Title.Enabled
                    mnuScrapeOptionTitle.Visible = True
                    mnuScrapeOptionTop250.Enabled = .Top250.Enabled
                    mnuScrapeOptionTop250.Visible = True
                    mnuScrapeOptionTrailer.Enabled = .TrailerLink.Enabled
                    mnuScrapeOptionTrailer.Visible = True
                    mnuScrapeOptionUserRating.Enabled = .UserRating.Enabled
                    mnuScrapeOptionUserRating.Visible = True
                    mnuScrapeOptionWriters.Enabled = .Credits.Enabled
                    mnuScrapeOptionWriters.Visible = True
                End With
            Case "movieset"
                With Master.eSettings.Movieset.InformationSettings
                    mnuScrapeOptionActors.Enabled = False
                    mnuScrapeOptionActors.Visible = False
                    mnuScrapeOptionAired.Enabled = False
                    mnuScrapeOptionAired.Visible = False
                    mnuScrapeOptionCertifications.Enabled = False
                    mnuScrapeOptionCertifications.Visible = False
                    mnuScrapeOptionCollectionID.Enabled = False
                    mnuScrapeOptionCollectionID.Visible = False
                    mnuScrapeOptionCountries.Enabled = False
                    mnuScrapeOptionCountries.Visible = False
                    mnuScrapeOptionCreators.Enabled = False
                    mnuScrapeOptionCreators.Visible = False
                    mnuScrapeOptionDirectors.Enabled = False
                    mnuScrapeOptionDirectors.Visible = False
                    mnuScrapeOptionEpiGuideURL.Enabled = False
                    mnuScrapeOptionEpiGuideURL.Visible = False
                    mnuScrapeOptionGenres.Enabled = False
                    mnuScrapeOptionGenres.Visible = False
                    mnuScrapeOptionGuestStars.Enabled = False
                    mnuScrapeOptionGuestStars.Visible = False
                    mnuScrapeOptionMPAA.Enabled = False
                    mnuScrapeOptionMPAA.Visible = False
                    mnuScrapeOptionOriginalTitle.Enabled = False
                    mnuScrapeOptionOriginalTitle.Visible = False
                    mnuScrapeOptionOutline.Enabled = False
                    mnuScrapeOptionOutline.Visible = False
                    mnuScrapeOptionPlot.Enabled = .Plot.Enabled
                    mnuScrapeOptionPlot.Visible = True
                    mnuScrapeOptionPremiered.Enabled = False
                    mnuScrapeOptionPremiered.Visible = False
                    mnuScrapeOptionRating.Enabled = False
                    mnuScrapeOptionRating.Visible = False
                    mnuScrapeOptionRuntime.Enabled = False
                    mnuScrapeOptionRuntime.Visible = False
                    mnuScrapeOptionStatus.Enabled = False
                    mnuScrapeOptionStatus.Visible = False
                    mnuScrapeOptionStudios.Enabled = False
                    mnuScrapeOptionStudios.Visible = False
                    mnuScrapeOptionTagline.Enabled = False
                    mnuScrapeOptionTagline.Visible = False
                    mnuScrapeOptionTitle.Enabled = .Title.Enabled
                    mnuScrapeOptionTitle.Visible = True
                    mnuScrapeOptionTop250.Enabled = False
                    mnuScrapeOptionTop250.Visible = False
                    mnuScrapeOptionTrailer.Enabled = False
                    mnuScrapeOptionTrailer.Visible = False
                    mnuScrapeOptionUserRating.Enabled = False
                    mnuScrapeOptionUserRating.Visible = False
                    mnuScrapeOptionWriters.Enabled = False
                    mnuScrapeOptionWriters.Visible = False
                End With
            Case "tvepisode"
                With Master.eSettings.TVEpisode.InformationSettings
                    mnuScrapeOptionActors.Enabled = .Actors.Enabled
                    mnuScrapeOptionActors.Visible = True
                    mnuScrapeOptionAired.Enabled = .Aired.Enabled
                    mnuScrapeOptionAired.Visible = True
                    mnuScrapeOptionCertifications.Enabled = False
                    mnuScrapeOptionCertifications.Visible = False
                    mnuScrapeOptionCollectionID.Enabled = False
                    mnuScrapeOptionCollectionID.Visible = False
                    mnuScrapeOptionCountries.Enabled = False
                    mnuScrapeOptionCountries.Visible = False
                    mnuScrapeOptionCreators.Enabled = False
                    mnuScrapeOptionCreators.Visible = False
                    mnuScrapeOptionDirectors.Enabled = .Directors.Enabled
                    mnuScrapeOptionDirectors.Visible = True
                    mnuScrapeOptionEpiGuideURL.Enabled = False
                    mnuScrapeOptionEpiGuideURL.Visible = False
                    mnuScrapeOptionGenres.Enabled = False
                    mnuScrapeOptionGenres.Visible = False
                    mnuScrapeOptionGuestStars.Enabled = .GuestStars.Enabled
                    mnuScrapeOptionGuestStars.Visible = True
                    mnuScrapeOptionMPAA.Enabled = False
                    mnuScrapeOptionMPAA.Visible = False
                    mnuScrapeOptionOriginalTitle.Enabled = False
                    mnuScrapeOptionOriginalTitle.Visible = False
                    mnuScrapeOptionOutline.Enabled = False
                    mnuScrapeOptionOutline.Visible = False
                    mnuScrapeOptionPlot.Enabled = .Plot.Enabled
                    mnuScrapeOptionPlot.Visible = True
                    mnuScrapeOptionPremiered.Enabled = False
                    mnuScrapeOptionPremiered.Visible = False
                    mnuScrapeOptionRating.Enabled = .Ratings.Enabled
                    mnuScrapeOptionRating.Visible = True
                    mnuScrapeOptionRuntime.Enabled = .Runtime.Enabled
                    mnuScrapeOptionRuntime.Visible = True
                    mnuScrapeOptionStatus.Enabled = False
                    mnuScrapeOptionStatus.Visible = False
                    mnuScrapeOptionStudios.Enabled = False
                    mnuScrapeOptionStudios.Visible = False
                    mnuScrapeOptionTagline.Enabled = False
                    mnuScrapeOptionTagline.Visible = False
                    mnuScrapeOptionTitle.Enabled = .Title.Enabled
                    mnuScrapeOptionTitle.Visible = True
                    mnuScrapeOptionTop250.Enabled = False
                    mnuScrapeOptionTop250.Visible = False
                    mnuScrapeOptionTrailer.Enabled = False
                    mnuScrapeOptionTrailer.Visible = False
                    mnuScrapeOptionUserRating.Enabled = .UserRating.Enabled
                    mnuScrapeOptionUserRating.Visible = True
                    mnuScrapeOptionWriters.Enabled = .Credits.Enabled
                    mnuScrapeOptionWriters.Visible = True
                End With
            Case "tvseason"
                With Master.eSettings.TVSeason.InformationSettings
                    mnuScrapeOptionActors.Enabled = False
                    mnuScrapeOptionActors.Visible = False
                    mnuScrapeOptionAired.Enabled = .Aired.Enabled
                    mnuScrapeOptionAired.Visible = True
                    mnuScrapeOptionCertifications.Enabled = False
                    mnuScrapeOptionCertifications.Visible = False
                    mnuScrapeOptionCollectionID.Enabled = False
                    mnuScrapeOptionCollectionID.Visible = False
                    mnuScrapeOptionCountries.Enabled = False
                    mnuScrapeOptionCountries.Visible = False
                    mnuScrapeOptionCreators.Enabled = False
                    mnuScrapeOptionCreators.Visible = False
                    mnuScrapeOptionDirectors.Enabled = False
                    mnuScrapeOptionDirectors.Visible = False
                    mnuScrapeOptionEpiGuideURL.Enabled = False
                    mnuScrapeOptionEpiGuideURL.Visible = False
                    mnuScrapeOptionGenres.Enabled = False
                    mnuScrapeOptionGenres.Visible = False
                    mnuScrapeOptionGuestStars.Enabled = False
                    mnuScrapeOptionGuestStars.Visible = False
                    mnuScrapeOptionMPAA.Enabled = False
                    mnuScrapeOptionMPAA.Visible = False
                    mnuScrapeOptionOriginalTitle.Enabled = False
                    mnuScrapeOptionOriginalTitle.Visible = False
                    mnuScrapeOptionOutline.Enabled = False
                    mnuScrapeOptionOutline.Visible = False
                    mnuScrapeOptionPlot.Enabled = .Plot.Enabled
                    mnuScrapeOptionPlot.Visible = True
                    mnuScrapeOptionPremiered.Enabled = False
                    mnuScrapeOptionPremiered.Visible = False
                    mnuScrapeOptionRating.Enabled = False
                    mnuScrapeOptionRating.Visible = False
                    mnuScrapeOptionRuntime.Enabled = False
                    mnuScrapeOptionRuntime.Visible = False
                    mnuScrapeOptionStatus.Enabled = False
                    mnuScrapeOptionStatus.Visible = False
                    mnuScrapeOptionStudios.Enabled = False
                    mnuScrapeOptionStudios.Visible = False
                    mnuScrapeOptionTagline.Enabled = False
                    mnuScrapeOptionTagline.Visible = False
                    mnuScrapeOptionTitle.Enabled = .Title.Enabled
                    mnuScrapeOptionTitle.Visible = True
                    mnuScrapeOptionTop250.Enabled = False
                    mnuScrapeOptionTop250.Visible = False
                    mnuScrapeOptionTrailer.Enabled = False
                    mnuScrapeOptionTrailer.Visible = False
                    mnuScrapeOptionUserRating.Enabled = False
                    mnuScrapeOptionUserRating.Visible = True
                    mnuScrapeOptionWriters.Enabled = False
                    mnuScrapeOptionWriters.Visible = False
                End With
            Case "tvshow"
                With Master.eSettings.TVShow.InformationSettings
                    mnuScrapeOptionActors.Enabled = .Actors.Enabled
                    mnuScrapeOptionActors.Visible = True
                    mnuScrapeOptionAired.Enabled = False
                    mnuScrapeOptionAired.Visible = False
                    mnuScrapeOptionCertifications.Enabled = .Certifications.Enabled
                    mnuScrapeOptionCertifications.Visible = True
                    mnuScrapeOptionCollectionID.Enabled = False
                    mnuScrapeOptionCollectionID.Visible = False
                    mnuScrapeOptionCountries.Enabled = .Countries.Enabled
                    mnuScrapeOptionCountries.Visible = True
                    mnuScrapeOptionCreators.Enabled = .Creators.Enabled
                    mnuScrapeOptionCreators.Visible = True
                    mnuScrapeOptionDirectors.Enabled = False
                    mnuScrapeOptionDirectors.Visible = False
                    mnuScrapeOptionEpiGuideURL.Enabled = .EpisodeGuideURL.Enabled
                    mnuScrapeOptionEpiGuideURL.Visible = True
                    mnuScrapeOptionGenres.Enabled = .Genres.Enabled
                    mnuScrapeOptionGenres.Visible = True
                    mnuScrapeOptionGuestStars.Enabled = False
                    mnuScrapeOptionGuestStars.Visible = False
                    mnuScrapeOptionMPAA.Enabled = .MPAA.Enabled
                    mnuScrapeOptionMPAA.Visible = True
                    mnuScrapeOptionOriginalTitle.Enabled = .OriginalTitle.Enabled
                    mnuScrapeOptionOriginalTitle.Visible = True
                    mnuScrapeOptionOutline.Enabled = False
                    mnuScrapeOptionOutline.Visible = False
                    mnuScrapeOptionPlot.Enabled = .Plot.Enabled
                    mnuScrapeOptionPlot.Visible = True
                    mnuScrapeOptionPremiered.Enabled = .Premiered.Enabled
                    mnuScrapeOptionPremiered.Visible = True
                    mnuScrapeOptionRating.Enabled = .Ratings.Enabled
                    mnuScrapeOptionRating.Visible = True
                    mnuScrapeOptionRuntime.Enabled = .Runtime.Enabled
                    mnuScrapeOptionRuntime.Visible = True
                    mnuScrapeOptionStatus.Enabled = .Status.Enabled
                    mnuScrapeOptionStatus.Visible = True
                    mnuScrapeOptionStudios.Enabled = .Studios.Enabled
                    mnuScrapeOptionStudios.Visible = True
                    mnuScrapeOptionTagline.Enabled = .Tagline.Enabled
                    mnuScrapeOptionTagline.Visible = True
                    mnuScrapeOptionTitle.Enabled = .Title.Enabled
                    mnuScrapeOptionTitle.Visible = True
                    mnuScrapeOptionTop250.Enabled = False
                    mnuScrapeOptionTop250.Visible = False
                    mnuScrapeOptionTrailer.Enabled = False
                    mnuScrapeOptionTrailer.Visible = False
                    mnuScrapeOptionUserRating.Enabled = .UserRating.Enabled
                    mnuScrapeOptionUserRating.Visible = True
                    mnuScrapeOptionWriters.Enabled = False
                    mnuScrapeOptionWriters.Visible = False
                End With
        End Select
    End Sub

    Private Sub mnuScrapeModifier_Opened(sender As Object, e As EventArgs) Handles mnuScrapeModifier.Opened
        _SelectedScrapeTypeMode = mnuScrapeModifier.OwnerItem.Tag.ToString

        With Master.eSettings
            Select Case _SelectedContentType
                Case "movie"
                    mnuScrapeModifierActorthumbs.Enabled = .MovieActorthumbsAnyEnabled
                    mnuScrapeModifierActorthumbs.Visible = True
                    mnuScrapeModifierBanner.Enabled = .MovieBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainBanner)
                    mnuScrapeModifierBanner.Visible = True
                    mnuScrapeModifierCharacterArt.Enabled = False
                    mnuScrapeModifierCharacterArt.Visible = False
                    mnuScrapeModifierClearArt.Enabled = .MovieClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainClearArt)
                    mnuScrapeModifierClearArt.Visible = True
                    mnuScrapeModifierClearLogo.Enabled = .MovieClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainClearLogo)
                    mnuScrapeModifierClearLogo.Visible = True
                    mnuScrapeModifierDiscArt.Enabled = .MovieDiscArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainDiscArt)
                    mnuScrapeModifierDiscArt.Visible = True
                    mnuScrapeModifierExtrafanarts.Enabled = .MovieExtrafanartsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainExtrafanarts)
                    mnuScrapeModifierExtrafanarts.Visible = True
                    mnuScrapeModifierExtrathumbs.Enabled = .MovieExtrathumbsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainExtrathumbs)
                    mnuScrapeModifierExtrathumbs.Visible = True
                    mnuScrapeModifierFanart.Enabled = .MovieFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainFanart)
                    mnuScrapeModifierFanart.Visible = True
                    mnuScrapeModifierKeyart.Enabled = .MovieKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainKeyart)
                    mnuScrapeModifierKeyart.Visible = True
                    mnuScrapeModifierLandscape.Enabled = .MovieLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainLandscape)
                    mnuScrapeModifierLandscape.Visible = True
                    mnuScrapeModifierMetaData.Enabled = .MovieScraperMetaDataScan
                    mnuScrapeModifierMetaData.Visible = True
                    mnuScrapeModifierNFO.Enabled = True
                    mnuScrapeModifierNFO.Visible = True
                    mnuScrapeModifierPoster.Enabled = .MoviePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movie(Enums.ModifierType.MainPoster)
                    mnuScrapeModifierPoster.Visible = True
                    mnuScrapeModifierTheme.Enabled = .MovieThemeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Theme_Movie()
                    mnuScrapeModifierTheme.Visible = True
                    mnuScrapeModifierTrailer.Enabled = .MovieTrailerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Trailer_Movie()
                    mnuScrapeModifierTrailer.Visible = True
                Case "movieset"
                    mnuScrapeModifierActorthumbs.Enabled = False
                    mnuScrapeModifierActorthumbs.Visible = False
                    mnuScrapeModifierBanner.Enabled = .MovieSetBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainBanner)
                    mnuScrapeModifierBanner.Visible = True
                    mnuScrapeModifierCharacterArt.Enabled = False
                    mnuScrapeModifierCharacterArt.Visible = False
                    mnuScrapeModifierClearArt.Enabled = .MovieSetClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainClearArt)
                    mnuScrapeModifierClearArt.Visible = True
                    mnuScrapeModifierClearLogo.Enabled = .MovieSetClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainClearLogo)
                    mnuScrapeModifierClearLogo.Visible = True
                    mnuScrapeModifierDiscArt.Enabled = .MovieSetDiscArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainDiscArt)
                    mnuScrapeModifierDiscArt.Visible = True
                    mnuScrapeModifierExtrafanarts.Enabled = False
                    mnuScrapeModifierExtrafanarts.Visible = False
                    mnuScrapeModifierExtrathumbs.Enabled = False
                    mnuScrapeModifierExtrathumbs.Visible = False
                    mnuScrapeModifierFanart.Enabled = .MovieSetFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainFanart)
                    mnuScrapeModifierFanart.Visible = True
                    mnuScrapeModifierKeyart.Enabled = .MovieSetKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainKeyart)
                    mnuScrapeModifierKeyart.Visible = True
                    mnuScrapeModifierLandscape.Enabled = .MovieSetLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainLandscape)
                    mnuScrapeModifierLandscape.Visible = True
                    mnuScrapeModifierMetaData.Enabled = False
                    mnuScrapeModifierMetaData.Visible = False
                    mnuScrapeModifierNFO.Enabled = True
                    mnuScrapeModifierNFO.Visible = True
                    mnuScrapeModifierPoster.Enabled = .MovieSetPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_Movieset(Enums.ModifierType.MainPoster)
                    mnuScrapeModifierPoster.Visible = True
                    mnuScrapeModifierTheme.Enabled = False
                    mnuScrapeModifierTheme.Visible = False
                    mnuScrapeModifierTrailer.Enabled = False
                    mnuScrapeModifierTrailer.Visible = False
                Case "tvepisode"
                    mnuScrapeModifierActorthumbs.Enabled = .TVEpisodeActorThumbsAnyEnabled
                    mnuScrapeModifierActorthumbs.Visible = True
                    mnuScrapeModifierBanner.Enabled = False
                    mnuScrapeModifierBanner.Visible = False
                    mnuScrapeModifierCharacterArt.Enabled = False
                    mnuScrapeModifierCharacterArt.Visible = False
                    mnuScrapeModifierClearArt.Enabled = False
                    mnuScrapeModifierClearArt.Visible = False
                    mnuScrapeModifierClearLogo.Enabled = False
                    mnuScrapeModifierClearLogo.Visible = False
                    mnuScrapeModifierDiscArt.Enabled = False
                    mnuScrapeModifierDiscArt.Visible = False
                    mnuScrapeModifierExtrafanarts.Enabled = False
                    mnuScrapeModifierExtrafanarts.Visible = False
                    mnuScrapeModifierExtrathumbs.Enabled = False
                    mnuScrapeModifierExtrathumbs.Visible = False
                    mnuScrapeModifierFanart.Enabled = .TVEpisodeFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodeFanart)
                    mnuScrapeModifierFanart.Visible = True
                    mnuScrapeModifierKeyart.Enabled = False
                    mnuScrapeModifierKeyart.Visible = False
                    mnuScrapeModifierLandscape.Enabled = False
                    mnuScrapeModifierLandscape.Visible = False
                    mnuScrapeModifierMetaData.Enabled = .TVScraperMetaDataScan
                    mnuScrapeModifierMetaData.Visible = True
                    mnuScrapeModifierNFO.Enabled = True
                    mnuScrapeModifierNFO.Visible = True
                    mnuScrapeModifierPoster.Enabled = .TVEpisodePosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.EpisodePoster)
                    mnuScrapeModifierPoster.Visible = True
                    mnuScrapeModifierTheme.Enabled = False
                    mnuScrapeModifierTheme.Visible = False
                    mnuScrapeModifierTrailer.Enabled = False
                    mnuScrapeModifierTrailer.Visible = False
                Case "tvseason"
                    mnuScrapeModifierActorthumbs.Enabled = False
                    mnuScrapeModifierActorthumbs.Visible = False
                    mnuScrapeModifierBanner.Enabled = .TVSeasonBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonBanner)
                    mnuScrapeModifierBanner.Visible = True
                    mnuScrapeModifierCharacterArt.Enabled = False
                    mnuScrapeModifierCharacterArt.Visible = False
                    mnuScrapeModifierClearArt.Enabled = False
                    mnuScrapeModifierClearArt.Visible = False
                    mnuScrapeModifierClearLogo.Enabled = False
                    mnuScrapeModifierClearLogo.Visible = False
                    mnuScrapeModifierDiscArt.Enabled = False
                    mnuScrapeModifierDiscArt.Visible = False
                    mnuScrapeModifierExtrafanarts.Enabled = False
                    mnuScrapeModifierExtrafanarts.Visible = False
                    mnuScrapeModifierExtrathumbs.Enabled = False
                    mnuScrapeModifierExtrathumbs.Visible = False
                    mnuScrapeModifierFanart.Enabled = .TVSeasonFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonFanart)
                    mnuScrapeModifierFanart.Visible = True
                    mnuScrapeModifierKeyart.Enabled = False
                    mnuScrapeModifierKeyart.Visible = False
                    mnuScrapeModifierLandscape.Enabled = .TVSeasonLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonLandscape)
                    mnuScrapeModifierLandscape.Visible = True
                    mnuScrapeModifierMetaData.Enabled = False
                    mnuScrapeModifierMetaData.Visible = False
                    mnuScrapeModifierNFO.Enabled = False
                    mnuScrapeModifierNFO.Visible = False
                    mnuScrapeModifierPoster.Enabled = .TVSeasonPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.SeasonPoster)
                    mnuScrapeModifierPoster.Visible = True
                    mnuScrapeModifierTheme.Enabled = False
                    mnuScrapeModifierTheme.Visible = False
                    mnuScrapeModifierTrailer.Enabled = False
                    mnuScrapeModifierTrailer.Visible = False
                Case "tvshow"
                    mnuScrapeModifierActorthumbs.Enabled = .TVShowActorThumbsAnyEnabled
                    mnuScrapeModifierActorthumbs.Visible = True
                    mnuScrapeModifierBanner.Enabled = .TVShowBannerAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainBanner)
                    mnuScrapeModifierBanner.Visible = True
                    mnuScrapeModifierCharacterArt.Enabled = .TVShowCharacterArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainCharacterArt)
                    mnuScrapeModifierCharacterArt.Visible = True
                    mnuScrapeModifierClearArt.Enabled = .TVShowClearArtAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainClearArt)
                    mnuScrapeModifierClearArt.Visible = True
                    mnuScrapeModifierClearLogo.Enabled = .TVShowClearLogoAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainClearLogo)
                    mnuScrapeModifierClearLogo.Visible = True
                    mnuScrapeModifierDiscArt.Enabled = False
                    mnuScrapeModifierDiscArt.Visible = False
                    mnuScrapeModifierExtrafanarts.Enabled = .TVShowExtrafanartsAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainExtrafanarts)
                    mnuScrapeModifierExtrafanarts.Visible = True
                    mnuScrapeModifierExtrathumbs.Enabled = False
                    mnuScrapeModifierExtrathumbs.Visible = False
                    mnuScrapeModifierFanart.Enabled = .TVShowFanartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainFanart)
                    mnuScrapeModifierFanart.Visible = True
                    mnuScrapeModifierKeyart.Enabled = .TVShowKeyartAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainKeyart)
                    mnuScrapeModifierKeyart.Visible = True
                    mnuScrapeModifierLandscape.Enabled = .TVShowLandscapeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainLandscape)
                    mnuScrapeModifierLandscape.Visible = True
                    mnuScrapeModifierMetaData.Enabled = False
                    mnuScrapeModifierMetaData.Visible = False
                    mnuScrapeModifierNFO.Enabled = True
                    mnuScrapeModifierNFO.Visible = True
                    mnuScrapeModifierPoster.Enabled = .TVShowPosterAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Image_TV(Enums.ModifierType.MainPoster)
                    mnuScrapeModifierPoster.Visible = True
                    mnuScrapeModifierTheme.Enabled = .TvShowThemeAnyEnabled AndAlso Addons.Instance.ScraperWithCapabilityAnyEnabled_Theme_TV()
                    mnuScrapeModifierTheme.Visible = True
                    mnuScrapeModifierTrailer.Enabled = False
                    mnuScrapeModifierTrailer.Visible = False
            End Select
        End With
    End Sub

    Private Sub mnuScrapeType_Opened(sender As Object, e As EventArgs) Handles mnuScrapeType.Opened
        If mnuScrapeType.OwnerItem.OwnerItem IsNot Nothing Then
            _SelectedScrapeType = mnuScrapeType.OwnerItem.Tag.ToString
            _SelectedContentType = mnuScrapeType.OwnerItem.OwnerItem.Tag.ToString
        Else
            _SelectedScrapeType = "selected"
            _SelectedContentType = mnuScrapeType.OwnerItem.Tag.ToString
        End If
    End Sub

    Private Sub Autoscraper(ByVal sender As Object, ByVal e As EventArgs) Handles _
        mnuScrapeModifierActorthumbs.Click,
        mnuScrapeModifierAll.Click,
        mnuScrapeModifierBanner.Click,
        mnuScrapeModifierCharacterArt.Click,
        mnuScrapeModifierClearArt.Click,
        mnuScrapeModifierClearLogo.Click,
        mnuScrapeModifierDiscArt.Click,
        mnuScrapeModifierExtrafanarts.Click,
        mnuScrapeModifierExtrathumbs.Click,
        mnuScrapeModifierFanart.Click,
        mnuScrapeModifierKeyart.Click,
        mnuScrapeModifierLandscape.Click,
        mnuScrapeModifierMetaData.Click,
        mnuScrapeModifierNFO.Click,
        mnuScrapeModifierPoster.Click,
        mnuScrapeModifierTheme.Click,
        mnuScrapeModifierTrailer.Click,
        mnuScrapeSubmenuCustom.Click

        Dim ContentType As String = String.Empty
        Dim ModifierType As String = String.Empty
        Dim ScrapeType As String = String.Empty
        Dim eScrapeType As Enums.ScrapeType
        Dim eSelectionType As Enums.SelectionType
        Dim ScrapeModifiers As New Structures.ScrapeModifiers

        Dim Menu As ToolStripMenuItem = DirectCast(sender, ToolStripMenuItem)
        ModifierType = Menu.Tag.ToString
        ScrapeType = String.Concat(_SelectedScrapeType, "_", _SelectedScrapeTypeMode)
        ContentType = _SelectedContentType

        Dim eContentType As Enums.ContentType = Enums.ContentType.None
        Select Case ContentType
            Case "movie"
                eContentType = Enums.ContentType.Movie
            Case "movieset"
                eContentType = Enums.ContentType.Movieset
            Case "tvepisode"
                eContentType = Enums.ContentType.TVEpisode
            Case "tvseason"
                eContentType = Enums.ContentType.TVSeason
            Case "tvshow"
                eContentType = Enums.ContentType.TVShow
                ScrapeModifiers.withEpisodes = True
                ScrapeModifiers.withSeasons = True
            Case Else
                Return
        End Select

        If Not ModifierType = "custom" Then
            Select Case ModifierType
                Case "all"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.All, True)
                Case "actorthumbs"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainActorThumbs, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeActorThumbs, True)
                Case "banner"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainBanner, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.AllSeasonsBanner, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.SeasonBanner, True)
                Case "characterart"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainCharacterArt, True)
                Case "clearart"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainClearArt, True)
                Case "clearlogo"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainClearLogo, True)
                Case "discart"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainDiscArt, True)
                Case "extrafanarts"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainExtrafanarts, True)
                Case "extrathumbs"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainExtrathumbs, True)
                Case "fanart"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainFanart, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.AllSeasonsFanart, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeFanart, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.SeasonFanart, True)
                Case "keyart"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainKeyart, True)
                Case "landscape"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainLandscape, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.AllSeasonsLandscape, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.SeasonLandscape, True)
                Case "metadata"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainMetaData, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeMeta, True)
                Case "nfo"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainNFO, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeNFO, True)
                Case "poster"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainPoster, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.AllSeasonsPoster, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodePoster, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.SeasonPoster, True)
                Case "subtitle"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainSubtitle, True)
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.EpisodeSubtitle, True)
                Case "theme"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainTheme, True)
                Case "trailer"
                    Functions.SetScrapeModifiers(ScrapeModifiers, Enums.ModifierType.MainTrailer, True)
            End Select

            Select Case ScrapeType
                Case "all_ask"
                    eScrapeType = Enums.ScrapeType.Ask
                    eSelectionType = Enums.SelectionType.All
                Case "all_auto"
                    eScrapeType = Enums.ScrapeType.Auto
                    eSelectionType = Enums.SelectionType.All
                Case "all_skip"
                    eScrapeType = Enums.ScrapeType.Skip
                    eSelectionType = Enums.SelectionType.All
                Case "filter_ask"
                    eScrapeType = Enums.ScrapeType.Ask
                    eSelectionType = Enums.SelectionType.Filtered
                Case "filter_auto"
                    eScrapeType = Enums.ScrapeType.Auto
                    eSelectionType = Enums.SelectionType.Filtered
                Case "filter_skip"
                    eScrapeType = Enums.ScrapeType.Skip
                    eSelectionType = Enums.SelectionType.Filtered
                Case "marked_ask"
                    eScrapeType = Enums.ScrapeType.Ask
                    eSelectionType = Enums.SelectionType.Marked
                Case "marked_auto"
                    eScrapeType = Enums.ScrapeType.Auto
                    eSelectionType = Enums.SelectionType.Marked
                Case "marked_skip"
                    eScrapeType = Enums.ScrapeType.Skip
                    eSelectionType = Enums.SelectionType.Marked
                Case "missing_ask"
                    eScrapeType = Enums.ScrapeType.Ask
                    eSelectionType = Enums.SelectionType.MissingContent
                Case "missing_auto"
                    eScrapeType = Enums.ScrapeType.Auto
                    eSelectionType = Enums.SelectionType.MissingContent
                Case "missing_skip"
                    eScrapeType = Enums.ScrapeType.Skip
                    eSelectionType = Enums.SelectionType.MissingContent
                Case "new_ask"
                    eScrapeType = Enums.ScrapeType.Ask
                    eSelectionType = Enums.SelectionType.[New]
                Case "new_auto"
                    eScrapeType = Enums.ScrapeType.Auto
                    eSelectionType = Enums.SelectionType.[New]
                Case "new_skip"
                    eScrapeType = Enums.ScrapeType.Skip
                    eSelectionType = Enums.SelectionType.[New]
                Case "selected_ask"
                    eScrapeType = Enums.ScrapeType.Ask
                    eSelectionType = Enums.SelectionType.Selected
                Case "selected_auto"
                    eScrapeType = Enums.ScrapeType.Auto
                    eSelectionType = Enums.SelectionType.Selected
                Case "selected_skip"
                    eScrapeType = Enums.ScrapeType.Skip
                    eSelectionType = Enums.SelectionType.Selected
            End Select

            'TODO: Add TaskManager
            Select Case ContentType
                Case "movie"
                    Scraper_CreateList(eSelectionType, eScrapeType, Master.DefaultOptions_Movie, ScrapeModifiers, eContentType)
                Case "movieset"
                    Scraper_CreateList(eSelectionType, eScrapeType, Master.DefaultOptions_Movieset, ScrapeModifiers, eContentType)
                Case "tvepisode"
                    Scraper_CreateList(eSelectionType, eScrapeType, Master.DefaultOptions_TV, ScrapeModifiers, eContentType)
                Case "tvseason"
                    Scraper_CreateList(eSelectionType, eScrapeType, Master.DefaultOptions_TV, ScrapeModifiers, eContentType)
                Case "tvshow"
                    ScrapeModifiers.withEpisodes = True
                    ScrapeModifiers.withSeasons = True
                    Scraper_CreateList(eSelectionType, eScrapeType, Master.DefaultOptions_TV, ScrapeModifiers, eContentType)
            End Select
        Else
            Select Case ContentType
                Case "movie"
                    SetControlsEnabled(False)
                    Using dlgCustomScraper As New dlgCustomScraper(Enums.ContentType.Movie)
                        Dim CustomScraper As Structures.CustomUpdaterStruct = Nothing
                        CustomScraper = dlgCustomScraper.ShowDialog()
                        If Not CustomScraper.Canceled Then
                            Scraper_CreateList(CustomScraper.SelectionType, CustomScraper.ScrapeType, CustomScraper.ScrapeOptions, CustomScraper.ScrapeModifiers, eContentType)
                        Else
                            SetControlsEnabled(True)
                        End If
                    End Using
                Case "movieset"
                    SetControlsEnabled(False)
                    Using dlgCustomScraper As New dlgCustomScraper(Enums.ContentType.Movieset)
                        Dim CustomScraper As Structures.CustomUpdaterStruct = Nothing
                        CustomScraper = dlgCustomScraper.ShowDialog()
                        If Not CustomScraper.Canceled Then
                            Scraper_CreateList(CustomScraper.SelectionType, CustomScraper.ScrapeType, CustomScraper.ScrapeOptions, CustomScraper.ScrapeModifiers, eContentType)
                        Else
                            SetControlsEnabled(True)
                        End If
                    End Using
                Case "tvshow"
                    SetControlsEnabled(False)
                    Using dlgCustomScraper As New dlgCustomScraper(Enums.ContentType.TV)
                        Dim CustomScraper As Structures.CustomUpdaterStruct = Nothing
                        CustomScraper = dlgCustomScraper.ShowDialog()
                        If Not CustomScraper.Canceled Then
                            Scraper_CreateList(CustomScraper.SelectionType, CustomScraper.ScrapeType, CustomScraper.ScrapeOptions, CustomScraper.ScrapeModifiers, eContentType)
                        Else
                            SetControlsEnabled(True)
                        End If
                    End Using
            End Select
        End If
    End Sub

    Private Sub SingleDataField(ByVal sender As Object, ByVal e As EventArgs) Handles _
        mnuScrapeOptionActors.Click,
        mnuScrapeOptionAired.Click,
        mnuScrapeOptionCertifications.Click,
        mnuScrapeOptionCollectionID.Click,
        mnuScrapeOptionCountries.Click,
        mnuScrapeOptionCreators.Click,
        mnuScrapeOptionDirectors.Click,
        mnuScrapeOptionEpiGuideURL.Click,
        mnuScrapeOptionGenres.Click,
        mnuScrapeOptionGuestStars.Click,
        mnuScrapeOptionMPAA.Click,
        mnuScrapeOptionOriginalTitle.Click,
        mnuScrapeOptionOutline.Click,
        mnuScrapeOptionPlot.Click,
        mnuScrapeOptionPremiered.Click,
        mnuScrapeOptionRating.Click,
        mnuScrapeOptionRuntime.Click,
        mnuScrapeOptionStatus.Click,
        mnuScrapeOptionStudios.Click,
        mnuScrapeOptionTagline.Click,
        mnuScrapeOptionTitle.Click,
        mnuScrapeOptionTop250.Click,
        mnuScrapeOptionTrailer.Click,
        mnuScrapeOptionUserRating.Click,
        mnuScrapeOptionWriters.Click

        Dim ContentType As String = String.Empty
        Dim ScrapeOption As String = String.Empty
        Dim ScrapeOptions As New Structures.ScrapeOptions
        Dim ScrapeModifiers As New Structures.ScrapeModifiers

        Dim Menu As ToolStripMenuItem = DirectCast(sender, ToolStripMenuItem)
        ScrapeOption = Menu.Tag.ToString
        ContentType = _SelectedContentType

        Select Case ScrapeOption
            Case "actors"
                ScrapeOptions.Actors = True
                ScrapeOptions.Episodes.Actors = True
            Case "aired"
                ScrapeOptions.Episodes.Aired = True
                ScrapeOptions.Seasons.Aired = True
            Case "certifications"
                ScrapeOptions.Certifications = True
            Case "collectionid"
                ScrapeOptions.Collection = True
            Case "countries"
                ScrapeOptions.Countries = True
            Case "creators"
                ScrapeOptions.Creators = True
            Case "directors"
                ScrapeOptions.Directors = True
                ScrapeOptions.Episodes.Directors = True
            Case "epiguideurl"
                ScrapeOptions.EpisodeGuideURL = True
            Case "genres"
                ScrapeOptions.Genres = True
            Case "gueststars"
                ScrapeOptions.Episodes.GuestStars = True
            Case "mpaa"
                ScrapeOptions.MPAA = True
            Case "originaltitle"
                ScrapeOptions.OriginalTitle = True
                ScrapeOptions.Episodes.OriginalTitle = True
            Case "outline"
                ScrapeOptions.Outline = True
            Case "plot"
                ScrapeOptions.Plot = True
                ScrapeOptions.Episodes.Plot = True
                ScrapeOptions.Seasons.Plot = True
            Case "premiered"
                ScrapeOptions.Premiered = True
            Case "rating"
                ScrapeOptions.Ratings = True
                ScrapeOptions.Episodes.Ratings = True
            Case "runtime"
                ScrapeOptions.Runtime = True
                ScrapeOptions.Episodes.Runtime = True
            Case "status"
                ScrapeOptions.Status = True
            Case "studios"
                ScrapeOptions.Studios = True
            Case "tagline"
                ScrapeOptions.Tagline = True
            Case "tags"
                ScrapeOptions.Tags = True
            Case "title"
                ScrapeOptions.Title = True
                ScrapeOptions.Episodes.Title = True
                ScrapeOptions.Seasons.Title = True
            Case "top250"
                ScrapeOptions.Top250 = True
            Case "trailer"
                ScrapeOptions.TrailerLink = True
            Case "userrating"
                ScrapeOptions.UserRating = True
                ScrapeOptions.Episodes.UserRating = True
            Case "writers"
                ScrapeOptions.Credits = True
                ScrapeOptions.Episodes.Credits = True
        End Select

        Dim eContentType As Enums.ContentType = Enums.ContentType.None
        Select Case ContentType
            Case "movie"
                ScrapeModifiers.Information = True
                eContentType = Enums.ContentType.Movie
            Case "movieset"
                ScrapeModifiers.Information = True
                eContentType = Enums.ContentType.Movieset
            Case "tvepisode"
                ScrapeModifiers.Episodes.Information = True
                eContentType = Enums.ContentType.TVEpisode
            Case "tvseason"
                ScrapeModifiers.Seasons.Information = True
                eContentType = Enums.ContentType.TVSeason
            Case "tvshow"
                ScrapeModifiers.Information = True
                eContentType = Enums.ContentType.TVShow
        End Select

        'TODO: Add TaskManager

        'Select Case ContentType
        '    Case "movie"
        '        ScrapeModifiers.MainNFO = True
        '        Scraper_CreateList_Movie(Enums.ScrapeType.SingleField, ScrapeOptions, ScrapeModifiers)
        '    Case "movieset"
        '        ScrapeModifiers.MainNFO = True
        '        Scraper_CreateList_Movieset(Enums.ScrapeType.SingleField, ScrapeOptions, ScrapeModifiers)
        '    Case "tvepisode"
        '        ScrapeModifiers.EpisodeNFO = True
        '        Scraper_CreateList_TVEpisode(Enums.ScrapeType.SingleField, ScrapeOptions, ScrapeModifiers)
        '    Case "tvseason"
        '        ScrapeModifiers.SeasonNFO = True
        '        Scraper_CreateList_TVSeason(Enums.ScrapeType.SingleField, ScrapeOptions, ScrapeModifiers)
        '    Case "tvshow"
        '        ScrapeModifiers.MainNFO = True
        '        Scraper_CreateList_TVShow(Enums.ScrapeType.SingleField, ScrapeOptions, ScrapeModifiers)
        'End Select
    End Sub

    Private Sub ShowEpisodeMenuItems(ByVal Visible As Boolean)
        Dim cMnu As ToolStripMenuItem
        Dim cSep As ToolStripSeparator

        If Visible Then
            For Each cMnuItem As Object In cmnuEpisode.Items
                If TypeOf cMnuItem Is ToolStripMenuItem Then
                    DirectCast(cMnuItem, ToolStripMenuItem).Visible = True
                ElseIf TypeOf cMnuItem Is ToolStripSeparator Then
                    DirectCast(cMnuItem, ToolStripSeparator).Visible = True
                End If
            Next
            cmnuEpisodeRemoveFromDisk.Visible = True
        Else
            For Each cMnuItem As Object In cmnuEpisode.Items
                If TypeOf cMnuItem Is ToolStripMenuItem Then
                    cMnu = DirectCast(cMnuItem, ToolStripMenuItem)
                    If Not cMnu.Name = "RemoveEpToolStripMenuItem" AndAlso Not cMnu.Name = "cmnuEpTitle" Then
                        cMnu.Visible = False
                    End If
                ElseIf TypeOf cMnuItem Is ToolStripSeparator Then
                    cSep = DirectCast(cMnuItem, ToolStripSeparator)
                    If Not cSep.Name = "ToolStripSeparator6" Then
                        cSep.Visible = False
                    End If
                End If
                cmnuEpisodeRemoveFromDisk.Visible = False
            Next
        End If
    End Sub

    Function MyResolveEventHandler(ByVal sender As Object, ByVal args As ResolveEventArgs) As [Assembly]
        Dim asm As Assembly = Nothing
        Dim name As String = args.Name.Split(Convert.ToChar(","))(0)
        Dim version As Match = Regex.Match(args.Name.ToLower, "version=(.*?),")
        If version.Success Then
            asm = Addons.AssemblyList.FirstOrDefault(Function(y) y.AssemblyName = name AndAlso y.AssemblyVersion.ToString = version.Groups(1).Value).Assembly
        Else
            asm = Addons.AssemblyList.FirstOrDefault(Function(y) y.AssemblyName = name).Assembly
        End If
        If asm Is Nothing Then
            asm = Addons.AssemblyList.FirstOrDefault(Function(y) y.AssemblyName = name.Split(Convert.ToChar("."))(0)).Assembly
        End If
        Return asm
    End Function

    Private Sub cmnuMovieOpenFolder_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieOpenFolder.Click
        If dgvMovies.SelectedRows.Count > 0 Then
            Dim doOpen As Boolean = True
            If dgvMovies.SelectedRows.Count > 10 Then
                If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvMovies.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
            End If

            If doOpen Then
                For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                    Using Explorer As New Process
                        Explorer.StartInfo.FileName = "explorer.exe"
                        Explorer.StartInfo.Arguments = String.Format("/select,""{0}""", sRow.Cells("MoviePath").Value)
                        Explorer.Start()
                    End Using
                Next
            End If
        End If
    End Sub
    ''' <summary>
    ''' Disable IMDB/TMDBID/TVDB menutitem if selected episodes don't have IMDBID/TMDBID/TVDB
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuEpisode_Opened(sender As Object, e As EventArgs) Handles cmnuEpisode.Opened
        If dgvTVEpisodes.SelectedRows.Count > 0 Then
            Dim enableIMDB As Boolean = False
            Dim enableTMDB As Boolean = False
            Dim enableTVDB As Boolean = False
            For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                If Not String.IsNullOrEmpty(sRow.Cells("strIMDB").Value.ToString) Then
                    enableIMDB = True
                End If
                If Not String.IsNullOrEmpty(sRow.Cells("strTMDB").Value.ToString) Then
                    enableTMDB = True
                End If
                If Not String.IsNullOrEmpty(sRow.Cells("strTVDB").Value.ToString) Then
                    enableTVDB = True
                End If
            Next
            cmnuEpisodeBrowseIMDB.Enabled = enableIMDB
            cmnuEpisodeBrowseTMDB.Enabled = enableTMDB
            cmnuEpisodeBrowseTVDB.Enabled = enableTVDB
        End If
    End Sub
    ''' <summary>
    ''' Disable IMDB/TMDB menutitem if selected movies don't have IMDBID/TMDBID
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuMovie_Opened(sender As Object, e As EventArgs) Handles cmnuMovie.Opened
        If dgvMovies.SelectedRows.Count > 0 Then
            Dim enableIMDB As Boolean = False
            Dim enableTMDB As Boolean = False
            For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                If Not String.IsNullOrEmpty(sRow.Cells("Imdb").Value.ToString) Then
                    enableIMDB = True
                End If
                If Not String.IsNullOrEmpty(sRow.Cells("TMDB").Value.ToString) Then
                    enableTMDB = True
                End If
            Next
            cmnuMovieBrowseIMDB.Enabled = enableIMDB
            cmnuMovieBrowseTMDB.Enabled = enableTMDB
        End If
    End Sub
    ''' <summary>
    ''' Disable TMDB menutitem if selected moviesets don't have TMDBColID
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuMovieSet_Opened(sender As Object, e As EventArgs) Handles cmnuMovieSet.Opened
        If dgvMovieSets.SelectedRows.Count > 0 Then
            Dim enableTMDB As Boolean = False
            For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
                If Not String.IsNullOrEmpty(sRow.Cells("TMDBColID").Value.ToString) Then
                    enableTMDB = True
                End If
            Next
            cmnuMovieSetBrowseTMDB.Enabled = enableTMDB
        End If
    End Sub
    ''' <summary>
    ''' Disable IMDB/TMDBID/TVDB menutitem if selected tvshow don't have IMDBID/TMDBID/TVDB
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuSeason_Opened(sender As Object, e As EventArgs) Handles cmnuSeason.Opened
        If dgvTVSeasons.SelectedRows.Count > 0 Then
            Dim enableIMDB As Boolean = False
            Dim enableTMDB As Boolean = False
            Dim enableTVDB As Boolean = False
            If Not CInt(dgvTVSeasons.SelectedRows(0).Cells("season").Value) = -1 Then
                For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                    If Not String.IsNullOrEmpty(dgvTVShows.SelectedRows(0).Cells("strIMDB").Value.ToString) Then
                        enableIMDB = True
                    End If
                    If Not String.IsNullOrEmpty(sRow.Cells("strTMDB").Value.ToString) Then
                        enableTMDB = True
                    End If
                    If Not String.IsNullOrEmpty(sRow.Cells("strTVDB").Value.ToString) Then
                        enableTVDB = True
                    End If
                Next
            End If
            cmnuSeasonBrowseIMDB.Enabled = enableIMDB
            cmnuSeasonBrowseTMDB.Enabled = enableTMDB
            cmnuSeasonBrowseTVDB.Enabled = enableTVDB
        End If
    End Sub
    ''' <summary>
    ''' Disable IMDB/TMDBID/TVDB menutitem if selected tvshow don't have IMDBID/TMDBID/TVDB
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuShow_Opened(sender As Object, e As EventArgs) Handles cmnuShow.Opened
        If dgvTVShows.SelectedRows.Count > 0 Then
            Dim enableIMDB As Boolean = False
            Dim enableTMDB As Boolean = False
            Dim enableTVDB As Boolean = False
            For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                If Not String.IsNullOrEmpty(sRow.Cells("strIMDB").Value.ToString) Then
                    enableIMDB = True
                End If
                If Not String.IsNullOrEmpty(sRow.Cells("strTMDB").Value.ToString) Then
                    enableTMDB = True
                End If
                If Not String.IsNullOrEmpty(sRow.Cells("TVDB").Value.ToString) Then
                    enableTVDB = True
                End If
            Next
            cmnuShowBrowseIMDB.Enabled = enableIMDB
            cmnuShowBrowseTMDB.Enabled = enableTMDB
            cmnuShowBrowseTVDB.Enabled = enableTVDB
        End If
    End Sub
    ''' <summary>
    ''' Open IMDB-Page of selected episode(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuEpisodeBrowseIMDB_Click(sender As Object, e As EventArgs) Handles cmnuEpisodeBrowseIMDB.Click
        Try
            If dgvTVEpisodes.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVEpisodes.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVEpisodes.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If

                If doOpen Then
                    Dim tmpstring As String = String.Empty
                    For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("strIMDB").Value.ToString) Then
                            If Not My.Resources.urlIMDB.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlIMDB, "/title/", sRow.Cells("strIMDB").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlIMDB, "title/", sRow.Cells("strIMDB").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open TMDB-Page of selected episode(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuEpisodeBrowseTMDB_Click(sender As Object, e As EventArgs) Handles cmnuEpisodeBrowseTMDB.Click
        Try
            If dgvTVEpisodes.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVEpisodes.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVEpisodes.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If
                If doOpen Then
                    Dim ShowID As String = dgvTVShows.SelectedRows(0).Cells("strTMDB").Value.ToString
                    For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                        If Not My.Resources.urlTheMovieDb.EndsWith("/") Then
                            Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "/tv/", ShowID, "/season/", sRow.Cells("Season").Value.ToString, "/episode/", sRow.Cells("Episode").Value.ToString))
                        Else
                            Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "tv/", ShowID, "/season/", sRow.Cells("Season").Value.ToString, "/episode/", sRow.Cells("Episode").Value.ToString))
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open TVDB-Page of selected episode(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuEpisodeBrowseTVDB_Click(sender As Object, e As EventArgs) Handles cmnuEpisodeBrowseTVDB.Click
        Try
            If dgvTVEpisodes.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVEpisodes.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVEpisodes.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If
                If doOpen Then
                    Dim ShowID As String = dgvTVShows.SelectedRows(0).Cells("TVDB").Value.ToString
                    For Each sRow As DataGridViewRow In dgvTVEpisodes.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("strTVDB").Value.ToString) Then
                            If Not My.Resources.urlTVDB.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlTVDB, "/?tab=episode&seriesid=", ShowID & "&id=", sRow.Cells("strTVDB").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlTVDB, "?tab=episode&seriesid=", ShowID & "&id=", sRow.Cells("strTVDB").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open IMDB-Page of selected movie(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuMovieBrowseIMDB_Click(sender As Object, e As EventArgs) Handles cmnuMovieBrowseIMDB.Click
        Try
            If dgvMovies.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvMovies.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvMovies.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If

                If doOpen Then
                    Dim tmpstring As String = String.Empty
                    For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("Imdb").Value.ToString) Then
                            If Not My.Resources.urlIMDB.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlIMDB, "/title/", sRow.Cells("Imdb").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlIMDB, "title/", sRow.Cells("Imdb").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open TMDB-Page of selected movie(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuMovieBrowseTMDB_Click(sender As Object, e As EventArgs) Handles cmnuMovieBrowseTMDB.Click
        Try
            If dgvMovies.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvMovies.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvMovies.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If
                If doOpen Then
                    For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("TMDB").Value.ToString) Then
                            If Not My.Resources.urlTheMovieDb.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "/movie/", sRow.Cells("TMDB").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "movie/", sRow.Cells("TMDB").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open TMDB-Page of selected movieset(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuMovieSetBrowseTMDB_Click(sender As Object, e As EventArgs) Handles cmnuMovieSetBrowseTMDB.Click
        Try
            If dgvMovieSets.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvMovieSets.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvMovieSets.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If
                If doOpen Then
                    For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("TMDBColID").Value.ToString) Then
                            If Not My.Resources.urlTheMovieDb.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "/collection/", sRow.Cells("TMDBColID").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "collection/", sRow.Cells("TMDBColID").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open IMDB-Page of selected season(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuSeasonBrowseIMDB_Click(sender As Object, e As EventArgs) Handles cmnuSeasonBrowseIMDB.Click
        Try
            If dgvTVSeasons.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVSeasons.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVSeasons.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If

                If doOpen Then
                    Dim ShowID As String = dgvTVShows.SelectedRows(0).Cells("strIMDB").Value.ToString
                    For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                        If Not String.IsNullOrEmpty(ShowID) Then
                            If Not My.Resources.urlIMDB.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlIMDB, "/title/", ShowID, "/episodes?season=", sRow.Cells("Season").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlIMDB, "title/", ShowID, "/episodes?season=", sRow.Cells("Season").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open TMDB-Page of selected season(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuSeasonBrowseTMDB_Click(sender As Object, e As EventArgs) Handles cmnuSeasonBrowseTMDB.Click
        Try
            If dgvTVSeasons.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVSeasons.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVSeasons.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If
                If doOpen Then
                    Dim ShowID As String = dgvTVShows.SelectedRows(0).Cells("strTMDB").Value.ToString
                    For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                        If Not My.Resources.urlTheMovieDb.EndsWith("/") Then
                            Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "/tv/", ShowID, "/season/", sRow.Cells("Season").Value.ToString))
                        Else
                            Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "tv/", ShowID, "/season/", sRow.Cells("Season").Value.ToString))
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open TVDB-Page of selected seasons(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuSeasonBrowseTVDB_Click(sender As Object, e As EventArgs) Handles cmnuSeasonBrowseTVDB.Click
        Try
            If dgvTVSeasons.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVSeasons.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVSeasons.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If
                If doOpen Then
                    Dim ShowID As String = dgvTVShows.SelectedRows(0).Cells("TVDB").Value.ToString
                    For Each sRow As DataGridViewRow In dgvTVSeasons.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("strTVDB").Value.ToString) Then
                            If Not My.Resources.urlTVDB.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlTVDB, "/?tab=season&seriesid=", ShowID & "&seasonid=", sRow.Cells("strTVDB").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlTVDB, "?tab=season&seriesid=", ShowID, "&seasonid=", sRow.Cells("strTVDB").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open IMDB-Page of selected show(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuShowBrowseIMDB_Click(sender As Object, e As EventArgs) Handles cmnuShowBrowseIMDB.Click
        Try
            If dgvTVShows.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVShows.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVShows.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If

                If doOpen Then
                    Dim tmpstring As String = String.Empty
                    For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("strIMDB").Value.ToString) Then
                            If Not My.Resources.urlIMDB.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlIMDB, "/title/", sRow.Cells("strIMDB").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlIMDB, "title/", sRow.Cells("strIMDB").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open TMDB-Page of selected tvshow(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuShowBrowseTMDB_Click(sender As Object, e As EventArgs) Handles cmnuShowBrowseTMDB.Click
        Try
            If dgvTVShows.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVShows.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVShows.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If
                If doOpen Then
                    For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("strTMDB").Value.ToString) Then
                            If Not My.Resources.urlTheMovieDb.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "/tv/", sRow.Cells("strTMDB").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlTheMovieDb, "tv/", sRow.Cells("strTMDB").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub
    ''' <summary>
    ''' Open TVDB-Page of selected tvshow(s) in defaultbrowser
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub cmnuShowBrowseTVDB_Click(sender As Object, e As EventArgs) Handles cmnuShowBrowseTVDB.Click
        Try
            If dgvTVShows.SelectedRows.Count > 0 Then
                Dim doOpen As Boolean = True
                If dgvTVShows.SelectedRows.Count > 10 Then
                    If Not MessageBox.Show(String.Format(Master.eLang.GetString(635, "You have selected {0} folders to open. Are you sure you want to do this?"), dgvTVShows.SelectedRows.Count), Master.eLang.GetString(104, "Are You Sure?"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then doOpen = False
                End If
                If doOpen Then
                    For Each sRow As DataGridViewRow In dgvTVShows.SelectedRows
                        If Not String.IsNullOrEmpty(sRow.Cells("TVDB").Value.ToString) Then
                            If Not My.Resources.urlTVDB.EndsWith("/") Then
                                Functions.Launch(String.Concat(My.Resources.urlTVDB & "/?tab=series&id=" & sRow.Cells("TVDB").Value.ToString))
                            Else
                                Functions.Launch(String.Concat(My.Resources.urlTVDB & "?tab=series&id=" & sRow.Cells("TVDB").Value.ToString))
                            End If
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Private Sub cmnuMovieRemoveFromDB_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieRemoveFromDB.Click
        Dim lItemsToRemove As New List(Of Long)
        InfoScreen_Clear()

        For Each sRow As DataGridViewRow In dgvMovies.SelectedRows
            lItemsToRemove.Add(Convert.ToInt64(sRow.Cells("idMovie").Value))
        Next

        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each tID As Long In lItemsToRemove
                Master.DB.Delete_Movie(tID, True)
                DataGridView_Row_Remove_Movie(tID)
            Next
            SQLtransaction.Commit()
        End Using

        DataGridView_FillList_Main(False, True, False)
    End Sub

    Private Sub ShowNotification(ByVal timeout As Integer, ByVal title As String, ByVal message As String, ByVal icon As ToolTipIcon)
        TrayIcon.ShowBalloonTip(timeout, title, message, icon)
    End Sub

    Private Sub SetControlsEnabled(ByVal isEnabled As Boolean, Optional ByVal withLists As Boolean = False, Optional ByVal withTools As Boolean = True)
        Dim currMainTabTag = MainTab_GetCurrentTag()
        For Each i As Object In mnuMainTools.DropDownItems
            If TypeOf i Is ToolStripMenuItem Then
                Dim o As ToolStripMenuItem = DirectCast(i, ToolStripMenuItem)
                If o.Tag Is Nothing Then
                    o.Enabled = isEnabled AndAlso ((dgvMovies.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.Movie) OrElse
                                                   (dgvMovieSets.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.Movieset) OrElse
                                                   (dgvTVShows.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.TV))
                ElseIf TypeOf o.Tag Is Structures.ModulesMenus Then
                    Dim tagmenu As Structures.ModulesMenus = DirectCast(o.Tag, Structures.ModulesMenus)
                    o.Enabled = (isEnabled OrElse Not withTools) AndAlso (((tagmenu.IfTabMovies AndAlso currMainTabTag.ContentType = Enums.ContentType.Movie) OrElse
                                                                           (tagmenu.IfTabMovieSets AndAlso currMainTabTag.ContentType = Enums.ContentType.Movieset) OrElse
                                                                           (tagmenu.IfTabTVShows AndAlso currMainTabTag.ContentType = Enums.ContentType.TV)) AndAlso
                                                                       ((tagmenu.ForMovies AndAlso (dgvMovies.RowCount > 0 OrElse tagmenu.IfNoMovies)) OrElse
                                                                        (tagmenu.ForMovieSets AndAlso (dgvMovieSets.RowCount > 0 OrElse tagmenu.IfNoMovieSets)) OrElse
                                                                        (tagmenu.ForTVShows AndAlso (dgvTVShows.RowCount > 0 OrElse tagmenu.IfNoTVShows))))
                End If
            ElseIf TypeOf i Is ToolStripSeparator Then
                Dim o As ToolStripSeparator = DirectCast(i, ToolStripSeparator)
                o.Visible = (mnuMainTools.DropDownItems.IndexOf(o) < mnuMainTools.DropDownItems.Count - 1)
            End If
        Next
        With Master.eSettings
            If Not String.IsNullOrEmpty(.MovieBackdropsPath) AndAlso dgvMovies.RowCount > 0 Then
                mnuMainToolsBackdrops.Enabled = True
            Else
                mnuMainToolsBackdrops.Enabled = False
            End If
        End With
        mnuMainEdit.Enabled = isEnabled
        mnuScrapeMovies.Enabled = isEnabled AndAlso dgvMovies.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.Movie
        mnuScrapeMovies.Visible = currMainTabTag.ContentType = Enums.ContentType.Movie
        mnuScrapeMovieSets.Enabled = isEnabled AndAlso dgvMovieSets.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.Movieset
        mnuScrapeMovieSets.Visible = currMainTabTag.ContentType = Enums.ContentType.Movieset
        mnuScrapeTVShows.Enabled = isEnabled AndAlso dgvTVShows.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.TV
        mnuScrapeTVShows.Visible = currMainTabTag.ContentType = Enums.ContentType.TV
        mnuUpdate.Enabled = isEnabled
        cmnuMovie.Enabled = isEnabled
        cmnuMovieSet.Enabled = isEnabled
        cmnuShow.Enabled = isEnabled
        cmnuSeason.Enabled = isEnabled
        cmnuEpisode.Enabled = isEnabled
        tcMain.Enabled = isEnabled
        btnMarkAll.Enabled = isEnabled
        btnMetaDataRefresh.Enabled = isEnabled
        btnUnmarkAll.Enabled = isEnabled
        scMain.IsSplitterFixed = Not isEnabled
        scTV.IsSplitterFixed = Not isEnabled
        scTVSeasonsEpisodes.IsSplitterFixed = Not isEnabled
        mnuMainHelp.Enabled = isEnabled
        cmnuTrayTools.Enabled = mnuMainTools.Enabled
        cmnuTrayScrapeMovies.Enabled = isEnabled AndAlso dgvMovies.RowCount > 0
        cmnuTrayScrapeMovieSets.Enabled = isEnabled AndAlso dgvMovieSets.RowCount > 0
        cmnuTrayScrapeTVShows.Enabled = isEnabled AndAlso dgvTVShows.RowCount > 0
        cmnuTrayUpdate.Enabled = isEnabled
        cmnuTraySettings.Enabled = isEnabled
        cmnuTrayExit.Enabled = isEnabled

        If withLists OrElse isEnabled Then
            dgvMovies.TabStop = isEnabled
            dgvMovieSets.TabStop = isEnabled
            dgvTVShows.TabStop = isEnabled
            dgvTVSeasons.TabStop = isEnabled
            dgvTVEpisodes.TabStop = isEnabled
            dgvMovies.Enabled = isEnabled
            dgvMovieSets.Enabled = isEnabled
            dgvTVShows.Enabled = isEnabled
            dgvTVSeasons.Enabled = isEnabled
            dgvTVEpisodes.Enabled = isEnabled
            txtSearchMovies.Enabled = isEnabled
            txtSearchMovieSets.Enabled = isEnabled
            txtSearchShows.Enabled = isEnabled
        End If
    End Sub

    Private Sub cmnuMovieSetSortMethodSet_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmnuMovieSetEditSortMethodSet.Click
        Using SQLtransaction As SQLite.SQLiteTransaction = Master.DB.MyVideosDBConn.BeginTransaction()
            For Each sRow As DataGridViewRow In dgvMovieSets.SelectedRows
                Dim tmpDBMovieSet As Database.DBElement = Master.DB.Load_Movieset(Convert.ToInt64(sRow.Cells("idSet").Value))
                tmpDBMovieSet.SortMethod = CType(cmnuMovieSetEditSortMethodMethods.ComboBox.SelectedValue, Enums.SortMethod_MovieSet)
                Master.DB.Save_Movieset(tmpDBMovieSet, True, True, False, False, False)
                DataGridView_Row_Update_Movieset(tmpDBMovieSet.ID)
            Next
            SQLtransaction.Commit()
        End Using
    End Sub
    ''' <summary>
    ''' Enable or disable the various menu and context-menu actions based on the currently-defined settings
    ''' </summary>
    ''' <param name="reloadFilters"></param>
    ''' <remarks></remarks>
    Private Sub SetMenus(ByVal reloadFilters As Boolean)
        Dim mnuItem As ToolStripMenuItem
        Dim currMainTabTag = MainTab_GetCurrentTag()

        With Master.eSettings
            mnuMainToolsBackdrops.Enabled = Not String.IsNullOrEmpty(.MovieBackdropsPath)

            ' for future use
            mnuMainToolsClearCache.Enabled = False

            'Load source list for movies
            AddHandler mnuUpdateMovies.DropDown.Closing, AddressOf UpdateDb_SourceSub_Closing
            AddHandler mnuUpdateShows.DropDown.Closing, AddressOf UpdateDb_SourceSub_Closing
            AddHandler cmnuTrayUpdateMovies.DropDown.Closing, AddressOf UpdateDb_SourceSub_Closing
            AddHandler cmnuTrayUpdateShows.DropDown.Closing, AddressOf UpdateDb_SourceSub_Closing

            Dim multipleMovieSources As Boolean = Master.DB.LoadAll_Sources_Movie.Count > 1
            mnuUpdateMovies.DropDownItems.Clear()
            cmnuTrayUpdateMovies.DropDownItems.Clear()
            If multipleMovieSources Then
                mnuUpdateMovies.DropDownItems.Add(Master.eLang.GetString(649, "Update All"), Nothing, New EventHandler(AddressOf UpdateDb_SourceSub_All_Click_Movie))
                mnuUpdateMovies.DropDownItems.Add(New ToolStripSeparator)
                cmnuTrayUpdateMovies.DropDownItems.Add(Master.eLang.GetString(649, "Update All"), Nothing, New EventHandler(AddressOf UpdateDb_SourceSub_All_Click_Movie))
                cmnuTrayUpdateMovies.DropDownItems.Add(New ToolStripSeparator)
            End If
            For Each nSource In Master.DB.LoadAll_Sources_Movie
                mnuItem = New ToolStripMenuItem With {.CheckOnClick = True, .DoubleClickEnabled = True, .ForeColor = If(nSource.Exclude, Color.Gray, Color.Black), .Tag = nSource.IdSource, .Text = nSource.Name}
                If multipleMovieSources Then
                    AddHandler mnuItem.DoubleClick, AddressOf UpdateDb_SourceSub_Single_DoubleClick_Movie
                Else
                    AddHandler mnuItem.Click, AddressOf UpdateDb_SourceSub_Single_DoubleClick_Movie
                End If
                mnuUpdateMovies.DropDownItems.Add(mnuItem)
                mnuItem = New ToolStripMenuItem With {.CheckOnClick = True, .DoubleClickEnabled = True, .ForeColor = If(nSource.Exclude, Color.Gray, Color.Black), .Tag = nSource.IdSource, .Text = nSource.Name}
                If multipleMovieSources Then
                    AddHandler mnuItem.DoubleClick, AddressOf UpdateDb_SourceSub_Single_DoubleClick_Movie
                Else
                    AddHandler mnuItem.Click, AddressOf UpdateDb_SourceSub_Single_DoubleClick_Movie
                End If
                cmnuTrayUpdateMovies.DropDownItems.Add(mnuItem)
            Next
            If multipleMovieSources Then
                mnuUpdateMovies.DropDownItems.Add(Master.eLang.GetString(934, "Update selected"), Nothing, New EventHandler(AddressOf UpdateDb_SourceSub_Selected_Click_Movie))
                cmnuTrayUpdateMovies.DropDownItems.Add(Master.eLang.GetString(934, "Update selected"), Nothing, New EventHandler(AddressOf UpdateDb_SourceSub_Selected_Click_Movie))
            End If

            'Load source list for tv shows
            Dim multipleTVShowSources As Boolean = Master.DB.LoadAll_Sources_TVShow.Count > 1
            mnuUpdateShows.DropDownItems.Clear()
            cmnuTrayUpdateShows.DropDownItems.Clear()
            If multipleTVShowSources Then
                mnuUpdateShows.DropDownItems.Add(Master.eLang.GetString(649, "Update All"), Nothing, New EventHandler(AddressOf UpdateDb_SourceSub_All_Click_TVShow))
                mnuUpdateShows.DropDownItems.Add(New ToolStripSeparator)
                cmnuTrayUpdateShows.DropDownItems.Add(Master.eLang.GetString(649, "Update All"), Nothing, New EventHandler(AddressOf UpdateDb_SourceSub_All_Click_TVShow))
                cmnuTrayUpdateShows.DropDownItems.Add(New ToolStripSeparator)
            End If
            For Each nSource In Master.DB.LoadAll_Sources_TVShow
                mnuItem = New ToolStripMenuItem With {.CheckOnClick = True, .DoubleClickEnabled = True, .ForeColor = If(nSource.Exclude, Color.Gray, Color.Black), .Tag = nSource.IdSource, .Text = nSource.Name}
                If multipleTVShowSources Then
                    AddHandler mnuItem.DoubleClick, AddressOf UpdateDb_SourceSub_Single_DoubleClick_TVShow
                Else
                    AddHandler mnuItem.Click, AddressOf UpdateDb_SourceSub_Single_DoubleClick_TVShow
                End If
                mnuUpdateShows.DropDownItems.Add(mnuItem)
                mnuItem = New ToolStripMenuItem With {.CheckOnClick = True, .DoubleClickEnabled = True, .ForeColor = If(nSource.Exclude, Color.Gray, Color.Black), .Tag = nSource.IdSource, .Text = nSource.Name}
                If multipleTVShowSources Then
                    AddHandler mnuItem.DoubleClick, AddressOf UpdateDb_SourceSub_Single_DoubleClick_TVShow
                Else
                    AddHandler mnuItem.Click, AddressOf UpdateDb_SourceSub_Single_DoubleClick_TVShow
                End If
                cmnuTrayUpdateShows.DropDownItems.Add(mnuItem)
            Next
            If multipleTVShowSources Then
                mnuUpdateShows.DropDownItems.Add(Master.eLang.GetString(934, "Update selected"), Nothing, New EventHandler(AddressOf UpdateDb_SourceSub_Selected_Click_TVShow))
                cmnuTrayUpdateShows.DropDownItems.Add(Master.eLang.GetString(934, "Update selected"), Nothing, New EventHandler(AddressOf UpdateDb_SourceSub_Selected_Click_TVShow))
            End If

            'Load filter list DataFields for movies
            clbFilterDataFields_Movies.Items.Clear()
            clbFilterDataFields_Movies.Items.AddRange(New Object() {"Certification", "Credits", "Director", "Imdb", "MPAA", "OriginalTitle", "Outline", "Plot", "Rating", "premiered", "Runtime", "SortTitle", "Studio", "TMDB", "TMDBColID", "Tag", "Tagline", "Title", "Top250", "Trailer", "VideoSource", "Votes", "Year"})

            'Load sort methods list for moviesets
            Dim SortMethods As New Dictionary(Of String, Enums.SortMethod_MovieSet) From {
                {Master.eLang.GetString(278, "Year"), Enums.SortMethod_MovieSet.Year},
                {Master.eLang.GetString(21, "Title"), Enums.SortMethod_MovieSet.Title}
            }
            cmnuMovieSetEditSortMethodMethods.ComboBox.DataSource = SortMethods.ToList
            cmnuMovieSetEditSortMethodMethods.ComboBox.DisplayMember = "Key"
            cmnuMovieSetEditSortMethodMethods.ComboBox.ValueMember = "Value"
            cmnuMovieSetEditSortMethodMethods.ComboBox.BindingContext = BindingContext

            'Load view list for movies
            listViews_Movies.Clear()
            listViews_Movies.Add(Master.eLang.GetString(786, "Default List"), "movielist")
            For Each cList As String In Master.DB.View_GetList(Enums.ContentType.Movie)
                listViews_Movies.Add(Regex.Replace(cList, "movie-", String.Empty).Trim, cList)
            Next
            cbFilterLists_Movies.DataSource = listViews_Movies.ToList
            cbFilterLists_Movies.DisplayMember = "Key"
            cbFilterLists_Movies.ValueMember = "Value"
            cbFilterLists_Movies.SelectedIndex = 0

            'Load view list for moviesets
            listViews_Moviesets.Clear()
            listViews_Moviesets.Add(Master.eLang.GetString(786, "Default List"), "moviesetlist")
            For Each cList As String In Master.DB.View_GetList(Enums.ContentType.Movieset)
                listViews_Moviesets.Add(Regex.Replace(cList, "sets-", String.Empty).Trim, cList)
            Next
            cbFilterLists_MovieSets.DataSource = listViews_Moviesets.ToList
            cbFilterLists_MovieSets.DisplayMember = "Key"
            cbFilterLists_MovieSets.ValueMember = "Value"
            cbFilterLists_MovieSets.SelectedIndex = 0

            'Load view list for tv shows
            listViews_TVShows.Clear()
            listViews_TVShows.Add(Master.eLang.GetString(786, "Default List"), "tvshowlist")
            For Each cList As String In Master.DB.View_GetList(Enums.ContentType.TVShow)
                listViews_TVShows.Add(Regex.Replace(cList, "tvshow-", String.Empty).Trim, cList)
            Next
            cbFilterLists_Shows.DataSource = listViews_TVShows.ToList
            cbFilterLists_Shows.DisplayMember = "Key"
            cbFilterLists_Shows.ValueMember = "Value"
            cbFilterLists_Shows.SelectedIndex = 0

            'Load language list
            mnuLanguagesLanguage.Items.Clear()
            mnuLanguagesLanguage.Items.AddRange((From lLang In APIXML.ScraperLanguages.Languages.OrderBy(Function(f) f.Description) Select lLang.Description).ToArray)

            'MainTabs
            MainTab_SetTabs()

            'not technically a menu, but it's a good place to put it
            If reloadFilters Then

                RemoveHandler cbFilterDataField_Movies.SelectedIndexChanged, AddressOf clbFilterDataFields_Movies_LostFocus
                cbFilterDataField_Movies.Items.Clear()
                cbFilterDataField_Movies.Items.AddRange(New Object() {Master.eLang.GetString(1291, "Is Empty"), Master.eLang.GetString(1292, "Is Not Empty")})
                cbFilterDataField_Movies.SelectedIndex = 0
                AddHandler cbFilterDataField_Movies.SelectedIndexChanged, AddressOf clbFilterDataFields_Movies_LostFocus

                'Load filter list sources for movies
                clbFilterSources_Movies.Items.Clear()
                clbFilterSources_Movies.Items.AddRange(Master.DB.GetAll_SourceNames_Movie)

                'Load filter list sources for tv shows
                clbFilterSource_Shows.Items.Clear()
                clbFilterSource_Shows.Items.AddRange(Master.DB.GetAll_SourceNames_TVShow)

                'Load filter list "years from" for movies
                RemoveHandler cbFilterYearFrom_Movies.SelectedIndexChanged, AddressOf cbFilterYearFrom_Movies_SelectedIndexChanged
                cbFilterYearFrom_Movies.Items.Clear()
                cbFilterYearFrom_Movies.Items.Add(Master.eLang.CommonWordsList.All)
                For i As Integer = (Date.Now.Year + 1) To 1888 Step -1
                    cbFilterYearFrom_Movies.Items.Add(i)
                Next
                cbFilterYearFrom_Movies.SelectedIndex = 0
                AddHandler cbFilterYearFrom_Movies.SelectedIndexChanged, AddressOf cbFilterYearFrom_Movies_SelectedIndexChanged
                RemoveHandler cbFilterYearModFrom_Movies.SelectedIndexChanged, AddressOf cbFilterYearModFrom_Movies_SelectedIndexChanged
                cbFilterYearModFrom_Movies.SelectedIndex = 0
                AddHandler cbFilterYearModFrom_Movies.SelectedIndexChanged, AddressOf cbFilterYearModFrom_Movies_SelectedIndexChanged

                'Load filter list "years to" for movies
                RemoveHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged
                cbFilterYearTo_Movies.Items.Clear()
                cbFilterYearTo_Movies.Items.Add(Master.eLang.CommonWordsList.All)
                For i As Integer = (Date.Now.Year + 1) To 1888 Step -1
                    cbFilterYearTo_Movies.Items.Add(i)
                Next
                cbFilterYearTo_Movies.SelectedIndex = 0
                AddHandler cbFilterYearTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearTo_Movies_SelectedIndexChanged
                RemoveHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged
                cbFilterYearModTo_Movies.SelectedIndex = 0
                AddHandler cbFilterYearModTo_Movies.SelectedIndexChanged, AddressOf cbFilterYearModTo_Movies_SelectedIndexChanged
            End If

        End With
        mnuScrapeMovies.Enabled = (dgvMovies.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.Movie)
        mnuScrapeMovies.Visible = currMainTabTag.ContentType = Enums.ContentType.Movie
        mnuScrapeMovieSets.Enabled = (dgvMovieSets.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.Movieset)
        mnuScrapeMovieSets.Visible = currMainTabTag.ContentType = Enums.ContentType.Movieset
        mnuScrapeTVShows.Enabled = (dgvTVShows.RowCount > 0 AndAlso currMainTabTag.ContentType = Enums.ContentType.TV)
        mnuScrapeTVShows.Visible = currMainTabTag.ContentType = Enums.ContentType.TV
        cmnuTrayScrapeMovies.Enabled = dgvMovies.RowCount > 0
        cmnuTrayScrapeMovieSets.Enabled = dgvMovieSets.RowCount > 0
        cmnuTrayScrapeTVShows.Enabled = dgvTVShows.RowCount > 0
    End Sub

    Private Sub mnuMainToolsOfflineMM_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainToolsOfflineHolder.Click, cmnuTrayToolsOfflineHolder.Click
        SetControlsEnabled(False)
        'Using dOfflineHolder As New dlgOfflineHolder
        '    dOfflineHolder.ShowDialog()
        'End Using
        Scanner_LoadMedia(New Scanner.ScanOrCleanOptions With {.Movies = True, .TV = False})
        SetControlsEnabled(True)
    End Sub

    Private Sub SetStatus(ByVal text As String)
        tslStatus.Text = text.Replace("&", "&&")
    End Sub

    Private Function GetStatus() As String
        Return tslStatus.Text.Replace("&&", "&")
    End Function

    Private Sub mnuMainEdit_DropDownOpening(sender As Object, e As EventArgs) Handles mnuMainEdit.DropDownOpening
        mnuMainEditSettings.Enabled = Not Addons.Instance.QueryAnyAddonIsBusy
    End Sub

    Private Sub cmnuTray_Opening(sender As Object, e As EventArgs) Handles cmnuTray.Opening
        cmnuTraySettings.Enabled = Not Addons.Instance.QueryAnyAddonIsBusy
    End Sub

    Private Sub mnuMainEditSettings_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainEditSettings.Click, cmnuTraySettings.Click
        Try
            SetControlsEnabled(False)
            pnlLoadSettings.Visible = True

            Dim dThread As Threading.Thread = New Threading.Thread(AddressOf Settings_ShowDialog)
            dThread.SetApartmentState(Threading.ApartmentState.STA)
            dThread.Start()
        Catch ex As Exception
            mnuMainEditSettings.Enabled = True
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Private Sub VersionsToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainHelpVersions.Click
        Addons.Instance.GetVersions()
    End Sub

    Private Sub mnuMainHelpBugTracker_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainHelpBugTracker.Click
        Functions.Launch(My.Resources.urlEmberBugTracker)
    End Sub

    Private Sub mnuMainHelpWiki_Click(ByVal sender As Object, ByVal e As EventArgs)
        Functions.Launch(My.Resources.urlEmberWiki)
    End Sub

    Private Sub mnuMainHelpForumEng_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainHelpForumEng.Click
        Functions.Launch(My.Resources.urlForumEng)
    End Sub

    Private Sub mnuMainHelpForumGer_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainHelpForumGer.Click
        Functions.Launch(My.Resources.urlForumGer)
    End Sub

    Private Sub mnuVersion_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuVersion.Click
        Functions.Launch(My.Resources.urlReleaseThread)
    End Sub

    Private Sub tmrAppExit_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles tmrAppExit.Tick
        tmrAppExit.Enabled = False
        Close()
    End Sub

    Private Sub CheckUpdatesToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles mnuMainHelpUpdate.Click
        If Functions.CheckNeedUpdate() Then
            Using dNewVer As New dlgNewVersion
                If dNewVer.ShowDialog() = DialogResult.Abort Then
                    tmrAppExit.Enabled = True
                    CloseApp = True
                End If
            End Using
        Else
            MessageBox.Show(Master.eLang.GetString(851, "No Updates at this time"), "Updates", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End If
    End Sub

    Private Sub pbStudio_MouseEnter(ByVal sender As Object, ByVal e As EventArgs) Handles pbStudio.MouseEnter
        If Not Master.eAdvancedSettings.GetBooleanSetting("StudioTagAlwaysOn", False) AndAlso pbStudio.Tag IsNot Nothing AndAlso Not String.IsNullOrEmpty(pbStudio.Tag.ToString) Then
            lblStudio.Text = pbStudio.Tag.ToString
        End If
    End Sub

    Private Sub pbStudio_MouseLeave(ByVal sender As Object, ByVal e As EventArgs) Handles pbStudio.MouseLeave
        If Not Master.eAdvancedSettings.GetBooleanSetting("StudioTagAlwaysOn", False) Then lblStudio.Text = String.Empty
    End Sub

    Private Sub tmrKeyBuffer_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles tmrKeyBuffer.Tick
        tmrKeyBuffer.Enabled = False
        KeyBuffer = String.Empty
    End Sub

    Private Sub bwCheckVersion_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwCheckVersion.DoWork
        Try
            'Pull Assembly version info from current Ember repo on github
            Dim HTML As String = HTTP.GetLatestVersionInfo

            If Not String.IsNullOrEmpty(HTML) Then
                'Example: AssemblyFileVersion("1.3.0.18")>
                Dim regVersion = Regex.Match(HTML, "AssemblyFileVersion\(""(\d*)\.(\d*)\.(\d*)(?>\.(\d*))?""\)>", RegexOptions.Singleline)
                'check to see if at least one entry was found
                If regVersion.Success Then
                    'just use the first match if more are found and compare with running Ember Version
                    Dim iMajor As Integer
                    Dim iMinor As Integer
                    Dim iBuild As Integer
                    Dim iRevision As Integer

                    Integer.TryParse(regVersion.Groups(1).Value, iMajor)
                    Integer.TryParse(regVersion.Groups(2).Value, iMinor)
                    Integer.TryParse(regVersion.Groups(3).Value, iBuild)
                    Integer.TryParse(regVersion.Groups(4).Value, iRevision)

                    If iMajor > My.Application.Info.Version.Major OrElse
                        iMajor = My.Application.Info.Version.Major AndAlso iMinor > My.Application.Info.Version.Minor OrElse
                        iMajor = My.Application.Info.Version.Major AndAlso iMinor = My.Application.Info.Version.Minor AndAlso iBuild > My.Application.Info.Version.Build Then
                        'means that running Ember version is outdated!
                        Invoke(New UpdatemnuVersionDel(AddressOf UpdatemnuVersion), String.Format("{0} - {1}", Master.Version, Master.eLang.GetString(1009, "New version available")), Color.DarkRed)
                    Else
                        'Ember already up to date!
                        Invoke(New UpdatemnuVersionDel(AddressOf UpdatemnuVersion), Master.Version, Color.DarkGreen)
                    End If
                End If
                'if no github query possible, than simply display Ember version on form
            Else
                Invoke(New UpdatemnuVersionDel(AddressOf UpdatemnuVersion), Master.Version, Color.DarkBlue)
            End If

        Catch ex As Exception
            logger.Error(ex, New StackFrame().GetMethod().Name)
        End Try
    End Sub

    Public Delegate Sub UpdatemnuVersionDel(sText As String, sForeColor As Color)

    Private Sub UpdatemnuVersion(sText As String, sForeColor As Color)
        mnuVersion.Text = sText
        mnuVersion.ForeColor = sForeColor
    End Sub

#End Region 'Methods

#Region "Nested Types"

    Private Structure Arguments

#Region "Fields"

        Dim ContentType As Enums.ContentType
        Dim ID As Long
        Dim IsTV As Boolean
        Dim DBElement As Database.DBElement
        Dim Path As String
        Dim pURL As String
        Dim ScrapeList As List(Of ScrapeItem)
        Dim ScrapeOptions As Structures.ScrapeOptions
        Dim ScrapeType As Enums.ScrapeType
        Dim Season As Integer
        Dim setEnabled As Boolean
        Dim TaskType As TaskManager.TaskItem.TaskType
        Dim Trigger As Boolean
        Dim withEpisodes As Boolean
        Dim withSeasons As Boolean

#End Region 'Fields

    End Structure

    Private Structure Results

#Region "Fields"

        Dim doFill As Boolean
        Dim fileInfo As String
        Dim IsTV As Boolean
        Dim DBElement As Database.DBElement
        Dim MovieInSetPosters As List(Of MovieInSetPoster)
        Dim ScrapeOptions As Structures.ScrapeOptions
        Dim Path As String
        Dim Result As Image
        Dim ScrapeType As Enums.ScrapeType
        Dim setEnabled As Boolean
        Dim Cancelled As Boolean

#End Region 'Fields

    End Structure

    Class MovieInSetPoster

#Region "Fields"

        Private _movieposter As Image
        Private _movietitle As String
        Private _movieyear As String

#End Region 'Fields

#Region "Properties"

        Public Property MoviePoster() As Image
            Get
                Return _movieposter
            End Get
            Set(ByVal value As Image)
                _movieposter = value
            End Set
        End Property

        Public Property MovieTitle() As String
            Get
                Return _movietitle
            End Get
            Set(ByVal value As String)
                _movietitle = value
            End Set
        End Property

        Public Property MovieYear() As String
            Get
                Return _movieyear
            End Get
            Set(ByVal value As String)
                _movieyear = value
            End Set
        End Property

#End Region 'Properties

#Region "Methods"

        Public Sub New()
            Clear()
        End Sub

        Public Sub Clear()
            _movieposter = Nothing
            _movietitle = String.Empty
            _movieyear = String.Empty
        End Sub

#End Region 'Methods

    End Class

    Structure ScrapeItem

#Region "Fields"

        Dim DataRow As DataRow
        Dim ScrapeModifiers As Structures.ScrapeModifiers

#End Region 'Fields

    End Structure

    Structure Task

#Region "Fields"

        Dim mType As Enums.AddonEventType
        Dim Params As List(Of Object)

#End Region 'Fields

    End Structure

#End Region 'Nested Types

End Class