// <auto-generated />
using EmberAPI.EFModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmberAPICSharp.Migrations
{
    [DbContext(typeof(MyVideosContext))]
    [Migration("20250205151656_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("EmberAPI.EFModels.ActorLink", b =>
                {
                    b.Property<int?>("CastOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cast_order");

                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idPerson");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.HasIndex(new[] { "IdPerson", "MediaType", "IdMedia" }, "ix_actor_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdPerson" }, "ix_actor_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "ix_actor_link_3");

                    b.ToTable("actor_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Art", b =>
                {
                    b.Property<int>("IdArt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idArt");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER")
                        .HasColumnName("width");

                    b.HasKey("IdArt");

                    b.HasIndex(new[] { "IdMedia", "MediaType", "Type" }, "ix_art");

                    b.ToTable("art");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Certification", b =>
                {
                    b.Property<int>("IdCertification")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idCertification");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("IdCertification");

                    b.HasIndex(new[] { "Name" }, "ix_certification")
                        .IsUnique();

                    b.ToTable("certification");
                });

            modelBuilder.Entity("EmberAPI.EFModels.CertificationLink", b =>
                {
                    b.Property<int?>("IdCertification")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idCertification");

                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.HasIndex(new[] { "IdCertification", "MediaType", "IdMedia" }, "certification_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdCertification" }, "certification_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "certification_link_3");

                    b.ToTable("certification_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.CertificationTemp", b =>
                {
                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.ToTable("certification_temp");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idCountry");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("IdCountry");

                    b.ToTable("country");
                });

            modelBuilder.Entity("EmberAPI.EFModels.CountryLink", b =>
                {
                    b.Property<int?>("IdCountry")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idCountry");

                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.HasIndex(new[] { "IdCountry", "MediaType", "IdMedia" }, "country_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdCountry" }, "country_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "country_link_3");

                    b.ToTable("country_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.CreatorLink", b =>
                {
                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idPerson");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.HasIndex(new[] { "IdPerson", "MediaType", "IdMedia" }, "ix_creator_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdPerson" }, "ix_creator_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "ix_creator_link_3");

                    b.ToTable("creator_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.DirectorLink", b =>
                {
                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idPerson");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.HasIndex(new[] { "IdPerson", "MediaType", "IdMedia" }, "ix_director_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdPerson" }, "ix_director_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "ix_director_link_3");

                    b.ToTable("director_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Episode", b =>
                {
                    b.Property<int>("IdEpisode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idEpisode");

                    b.Property<string>("Aired")
                        .HasColumnType("TEXT")
                        .HasColumnName("aired");

                    b.Property<int?>("DateAdded")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DateModified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateModified");

                    b.Property<int?>("DisplayEpisode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("displayEpisode");

                    b.Property<int?>("DisplaySeason")
                        .HasColumnType("INTEGER")
                        .HasColumnName("displaySeason");

                    b.Property<int?>("Episode1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episode");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idFile");

                    b.Property<bool>("HasSub")
                        .HasColumnType("bool")
                        .HasColumnName("hasSub");

                    b.Property<int>("IdShow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idShow");

                    b.Property<int>("IdSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSource");

                    b.Property<int?>("LastPlayed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lastPlayed");

                    b.Property<bool>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<bool?>("New")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasDefaultValue(false)
                        .HasColumnName("new");

                    b.Property<string>("NfoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("nfoPath");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalTitle");

                    b.Property<int?>("Playcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("playcount");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<string>("Runtime")
                        .HasColumnType("TEXT")
                        .HasColumnName("runtime");

                    b.Property<int?>("Season")
                        .HasColumnType("INTEGER")
                        .HasColumnName("season");

                    b.Property<int?>("SubEpisode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subEpisode");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int>("UserRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userRating");

                    b.Property<string>("VideoSource")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoSource");

                    b.HasKey("IdEpisode");

                    b.HasIndex("FileId");

                    b.ToTable("episode");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Episodelist", b =>
                {
                    b.Property<string>("Aired")
                        .HasColumnType("TEXT")
                        .HasColumnName("aired");

                    b.Property<byte[]>("Credits")
                        .HasColumnType("BLOB")
                        .HasColumnName("credits");

                    b.Property<int?>("DateAdded")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DateModified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateModified");

                    b.Property<byte[]>("Director")
                        .HasColumnType("BLOB")
                        .HasColumnName("director");

                    b.Property<int?>("DisplayEpisode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("displayEpisode");

                    b.Property<int?>("DisplaySeason")
                        .HasColumnType("INTEGER")
                        .HasColumnName("displaySeason");

                    b.Property<int?>("Episode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episode");

                    b.Property<string>("FanartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("fanartPath");

                    b.Property<bool?>("HasSub")
                        .HasColumnType("bool")
                        .HasColumnName("hasSub");

                    b.Property<int?>("IdEpisode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idEpisode");

                    b.Property<int?>("IdFile")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idFile");

                    b.Property<int?>("IdShow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idShow");

                    b.Property<int?>("IdSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSource");

                    b.Property<int?>("LastPlayed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lastPlayed");

                    b.Property<bool?>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool?>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<byte[]>("Missing")
                        .HasColumnType("BLOB")
                        .HasColumnName("missing");

                    b.Property<bool?>("New")
                        .HasColumnType("bool")
                        .HasColumnName("new");

                    b.Property<string>("NfoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("nfoPath");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalTitle");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<int?>("Playcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("playcount");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<string>("PosterPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("posterPath");

                    b.Property<string>("Runtime")
                        .HasColumnType("TEXT")
                        .HasColumnName("runtime");

                    b.Property<int?>("Season")
                        .HasColumnType("INTEGER")
                        .HasColumnName("season");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT")
                        .HasColumnName("source");

                    b.Property<int?>("SubEpisode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subEpisode");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<byte[]>("Uniqueid")
                        .HasColumnType("BLOB")
                        .HasColumnName("uniqueid");

                    b.Property<int?>("UserRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userRating");

                    b.Property<string>("VideoSource")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoSource");

                    b.ToTable((string)null);

                    b.ToView("episodelist", (string)null);
                });

            modelBuilder.Entity("EmberAPI.EFModels.Excludedpath", b =>
                {
                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.HasKey("Path");

                    b.ToTable("excludedpath");
                });

            modelBuilder.Entity("EmberAPI.EFModels.FileTemp", b =>
                {
                    b.Property<int?>("IdMovie")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMovie");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.ToTable("file_temp");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Genre", b =>
                {
                    b.Property<int>("IdGenre")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idGenre");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("IdGenre");

                    b.ToTable("genre");
                });

            modelBuilder.Entity("EmberAPI.EFModels.GenreLink", b =>
                {
                    b.Property<int?>("IdGenre")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idGenre");

                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.HasIndex(new[] { "IdGenre", "MediaType", "IdMedia" }, "genre_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdGenre" }, "genre_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "genre_link_3");

                    b.ToTable("genre_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.GueststarLink", b =>
                {
                    b.Property<int?>("CastOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cast_order");

                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idPerson");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.HasIndex(new[] { "IdPerson", "MediaType", "IdMedia" }, "ix_gueststar_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdPerson" }, "ix_gueststar_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "ix_gueststar_link_3");

                    b.ToTable("gueststar_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Movie", b =>
                {
                    b.Property<int>("IdMovie")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMovie");

                    b.Property<int?>("DateAdded")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DateModified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateModified");

                    b.Property<string>("EfanartsPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("efanartsPath");

                    b.Property<string>("EthumbsPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("ethumbsPath");

                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(-1)
                        .HasColumnName("idFile");

                    b.Property<bool>("HasSet")
                        .HasColumnType("bool")
                        .HasColumnName("hasSet");

                    b.Property<bool>("HasSub")
                        .HasColumnType("bool")
                        .HasColumnName("hasSub");

                    b.Property<bool?>("IsSingle")
                        .HasColumnType("bool")
                        .HasColumnName("isSingle");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<int?>("LastPlayed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lastPlayed");

                    b.Property<bool?>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool>("MarkCustom1")
                        .HasColumnType("bool")
                        .HasColumnName("markCustom1");

                    b.Property<bool>("MarkCustom2")
                        .HasColumnType("bool")
                        .HasColumnName("markCustom2");

                    b.Property<bool>("MarkCustom3")
                        .HasColumnType("bool")
                        .HasColumnName("markCustom3");

                    b.Property<bool>("MarkCustom4")
                        .HasColumnType("bool")
                        .HasColumnName("markCustom4");

                    b.Property<bool>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<string>("Mpaa")
                        .HasColumnType("TEXT")
                        .HasColumnName("mpaa");

                    b.Property<bool>("New")
                        .HasColumnType("bool")
                        .HasColumnName("new");

                    b.Property<string>("NfoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("nfoPath");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalTitle");

                    b.Property<bool?>("OutOfTolerance")
                        .HasColumnType("bool")
                        .HasColumnName("outOfTolerance");

                    b.Property<string>("Outline")
                        .HasColumnType("TEXT")
                        .HasColumnName("outline");

                    b.Property<int?>("Playcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("playcount");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<string>("Premiered")
                        .HasColumnType("TEXT")
                        .HasColumnName("premiered");

                    b.Property<string>("Runtime")
                        .HasColumnType("TEXT")
                        .HasColumnName("runtime");

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("sortTitle");

                    b.Property<int>("SourceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSource");

                    b.Property<string>("SubPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("subPath");

                    b.Property<string>("Tagline")
                        .HasColumnType("TEXT")
                        .HasColumnName("tagline");

                    b.Property<string>("ThemePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("themePath");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int?>("Top250")
                        .HasColumnType("INTEGER")
                        .HasColumnName("top250");

                    b.Property<string>("Trailer")
                        .HasColumnType("TEXT")
                        .HasColumnName("trailer");

                    b.Property<string>("TrailerPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("trailerPath");

                    b.Property<int>("UserRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userRating");

                    b.Property<string>("VideoSource")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoSource");

                    b.HasKey("IdMovie");

                    b.HasIndex("SourceId");

                    b.HasIndex(new[] { "FileId", "IdMovie" }, "ix_movie_file_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMovie", "FileId" }, "ix_movie_file_2")
                        .IsUnique();

                    b.ToTable("movie");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Movielist", b =>
                {
                    b.Property<string>("BannerPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("bannerPath");

                    b.Property<byte[]>("Certification")
                        .HasColumnType("BLOB")
                        .HasColumnName("certification");

                    b.Property<string>("ClearartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("clearartPath");

                    b.Property<string>("ClearlogoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("clearlogoPath");

                    b.Property<byte[]>("Country")
                        .HasColumnType("BLOB")
                        .HasColumnName("country");

                    b.Property<byte[]>("Credits")
                        .HasColumnType("BLOB")
                        .HasColumnName("credits");

                    b.Property<int?>("DateAdded")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DateModified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateModified");

                    b.Property<byte[]>("Director")
                        .HasColumnType("BLOB")
                        .HasColumnName("director");

                    b.Property<string>("DiscartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("discartPath");

                    b.Property<string>("EfanartsPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("efanartsPath");

                    b.Property<string>("EthumbsPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("ethumbsPath");

                    b.Property<string>("FanartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("fanartPath");

                    b.Property<byte[]>("Genre")
                        .HasColumnType("BLOB")
                        .HasColumnName("genre");

                    b.Property<bool?>("HasSet")
                        .HasColumnType("bool")
                        .HasColumnName("hasSet");

                    b.Property<bool?>("HasSub")
                        .HasColumnType("bool")
                        .HasColumnName("hasSub");

                    b.Property<int?>("IdFile")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idFile");

                    b.Property<int?>("IdMovie")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMovie");

                    b.Property<int?>("IdSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSource");

                    b.Property<bool?>("IsSingle")
                        .HasColumnType("bool")
                        .HasColumnName("isSingle");

                    b.Property<string>("KeyartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("keyartPath");

                    b.Property<string>("LandscapePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("landscapePath");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<int?>("LastPlayed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lastPlayed");

                    b.Property<bool?>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool?>("MarkCustom1")
                        .HasColumnType("bool")
                        .HasColumnName("markCustom1");

                    b.Property<bool?>("MarkCustom2")
                        .HasColumnType("bool")
                        .HasColumnName("markCustom2");

                    b.Property<bool?>("MarkCustom3")
                        .HasColumnType("bool")
                        .HasColumnName("markCustom3");

                    b.Property<bool?>("MarkCustom4")
                        .HasColumnType("bool")
                        .HasColumnName("markCustom4");

                    b.Property<bool?>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<string>("Mpaa")
                        .HasColumnType("TEXT")
                        .HasColumnName("mpaa");

                    b.Property<bool?>("New")
                        .HasColumnType("bool")
                        .HasColumnName("new");

                    b.Property<string>("NfoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("nfoPath");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalTitle");

                    b.Property<bool?>("OutOfTolerance")
                        .HasColumnType("bool")
                        .HasColumnName("outOfTolerance");

                    b.Property<string>("Outline")
                        .HasColumnType("TEXT")
                        .HasColumnName("outline");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<int?>("Playcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("playcount");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<string>("PosterPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("posterPath");

                    b.Property<string>("Premiered")
                        .HasColumnType("TEXT")
                        .HasColumnName("premiered");

                    b.Property<string>("Runtime")
                        .HasColumnType("TEXT")
                        .HasColumnName("runtime");

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("sortTitle");

                    b.Property<byte[]>("SortedTitle")
                        .HasColumnType("BLOB")
                        .HasColumnName("sortedTitle");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT")
                        .HasColumnName("source");

                    b.Property<byte[]>("Studio")
                        .HasColumnType("BLOB")
                        .HasColumnName("studio");

                    b.Property<string>("SubPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("subPath");

                    b.Property<byte[]>("Tag")
                        .HasColumnType("BLOB")
                        .HasColumnName("tag");

                    b.Property<string>("Tagline")
                        .HasColumnType("TEXT")
                        .HasColumnName("tagline");

                    b.Property<string>("ThemePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("themePath");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int?>("Top250")
                        .HasColumnType("INTEGER")
                        .HasColumnName("top250");

                    b.Property<string>("Trailer")
                        .HasColumnType("TEXT")
                        .HasColumnName("trailer");

                    b.Property<string>("TrailerPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("trailerPath");

                    b.Property<byte[]>("Uniqueid")
                        .HasColumnType("BLOB")
                        .HasColumnName("uniqueid");

                    b.Property<int?>("UserRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userRating");

                    b.Property<string>("VideoSource")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoSource");

                    b.ToTable((string)null);

                    b.ToView("movielist", (string)null);
                });

            modelBuilder.Entity("EmberAPI.EFModels.MoviesAstream", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MovieID");

                    b.Property<int>("StreamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StreamID");

                    b.Property<string>("AudioBitrate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_Bitrate");

                    b.Property<string>("AudioChannel")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_Channel");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_Codec");

                    b.Property<string>("AudioLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_Language");

                    b.Property<string>("AudioLongLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_LongLanguage");

                    b.HasKey("MovieId", "StreamId");

                    b.ToTable("MoviesAStreams");
                });

            modelBuilder.Entity("EmberAPI.EFModels.MoviesSub", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MovieID");

                    b.Property<int>("StreamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StreamID");

                    b.Property<bool>("SubsForced")
                        .HasColumnType("BOOL")
                        .HasColumnName("Subs_Forced");

                    b.Property<string>("SubsLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Subs_Language");

                    b.Property<string>("SubsLongLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Subs_LongLanguage");

                    b.Property<string>("SubsPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("Subs_Path");

                    b.Property<string>("SubsType")
                        .HasColumnType("TEXT")
                        .HasColumnName("Subs_Type");

                    b.HasKey("MovieId", "StreamId");

                    b.ToTable("MoviesSubs");
                });

            modelBuilder.Entity("EmberAPI.EFModels.MoviesVstream", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MovieID");

                    b.Property<int>("StreamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StreamID");

                    b.Property<string>("VideoAspectDisplayRatio")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_AspectDisplayRatio");

                    b.Property<string>("VideoBitrate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Bitrate");

                    b.Property<string>("VideoCodec")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Codec");

                    b.Property<string>("VideoDuration")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Duration");

                    b.Property<int>("VideoFileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Video_FileSize");

                    b.Property<string>("VideoHeight")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Height");

                    b.Property<string>("VideoLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Language");

                    b.Property<string>("VideoLongLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_LongLanguage");

                    b.Property<string>("VideoMultiViewCount")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_MultiViewCount");

                    b.Property<string>("VideoMultiViewLayout")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_MultiViewLayout");

                    b.Property<string>("VideoScanType")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_ScanType");

                    b.Property<string>("VideoStereoMode")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_StereoMode");

                    b.Property<string>("VideoWidth")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Width");

                    b.HasKey("MovieId", "StreamId");

                    b.ToTable("MoviesVStreams");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Movieset", b =>
                {
                    b.Property<int>("IdSet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSet");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<bool>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<bool>("New")
                        .HasColumnType("bool")
                        .HasColumnName("new");

                    b.Property<string>("NfoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("nfoPath");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<int>("SortMethod")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sortMethod");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("IdSet");

                    b.ToTable("movieset");
                });

            modelBuilder.Entity("EmberAPI.EFModels.MoviesetLink", b =>
                {
                    b.Property<int>("IdMovie")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMovie");

                    b.Property<int>("IdSet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSet");

                    b.HasIndex(new[] { "IdSet", "IdMovie" }, "movieset_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMovie", "IdSet" }, "movieset_link_2")
                        .IsUnique();

                    b.ToTable("movieset_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Moviesetlist", b =>
                {
                    b.Property<string>("BannerPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("bannerPath");

                    b.Property<string>("ClearartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("clearartPath");

                    b.Property<string>("ClearlogoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("clearlogoPath");

                    b.Property<string>("DiscartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("discartPath");

                    b.Property<string>("FanartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("fanartPath");

                    b.Property<int?>("IdSet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSet");

                    b.Property<string>("KeyartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("keyartPath");

                    b.Property<string>("LandscapePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("landscapePath");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<bool?>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool?>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<byte[]>("MovieCount")
                        .HasColumnType("BLOB")
                        .HasColumnName("movieCount");

                    b.Property<byte[]>("MovieTitles")
                        .HasColumnType("BLOB")
                        .HasColumnName("movieTitles");

                    b.Property<bool?>("New")
                        .HasColumnType("bool")
                        .HasColumnName("new");

                    b.Property<string>("NfoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("nfoPath");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<string>("PosterPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("posterPath");

                    b.Property<int?>("SortMethod")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sortMethod");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<byte[]>("Uniqueid")
                        .HasColumnType("BLOB")
                        .HasColumnName("uniqueid");

                    b.ToTable((string)null);

                    b.ToView("moviesetlist", (string)null);
                });

            modelBuilder.Entity("EmberAPI.EFModels.Moviesource", b =>
                {
                    b.Property<int>("IdSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSource");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bool")
                        .HasColumnName("exclude");

                    b.Property<bool>("GetYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasDefaultValue(true)
                        .HasColumnName("getYear");

                    b.Property<bool>("IsSingle")
                        .HasColumnType("bool")
                        .HasColumnName("isSingle");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("en-US")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<bool>("ScanRecursive")
                        .HasColumnType("bool")
                        .HasColumnName("scanRecursive");

                    b.Property<bool>("UseFolderName")
                        .HasColumnType("bool")
                        .HasColumnName("useFolderName");

                    b.HasKey("IdSource");

                    b.HasIndex(new[] { "Path" }, "UniqueMovieSourcePath")
                        .IsUnique();

                    b.ToTable("moviesource");
                });

            modelBuilder.Entity("EmberAPI.EFModels.MyFile", b =>
                {
                    b.Property<int>("IdFile")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idFile");

                    b.Property<int?>("FileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fileSize");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalFileName");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.HasKey("IdFile");

                    b.HasIndex(new[] { "Path" }, "UniqueFilename")
                        .IsUnique();

                    b.ToTable("file");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("idPerson");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Thumb")
                        .HasColumnType("TEXT")
                        .HasColumnName("thumb");

                    b.HasKey("IdPerson");

                    b.ToTable("person");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Rating", b =>
                {
                    b.Property<int>("IdRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("idRating");

                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("isDefault");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.Property<double?>("Rating1")
                        .HasColumnType("float(50)")
                        .HasColumnName("rating");

                    b.Property<int?>("RatingMax")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rating_max");

                    b.Property<string>("RatingType")
                        .HasColumnType("TEXT")
                        .HasColumnName("rating_type");

                    b.Property<int?>("Votes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("votes");

                    b.HasKey("IdRating");

                    b.HasIndex(new[] { "IdMedia", "MediaType" }, "ix_rating");

                    b.ToTable("rating");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Season", b =>
                {
                    b.Property<int>("IdSeason")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSeason");

                    b.Property<string>("Aired")
                        .HasColumnType("TEXT")
                        .HasColumnName("aired");

                    b.Property<int?>("IdShow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idShow");

                    b.Property<bool>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<bool>("New")
                        .HasColumnType("bool")
                        .HasColumnName("new");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<int?>("Season1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("season");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("IdSeason");

                    b.HasIndex(new[] { "IdShow", "Season1" }, "ix_season")
                        .IsUnique();

                    b.ToTable("season");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Seasonlist", b =>
                {
                    b.Property<string>("Aired")
                        .HasColumnType("TEXT")
                        .HasColumnName("aired");

                    b.Property<string>("BannerPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("bannerPath");

                    b.Property<byte[]>("Episodes")
                        .HasColumnType("BLOB")
                        .HasColumnName("episodes");

                    b.Property<string>("FanartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("fanartPath");

                    b.Property<byte[]>("HasWatched")
                        .HasColumnType("BLOB")
                        .HasColumnName("hasWatched");

                    b.Property<int?>("IdSeason")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSeason");

                    b.Property<int?>("IdShow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idShow");

                    b.Property<string>("LandscapePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("landscapePath");

                    b.Property<bool?>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool?>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<byte[]>("Missing")
                        .HasColumnType("BLOB")
                        .HasColumnName("missing");

                    b.Property<bool?>("New")
                        .HasColumnType("bool")
                        .HasColumnName("new");

                    b.Property<byte[]>("NewEpisodes")
                        .HasColumnType("BLOB")
                        .HasColumnName("newEpisodes");

                    b.Property<byte[]>("Playcount")
                        .HasColumnType("BLOB")
                        .HasColumnName("playcount");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<string>("PosterPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("posterPath");

                    b.Property<int?>("Season")
                        .HasColumnType("INTEGER")
                        .HasColumnName("season");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<byte[]>("Uniqueid")
                        .HasColumnType("BLOB")
                        .HasColumnName("uniqueid");

                    b.ToTable((string)null);

                    b.ToView("seasonlist", (string)null);
                });

            modelBuilder.Entity("EmberAPI.EFModels.Streamdetail", b =>
                {
                    b.Property<string>("AudioAdditionalFeatures")
                        .HasColumnType("TEXT")
                        .HasColumnName("audioAdditionalFeatures");

                    b.Property<int?>("AudioBitDepth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("audioBitDepth");

                    b.Property<int?>("AudioBitrate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("audioBitrate");

                    b.Property<int?>("AudioChannels")
                        .HasColumnType("INTEGER")
                        .HasColumnName("audioChannels");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("TEXT")
                        .HasColumnName("audioCodec");

                    b.Property<string>("AudioLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("audioLanguage");

                    b.Property<int?>("IdFile")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idFile");

                    b.Property<int?>("StreamType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("streamType");

                    b.Property<bool?>("SubtitleForced")
                        .HasColumnType("boolean")
                        .HasColumnName("subtitleForced");

                    b.Property<string>("SubtitleLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("subtitleLanguage");

                    b.Property<string>("SubtitlePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("subtitlePath");

                    b.Property<double?>("VideoAspect")
                        .HasColumnType("float")
                        .HasColumnName("videoAspect");

                    b.Property<int?>("VideoBitDepth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("videoBitDepth");

                    b.Property<int?>("VideoBitrate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("videoBitrate");

                    b.Property<string>("VideoChromaSubsampling")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoChromaSubsampling");

                    b.Property<string>("VideoCodec")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoCodec");

                    b.Property<string>("VideoColourPrimaries")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoColourPrimaries");

                    b.Property<int?>("VideoDuration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("videoDuration");

                    b.Property<int?>("VideoHeight")
                        .HasColumnType("INTEGER")
                        .HasColumnName("videoHeight");

                    b.Property<string>("VideoLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoLanguage");

                    b.Property<int?>("VideoMultiViewCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("videoMultiViewCount");

                    b.Property<string>("VideoMultiViewLayout")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoMultiViewLayout");

                    b.Property<string>("VideoScantype")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoScantype");

                    b.Property<string>("VideoStereoMode")
                        .HasColumnType("TEXT")
                        .HasColumnName("videoStereoMode");

                    b.Property<int?>("VideoWidth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("videoWidth");

                    b.HasIndex(new[] { "IdFile" }, "ix_streamdetail");

                    b.ToTable("streamdetail");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Studio", b =>
                {
                    b.Property<int>("IdStudio")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idStudio");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("IdStudio");

                    b.ToTable("studio");
                });

            modelBuilder.Entity("EmberAPI.EFModels.StudioLink", b =>
                {
                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<int?>("IdStudio")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idStudio");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.HasIndex(new[] { "IdStudio", "MediaType", "IdMedia" }, "ix_studio_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdStudio" }, "ix_studio_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "ix_studio_link_3");

                    b.ToTable("studio_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Tag", b =>
                {
                    b.Property<int>("IdTag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idTag");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("IdTag");

                    b.HasIndex(new[] { "Name" }, "ix_tag_1")
                        .IsUnique();

                    b.ToTable("tag");
                });

            modelBuilder.Entity("EmberAPI.EFModels.TagLink", b =>
                {
                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<int?>("IdTag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idTag");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.Property<int?>("Sorting")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sorting");

                    b.HasIndex(new[] { "IdTag", "MediaType", "IdMedia" }, "ix_taglinks_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdTag" }, "ix_taglinks_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "ix_taglinks_3");

                    b.ToTable("tag_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Tvastream", b =>
                {
                    b.Property<int>("TvepId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TVEpID");

                    b.Property<int>("StreamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StreamID");

                    b.Property<string>("AudioBitrate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_Bitrate");

                    b.Property<string>("AudioChannel")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_Channel");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_Codec");

                    b.Property<string>("AudioLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_Language");

                    b.Property<string>("AudioLongLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Audio_LongLanguage");

                    b.HasKey("TvepId", "StreamId");

                    b.ToTable("TVAStreams");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Tvshow", b =>
                {
                    b.Property<int>("IdShow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idShow");

                    b.Property<int?>("DateAdded")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DateModified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateModified");

                    b.Property<string>("EfanartsPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("efanartsPath");

                    b.Property<string>("EpisodeGuide")
                        .HasColumnType("TEXT")
                        .HasColumnName("episodeGuide");

                    b.Property<int>("EpisodeOrdering")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episodeOrdering");

                    b.Property<int>("EpisodeSorting")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episodeSorting");

                    b.Property<int>("IdSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSource");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<bool>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<bool>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<string>("Mpaa")
                        .HasColumnType("TEXT")
                        .HasColumnName("mpaa");

                    b.Property<bool?>("New")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasDefaultValue(false)
                        .HasColumnName("new");

                    b.Property<string>("NfoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("nfoPath");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalTitle");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<string>("Premiered")
                        .HasColumnType("TEXT")
                        .HasColumnName("premiered");

                    b.Property<string>("Runtime")
                        .HasColumnType("TEXT")
                        .HasColumnName("runtime");

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("sortTitle");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("ThemePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("themePath");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int>("UserRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userRating");

                    b.HasKey("IdShow");

                    b.HasIndex(new[] { "Path" }, "UniquePath")
                        .IsUnique();

                    b.ToTable("tvshow");
                });

            modelBuilder.Entity("EmberAPI.EFModels.TvshowLink", b =>
                {
                    b.Property<int?>("IdMovie")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMovie");

                    b.Property<int?>("IdShow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idShow");

                    b.HasIndex(new[] { "IdShow", "IdMovie" }, "ix_tvshow_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMovie", "IdShow" }, "ix_tvshow_link_2")
                        .IsUnique();

                    b.ToTable("tvshow_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Tvshowlist", b =>
                {
                    b.Property<string>("BannerPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("bannerPath");

                    b.Property<string>("CharacterartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("characterartPath");

                    b.Property<string>("ClearartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("clearartPath");

                    b.Property<string>("ClearlogoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("clearlogoPath");

                    b.Property<byte[]>("Country")
                        .HasColumnType("BLOB")
                        .HasColumnName("country");

                    b.Property<byte[]>("Creator")
                        .HasColumnType("BLOB")
                        .HasColumnName("creator");

                    b.Property<int?>("DateAdded")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DateModified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dateModified");

                    b.Property<string>("EfanartsPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("efanartsPath");

                    b.Property<string>("EpisodeGuide")
                        .HasColumnType("TEXT")
                        .HasColumnName("episodeGuide");

                    b.Property<int?>("EpisodeOrdering")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episodeOrdering");

                    b.Property<int?>("EpisodeSorting")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episodeSorting");

                    b.Property<byte[]>("Episodes")
                        .HasColumnType("BLOB")
                        .HasColumnName("episodes");

                    b.Property<string>("FanartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("fanartPath");

                    b.Property<byte[]>("Genre")
                        .HasColumnType("BLOB")
                        .HasColumnName("genre");

                    b.Property<byte[]>("HasWatched")
                        .HasColumnType("BLOB")
                        .HasColumnName("hasWatched");

                    b.Property<int?>("IdShow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idShow");

                    b.Property<int?>("IdSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSource");

                    b.Property<string>("KeyartPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("keyartPath");

                    b.Property<string>("LandscapePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("landscapePath");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<bool?>("Locked")
                        .HasColumnType("bool")
                        .HasColumnName("locked");

                    b.Property<byte[]>("LockedEpisodes")
                        .HasColumnType("BLOB")
                        .HasColumnName("lockedEpisodes");

                    b.Property<bool?>("Marked")
                        .HasColumnType("bool")
                        .HasColumnName("marked");

                    b.Property<byte[]>("MarkedEpisodes")
                        .HasColumnType("BLOB")
                        .HasColumnName("markedEpisodes");

                    b.Property<string>("Mpaa")
                        .HasColumnType("TEXT")
                        .HasColumnName("mpaa");

                    b.Property<bool?>("New")
                        .HasColumnType("bool")
                        .HasColumnName("new");

                    b.Property<byte[]>("NewEpisodes")
                        .HasColumnType("BLOB")
                        .HasColumnName("newEpisodes");

                    b.Property<string>("NfoPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("nfoPath");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("originalTitle");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<byte[]>("Playcount")
                        .HasColumnType("BLOB")
                        .HasColumnName("playcount");

                    b.Property<string>("Plot")
                        .HasColumnType("TEXT")
                        .HasColumnName("plot");

                    b.Property<string>("PosterPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("posterPath");

                    b.Property<string>("Premiered")
                        .HasColumnType("TEXT")
                        .HasColumnName("premiered");

                    b.Property<string>("Runtime")
                        .HasColumnType("TEXT")
                        .HasColumnName("runtime");

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("sortTitle");

                    b.Property<byte[]>("SortedTitle")
                        .HasColumnType("BLOB")
                        .HasColumnName("sortedTitle");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT")
                        .HasColumnName("source");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<byte[]>("Studio")
                        .HasColumnType("BLOB")
                        .HasColumnName("studio");

                    b.Property<byte[]>("Tag")
                        .HasColumnType("BLOB")
                        .HasColumnName("tag");

                    b.Property<string>("ThemePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("themePath");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<byte[]>("Uniqueid")
                        .HasColumnType("BLOB")
                        .HasColumnName("uniqueid");

                    b.Property<int?>("UserRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userRating");

                    b.ToTable((string)null);

                    b.ToView("tvshowlist", (string)null);
                });

            modelBuilder.Entity("EmberAPI.EFModels.Tvshowsource", b =>
                {
                    b.Property<int>("IdSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idSource");

                    b.Property<int>("EpisodeOrdering")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episodeOrdering");

                    b.Property<int>("EpisodeSorting")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episodeSorting");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bool")
                        .HasColumnName("exclude");

                    b.Property<bool>("IsSingle")
                        .HasColumnType("bool")
                        .HasColumnName("isSingle");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("en-US")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.HasKey("IdSource");

                    b.HasIndex(new[] { "Path" }, "UniqueTVShowSourcePath")
                        .IsUnique();

                    b.ToTable("tvshowsource");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Tvsub", b =>
                {
                    b.Property<int>("TvepId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TVEpID");

                    b.Property<int>("StreamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StreamID");

                    b.Property<bool>("SubsForced")
                        .HasColumnType("BOOL")
                        .HasColumnName("Subs_Forced");

                    b.Property<string>("SubsLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Subs_Language");

                    b.Property<string>("SubsLongLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Subs_LongLanguage");

                    b.Property<string>("SubsPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("Subs_Path");

                    b.Property<string>("SubsType")
                        .HasColumnType("TEXT")
                        .HasColumnName("Subs_Type");

                    b.HasKey("TvepId", "StreamId");

                    b.ToTable("TVSubs");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Tvvstream", b =>
                {
                    b.Property<int>("TvepId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TVEpID");

                    b.Property<int>("StreamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StreamID");

                    b.Property<string>("VideoAspectDisplayRatio")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_AspectDisplayRatio");

                    b.Property<string>("VideoBitrate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Bitrate");

                    b.Property<string>("VideoCodec")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Codec");

                    b.Property<string>("VideoDuration")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Duration");

                    b.Property<int>("VideoFileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Video_FileSize");

                    b.Property<string>("VideoHeight")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Height");

                    b.Property<string>("VideoLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Language");

                    b.Property<string>("VideoLongLanguage")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_LongLanguage");

                    b.Property<string>("VideoMultiViewCount")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_MultiViewCount");

                    b.Property<string>("VideoMultiViewLayout")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_MultiViewLayout");

                    b.Property<string>("VideoScanType")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_ScanType");

                    b.Property<string>("VideoStereoMode")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_StereoMode");

                    b.Property<string>("VideoWidth")
                        .HasColumnType("TEXT")
                        .HasColumnName("Video_Width");

                    b.HasKey("TvepId", "StreamId");

                    b.ToTable("TVVStreams");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Uniqueid", b =>
                {
                    b.Property<int>("IdUniqueId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idUniqueID");

                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isDefault");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("IdUniqueId");

                    b.HasIndex(new[] { "IdMedia", "MediaType", "Type" }, "ix_uniqueid1");

                    b.HasIndex(new[] { "MediaType", "Value" }, "ix_uniqueid2");

                    b.ToTable("uniqueid");
                });

            modelBuilder.Entity("EmberAPI.EFModels.WriterLink", b =>
                {
                    b.Property<int?>("IdMedia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idMedia");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idPerson");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.HasIndex(new[] { "IdPerson", "MediaType", "IdMedia" }, "ix_writer_link_1")
                        .IsUnique();

                    b.HasIndex(new[] { "IdMedia", "MediaType", "IdPerson" }, "ix_writer_link_2")
                        .IsUnique();

                    b.HasIndex(new[] { "MediaType" }, "ix_writer_link_3");

                    b.ToTable("writer_link");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Episode", b =>
                {
                    b.HasOne("EmberAPI.EFModels.MyFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("EmberAPI.EFModels.Movie", b =>
                {
                    b.HasOne("EmberAPI.EFModels.MyFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmberAPI.EFModels.Moviesource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Source");
                });
#pragma warning restore 612, 618
        }
    }
}
