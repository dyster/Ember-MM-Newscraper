// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace EmberAPI.EFModels;

public partial class MyVideosContext : DbContext
{
    private string _dbPath;

    /// <summary>
    /// This constructor is used by the EF Core Power Tools to generate the model.
    /// </summary>
    public MyVideosContext()
    {
        _dbPath = @"C:\Users\dyste\SynologyDrive\Coding\Ember-MM-Newscraper\EmberMM - Debug - AnyCPU\net8.0-windows\Profiles\Default\MyVideos49.emm";
    }
    public MyVideosContext(string dbPath)
    {
        _dbPath = dbPath;
    }    

    public virtual DbSet<ActorLink> ActorLinks { get; set; }

    public virtual DbSet<Art> Arts { get; set; }

    public virtual DbSet<Certification> Certifications { get; set; }

    public virtual DbSet<CertificationLink> CertificationLinks { get; set; }

    public virtual DbSet<CertificationTemp> CertificationTemps { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CountryLink> CountryLinks { get; set; }

    public virtual DbSet<CreatorLink> CreatorLinks { get; set; }

    public virtual DbSet<DirectorLink> DirectorLinks { get; set; }

    public virtual DbSet<Episode> Episodes { get; set; }

    public virtual DbSet<Episodelist> Episodelists { get; set; }

    public virtual DbSet<Excludedpath> Excludedpaths { get; set; }

    public virtual DbSet<MyFile> Files { get; set; }

    public virtual DbSet<FileTemp> FileTemps { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<GenreLink> GenreLinks { get; set; }

    public virtual DbSet<GueststarLink> GueststarLinks { get; set; }

    public virtual DbSet<Movie> Movies { get; set; }

    public virtual DbSet<Movielist> Movielists { get; set; }

    public virtual DbSet<MoviesAstream> MoviesAstreams { get; set; }

    public virtual DbSet<MoviesSub> MoviesSubs { get; set; }

    public virtual DbSet<MoviesVstream> MoviesVstreams { get; set; }

    public virtual DbSet<Movieset> Moviesets { get; set; }

    public virtual DbSet<MoviesetLink> MoviesetLinks { get; set; }

    public virtual DbSet<Moviesetlist> Moviesetlists { get; set; }

    public virtual DbSet<Moviesource> Moviesources { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Season> Seasons { get; set; }

    public virtual DbSet<Seasonlist> Seasonlists { get; set; }

    public virtual DbSet<Streamdetail> Streamdetails { get; set; }

    public virtual DbSet<Studio> Studios { get; set; }

    public virtual DbSet<StudioLink> StudioLinks { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<TagLink> TagLinks { get; set; }

    public virtual DbSet<Tvastream> Tvastreams { get; set; }

    public virtual DbSet<Tvshow> Tvshows { get; set; }

    public virtual DbSet<TvshowLink> TvshowLinks { get; set; }

    public virtual DbSet<Tvshowlist> Tvshowlists { get; set; }

    public virtual DbSet<Tvshowsource> Tvshowsources { get; set; }

    public virtual DbSet<Tvsub> Tvsubs { get; set; }

    public virtual DbSet<Tvvstream> Tvvstreams { get; set; }

    public virtual DbSet<Uniqueid> Uniqueids { get; set; }

    public virtual DbSet<WriterLink> WriterLinks { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlite($"Data Source={_dbPath}");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Art>(entity =>
        {
            entity.Property(e => e.IdArt).ValueGeneratedNever();
        });

        modelBuilder.Entity<Certification>(entity =>
        {
            entity.Property(e => e.IdCertification).ValueGeneratedNever();
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.Property(e => e.IdCountry).ValueGeneratedNever();
        });

        modelBuilder.Entity<Episode>(entity =>
        {
            entity.Property(e => e.IdEpisode).ValueGeneratedNever();
            entity.Property(e => e.New).HasDefaultValue(false);
            entity.HasOne(e => e.File);
        });

        modelBuilder.Entity<Episodelist>(entity =>
        {
            entity.ToView("episodelist");
        });

        modelBuilder.Entity<MyFile>(entity =>
        {
            entity.Property(e => e.IdFile).ValueGeneratedNever();
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.Property(e => e.IdGenre).ValueGeneratedNever();
        });        

        modelBuilder.Entity<Movie>(entity =>
        {
            entity.Property(e => e.IdMovie).ValueGeneratedNever();
            entity.Property(e => e.FileId).HasDefaultValue(-1);
            entity.HasOne(e => e.File);
        });

        modelBuilder.Entity<Movielist>(entity =>
        {
            entity.ToView("movielist");
        });

        modelBuilder.Entity<Movieset>(entity =>
        {
            entity.Property(e => e.IdSet).ValueGeneratedNever();
        });

        modelBuilder.Entity<Moviesetlist>(entity =>
        {
            entity.ToView("moviesetlist");
        });

        modelBuilder.Entity<Moviesource>(entity =>
        {
            entity.Property(e => e.IdSource).ValueGeneratedNever();
            entity.Property(e => e.GetYear).HasDefaultValue(true);
            entity.Property(e => e.Language).HasDefaultValue("en-US");
        });

        modelBuilder.Entity<Season>(entity =>
        {
            entity.Property(e => e.IdSeason).ValueGeneratedNever();
        });

        modelBuilder.Entity<Seasonlist>(entity =>
        {
            entity.ToView("seasonlist");
        });

        modelBuilder.Entity<Studio>(entity =>
        {
            entity.Property(e => e.IdStudio).ValueGeneratedNever();
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.Property(e => e.IdTag).ValueGeneratedNever();
        });

        modelBuilder.Entity<Tvshow>(entity =>
        {
            entity.Property(e => e.IdShow).ValueGeneratedNever();
            entity.Property(e => e.New).HasDefaultValue(false);
        });

        modelBuilder.Entity<Tvshowlist>(entity =>
        {
            entity.ToView("tvshowlist");
        });

        modelBuilder.Entity<Tvshowsource>(entity =>
        {
            entity.Property(e => e.IdSource).ValueGeneratedNever();
            entity.Property(e => e.Language).HasDefaultValue("en-US");
        });

        modelBuilder.Entity<Uniqueid>(entity =>
        {
            entity.Property(e => e.IdUniqueId).ValueGeneratedNever();
            entity.Property(e => e.IsDefault).HasDefaultValue(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}